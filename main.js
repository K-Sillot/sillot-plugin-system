!function(){"use strict";try{if("undefined"!=typeof document){var e=document.createElement("style");e.appendChild(document.createTextNode(".command.svelte-1bq7axd{padding:8px 12px}.command.svelte-1bq7axd:hover{cursor:pointer;background-color:#0003;color:var(--b3-theme-primary)}.command-selected.svelte-1bq7axd{color:var(--b3-theme-primary);background-color:#0003}.command-plugin.svelte-1bq7axd{font-size:14px}.command-shortcut.svelte-1bq7axd{font-size:12px;color:var(--color-text-3)}.plugin.svelte-bwhxpp span.remove.svelte-bwhxpp{display:none;color:var(--b3-theme-error);margin-left:4px}.plugin.svelte-bwhxpp:hover span.remove.svelte-bwhxpp{display:inline;cursor:pointer}.plugin.svelte-bwhxpp:hover span.remove.svelte-bwhxpp:hover{text-decoration:underline}.plugin-info.svelte-bj9chc{display:flex;align-items:center}.plugin-detail.svelte-bj9chc{margin-top:12px;width:100%}.plugin-name.svelte-bj9chc{display:inline;margin-right:6px;font-size:24px}.plugin-key.svelte-bj9chc{display:inline;font-size:16px}.plugin-manifest.svelte-bj9chc{margin-top:12px}.plugin-readme.svelte-bj9chc{margin-top:20px}.go-back.svelte-bj9chc{margin-left:12px;font-size:12px;height:24px}.go-back-icon.svelte-bj9chc{height:12px;width:12px;margin-right:4px}")),document.head.appendChild(e)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();
(function(){var _a,commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},Reflect$1,Reflect2;Reflect2=Reflect$1||(Reflect$1={}),function(t){var n="object"==typeof commonjsGlobal?commonjsGlobal:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),r=i(Reflect2);function i(e,t){return function(n,r){"function"!=typeof e[n]&&Object.defineProperty(e,n,{configurable:!0,writable:!0,value:r}),t&&t(n,r)}}void 0===n.Reflect?n.Reflect=Reflect2:r=i(n.Reflect,r),function(t){var n=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,i=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",o=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",a="function"==typeof Object.create,s={__proto__:[]}instanceof Array,c=!a&&!s,l={create:a?function(){return ie(Object.create(null))}:s?function(){return ie({__proto__:null})}:function(){return ie({})},has:c?function(e,t){return n.call(e,t)}:function(e,t){return t in e},get:c?function(e,t){return n.call(e,t)?e[t]:void 0}:function(e,t){return e[t]}},u=Object.getPrototypeOf(Function),d="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,p=d||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?te():Map,f=d||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?ne():Set,h=new(d||"function"!=typeof WeakMap?re():WeakMap);function g(e,t,n,r){if(D(n)){if(!H(e))throw new TypeError;if(!Y(t))throw new TypeError;return A(e,t)}if(!H(e))throw new TypeError;if(!F(t))throw new TypeError;if(!F(r)&&!D(r)&&!B(r))throw new TypeError;return B(r)&&(r=void 0),T(e,t,n=V(n),r)}function m(e,t){function n(n,r){if(!F(n))throw new TypeError;if(!D(r)&&!W(r))throw new TypeError;k(e,t,n,r)}return n}function _(e,t,n,r){if(!F(n))throw new TypeError;return D(r)||(r=V(r)),k(e,t,n,r)}function y(e,t,n){if(!F(t))throw new TypeError;return D(n)||(n=V(n)),O(e,t,n)}function v(e,t,n){if(!F(t))throw new TypeError;return D(n)||(n=V(n)),I(e,t,n)}function b(e,t,n){if(!F(t))throw new TypeError;return D(n)||(n=V(n)),N(e,t,n)}function w(e,t,n){if(!F(t))throw new TypeError;return D(n)||(n=V(n)),R(e,t,n)}function E(e,t){if(!F(e))throw new TypeError;return D(t)||(t=V(t)),C(e,t)}function S(e,t){if(!F(e))throw new TypeError;return D(t)||(t=V(t)),x(e,t)}function $(e,t,n){if(!F(t))throw new TypeError;D(n)||(n=V(n));var r=P(t,n,!1);if(D(r))return!1;if(!r.delete(e))return!1;if(r.size>0)return!0;var i=h.get(t);return i.delete(n),i.size>0||h.delete(t),!0}function A(e,t){for(var n=e.length-1;n>=0;--n){var r=(0,e[n])(t);if(!D(r)&&!B(r)){if(!Y(r))throw new TypeError;t=r}}return t}function T(e,t,n,r){for(var i=e.length-1;i>=0;--i){var o=(0,e[i])(t,n,r);if(!D(o)&&!B(o)){if(!F(o))throw new TypeError;r=o}}return r}function P(e,t,n){var r=h.get(e);if(D(r)){if(!n)return;r=new p,h.set(e,r)}var i=r.get(t);if(D(i)){if(!n)return;i=new p,r.set(t,i)}return i}function O(e,t,n){if(I(e,t,n))return!0;var r=ee(t);return!B(r)&&O(e,r,n)}function I(e,t,n){var r=P(t,n,!1);return!D(r)&&q(r.has(e))}function N(e,t,n){if(I(e,t,n))return R(e,t,n);var r=ee(t);return B(r)?void 0:N(e,r,n)}function R(e,t,n){var r=P(t,n,!1);if(!D(r))return r.get(e)}function k(e,t,n,r){P(n,r,!0).set(e,t)}function C(e,t){var n=x(e,t),r=ee(e);if(null===r)return n;var i=C(r,t);if(i.length<=0)return n;if(n.length<=0)return i;for(var o=new f,a=[],s=0,c=n;s<c.length;s++){var l=c[s];o.has(l)||(o.add(l),a.push(l))}for(var u=0,d=i;u<d.length;u++)l=d[u],o.has(l)||(o.add(l),a.push(l));return a}function x(t,n){var r=[],i=P(t,n,!1);if(D(i))return r;for(var o=X(i.keys()),a=0;;){var s=Q(o);if(!s)return r.length=a,r;var c=J(s);try{r[a]=c}catch(e){try{Z(o)}finally{throw e}}a++}}function L(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function D(e){return void 0===e}function B(e){return null===e}function M(e){return"symbol"==typeof e}function F(e){return"object"==typeof e?null!==e:"function"==typeof e}function j(e,t){switch(L(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var n=3===t?"string":5===t?"number":"default",r=z(e,i);if(void 0!==r){var o=r.call(e,n);if(F(o))throw new TypeError;return o}return U(e,"default"===n?"number":n)}function U(e,t){if("string"===t){var n=e.toString;if(K(n)&&!F(i=n.call(e)))return i;if(K(r=e.valueOf)&&!F(i=r.call(e)))return i}else{var r;if(K(r=e.valueOf)&&!F(i=r.call(e)))return i;var i,o=e.toString;if(K(o)&&!F(i=o.call(e)))return i}throw new TypeError}function q(e){return!!e}function G(e){return""+e}function V(e){var t=j(e,3);return M(t)?t:G(t)}function H(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function K(e){return"function"==typeof e}function Y(e){return"function"==typeof e}function W(e){switch(L(e)){case 3:case 4:return!0;default:return!1}}function z(e,t){var n=e[t];if(null!=n){if(!K(n))throw new TypeError;return n}}function X(e){var t=z(e,o);if(!K(t))throw new TypeError;var n=t.call(e);if(!F(n))throw new TypeError;return n}function J(e){return e.value}function Q(e){var t=e.next();return!t.done&&t}function Z(e){var t=e.return;t&&t.call(e)}function ee(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===u)return t;if(t!==u)return t;var n=e.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return t;var i=r.constructor;return"function"!=typeof i||i===e?t:i}function te(){var e={},t=[],n=function(){function e(e,t,n){this._index=0,this._keys=e,this._values=t,this._selector=n}return e.prototype["@@iterator"]=function(){return this},e.prototype[o]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var n=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var n=this._find(e,!0);return this._values[n]=t,this},t.prototype.delete=function(t){var n=this._find(t,!1);if(n>=0){for(var r=this._keys.length,i=n+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new n(this._keys,this._values,r)},t.prototype.values=function(){return new n(this._keys,this._values,i)},t.prototype.entries=function(){return new n(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[o]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function r(e,t){return e}function i(e,t){return t}function a(e,t){return[e,t]}}function ne(){return function(){function e(){this._map=new p}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[o]=function(){return this.keys()},e}()}function re(){var e=16,t=l.create(),r=i();return function(){function e(){this._key=i()}return e.prototype.has=function(e){var t=o(e,!1);return void 0!==t&&l.has(t,this._key)},e.prototype.get=function(e){var t=o(e,!1);return void 0!==t?l.get(t,this._key):void 0},e.prototype.set=function(e,t){return o(e,!0)[this._key]=t,this},e.prototype.delete=function(e){var t=o(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=i()},e}();function i(){var e;do{e="@@WeakMap@@"+c()}while(l.has(t,e));return t[e]=!0,e}function o(e,t){if(!n.call(e,r)){if(!t)return;Object.defineProperty(e,r,{value:l.create()})}return e[r]}function a(e,t){for(var n=0;n<t;++n)e[n]=255*Math.random()|0;return e}function s(e){return"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e):a(new Array(e),e)}function c(){var t=s(e);t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var n="",r=0;r<e;++r){var i=t[r];4!==r&&6!==r&&8!==r||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}function ie(e){return e.__=void 0,delete e.__,e}t("decorate",g),t("metadata",m),t("defineMetadata",_),t("hasMetadata",y),t("hasOwnMetadata",v),t("getMetadata",b),t("getOwnMetadata",w),t("getMetadataKeys",E),t("getOwnMetadataKeys",S),t("deleteMetadata",$)}(r)}();const VERSION$1="0.7.0",VERSION_URL="https://gitee.com/zuoez02/siyuan-plugin-system/raw/main/VERSION",SCRIPT_URL="https://gitee.com/zuoez02/siyuan-plugin-system/raw/main/main.js",PLUGIN_SYS_ABS_PATH="/data/widgets/插件系统/plugin.js",config=()=>({token:window.siyuan.config.api.token}),TYPES={StorageManager:"StorageManager",PluginSystem:"PluginSystem",SystemManager:"PluginSystemLocalManager",PluginLoader:"PluginLoader",PluginFileManager:"PluginFileManager",EventBus:"EventBus",Shortcut:"Shortcut",CommandManager:"CommandManager",Store:"Store",SettingManager:"SettingManager"};async function request$1(e,t){let n=null;return await fetch(e,{body:JSON.stringify(t),method:"POST",headers:{Authorization:`Token ${config().token}`}}).then((function(e){n=e.json()})),n}async function parseBody(e){let t=await e;return 0===t.code?t.data:null}async function transactions(e,t=[]){const n=new URL(e.ws.ws.url);return parseBody(request$1("/api/transactions",{app:n.searchParams.get("app"),session:n.searchParams.get("id"),transactions:t}))}async function sql(e){return parseBody(request$1("/api/query/sql",{stmt:e}))}async function lsNotebooks(e){return parseBody(request$1("/api/notebook/lsNotebooks",{stmt:e}))}async function getAnchor(t,n){let r=`select * from blocks where id = '${t=t.replace("((","").replace("))","")}'`,i=await sql(r),o="";if(i)try{o=i[0][n]?i[0][n]:i[0].content?i[0].content:t}catch(e){o="解析错误"}return o}async function openNotebook(e){return parseBody(request$1("/api/notebook/openNotebook",{notebook:e}))}async function closeNotebook(e){return parseBody(request$1("/api/notebook/closeNotebook",{notebook:e}))}async function renameNotebook(e,t){return parseBody(request$1("/api/notebook/renameNotebook",{notebook:e,name:t}))}async function createNotebook(e){return parseBody(request$1("/api/notebook/createNotebook",{name:e}))}async function removeNotebook(e){return parseBody(request$1("/api/notebook/removeNotebook",{notebook:e}))}async function getNotebookConf(e){return parseBody(request$1("/api/notebook/getNotebookConf",{notebook:e}))}async function setNotebookConf(e){return parseBody(request$1("/api/notebook/setNotebookConf",{notebook:e}))}async function renameDoc(e,t,n){return parseBody(request$1("/api/filetree/renameDoc",{notebook:e,path:t,title:n}))}async function removeDoc(e,t){return parseBody(request$1("/api/filetree/removeDoc",{notebook:e,path:t}))}async function moveDoc(e,t,n,r){return parseBody(request$1("/api/filetree/moveDoc",{fromNotebook:e,fromPath:t,toNotebook:n,toPath:r}))}async function getHPathByPath(e,t){return parseBody(request$1("/api/filetree/getHPathByPath",{Notebook:e,Path:t}))}async function getHPathByID(e){return parseBody(request$1("/api/filetree/getHPathByID",{id:e}))}async function getBlockAttrs(e){return parseBody(request$1("/api/attr/getBlockAttrs",{id:e}))}async function getBlockByID(e){let t=`select * from blocks where id ='${e}'`;return(await sql(t))[0]}async function getBlockKramdown(e){return parseBody(request$1("/api/block/getBlockKramdown",{id:e}))}async function getBlockBreadcrumb(e){return parseBody(request$1("/api/block/getBlockBreadcrumb",{id:e}))}async function setBlockAttrs(e,t){return parseBody(request$1("/api/attr/setBlockAttrs",{id:e,attrs:t}))}async function exportMdContent(e){return parseBody(request$1("/api/export/exportMdContent",{id:e}))}async function getDocOutline(e){return parseBody(request$1("/api/outline/getDocOutline",{id:e}))}async function listDocsByPath(e){return parseBody(request$1("/api/filetree/listDocsByPath",{path:e}))}async function getBacklink(e){return parseBody(request$1("/api/ref/getBacklink",{id:e,beforeLen:10,k:"",mk:""}))}async function searchEmbedBlock(e,t){return parseBody(request$1("/api/search/searchEmbedBlock",{stmt:t,excludeIDs:e}))}async function getDoc(e){return parseBody(request$1("/api/filetree/getDoc",{id:e,k:"",mode:2,size:36}))}async function getFocusedDoc(e){return parseBody(request$1("/api/filetree/getDoc",{id:e,k:"",mode:0,size:36}))}async function getTag(){return parseBody(request$1("/api/tag/getTag",{}))}async function getLocalGraph(e,t,n,r){return parseBody(request$1("/api/graph/getLocalGraph",{id:t,k:e,conf:n,reqId:r}))}async function getGraph(e,t,n){return parseBody(request$1("/api/graph/getGraph",{k:e,conf:t,reqId:n}))}async function searchDocs(e){return parseBody(request$1("/api/filetree/searchDocs",{k:e}))}async function searchBlock(e){return parseBody(request$1("/api/search/searchBlock",{query:e}))}async function searchTemplate(e){return parseBody(request$1("/api/search/searchTemplate",{k:e}))}async function createDocWithMd(e,t,n){return parseBody(request$1("/api/filetree/createDocWithMd",{notebook:e,path:t,markdown:n}))}async function docSaveAsTemplate(e,t=!1){return parseBody(request$1("/api/template/docSaveAsTemplate",{id:e,overwrite:t}))}async function render(e){return parseBody(request$1("/api/template/render",e))}async function insertBlock(e,t,n){let r="/api/block/insertBlock";return parseBody(request$1(r,n={previousID:e,dataType:t,data:n}))}async function prependBlock(e,t,n){let r="/api/block/prependBlock";return parseBody(request$1(r,n={parentID:e,dataType:t,data:n}))}async function appendBlock(e,t,n){let r="/api/block/appendBlock";return parseBody(request$1(r,n={parentID:e,dataType:t,data:n}))}async function updateBlock(e,t,n){let r="/api/block/updateBlock";return parseBody(request$1(r,n={id:e,dataType:t,data:n}))}async function deleteBlock(e){return parseBody(request$1("/api/block/deleteBlock",{id:e}))}async function moveBlock(e,t,n){return parseBody(request$1("/api/block/moveBlock",{id:e,previousID:t,parentID:n}))}async function getSysFonts(){return parseBody(request$1("/api/system/getSysFonts",null))}async function getFile(e,t="text"){const n=await fetch("/api/file/getFile",{method:"POST",headers:{Authorization:`Token ${config().token}`},body:JSON.stringify({path:e})});if(200===n.status){if("text"===t)return await n.text();if("json"===t)return(await n.json()).data}return null}async function putFile(e,t,n=!1,r=Date.now()){let i=new Blob([t]),o=new File([i],e.split("/").pop()),a=new FormData;a.append("path",e),a.append("file",o),a.append("isDir",String(n)),a.append("modTime",String(r));const s=await fetch("/api/file/putFile",{body:a,method:"POST",headers:{Authorization:`Token ${config().token}`}});return 200===s.status?await s.json():null}async function readDir(e){const t=await fetch("/api/file/readDir",{method:"POST",headers:{Authorization:`Token ${config().token}`},body:JSON.stringify({path:e})});return 200===t.status?(await t.json()).data:null}async function removeFile(e){return 200===(await fetch("/api/file/removeFile",{method:"POST",headers:{Authorization:`Token ${config().token}`},body:JSON.stringify({path:e})})).status?void 0:null}const language=null==(_a=window.theme)?void 0:_a.languageMode;async function pushMsg(e=null,t=null,n=7e3){return parseBody(request$1("/api/notification/pushMsg",{msg:e?e[language]||e.other:t,timeout:n}))}async function pushErrMsg(e=null,t=null,n=7e3){return parseBody(request$1("/api/notification/pushErrMsg",{msg:e?e[language]||e.other:t,timeout:n}))}async function setStorageVal(e,t){return parseBody(request$1("/api/storage/setLocalStorageVal",{app:genUUID(),key:e,val:t}))}async function getLocalStorage(){return parseBody(request$1("/api/storage/getLocalStorage",null))}async function renderSprig(e){return parseBody(request$1("/api/template/renderSprig",{template:e}))}async function getBazzarWidget(){return parseBody(request$1("/api/bazaar/getBazaarWidget",null))}const serverApi=Object.freeze(Object.defineProperty({__proto__:null,appendBlock:appendBlock,closeNotebook:closeNotebook,createDocWithMd:createDocWithMd,createNotebook:createNotebook,deleteBlock:deleteBlock,docSaveAsTemplate:docSaveAsTemplate,exportMdContent:exportMdContent,getAnchor:getAnchor,getBacklink:getBacklink,getBazzarWidget:getBazzarWidget,getBlockAttrs:getBlockAttrs,getBlockBreadcrumb:getBlockBreadcrumb,getBlockByID:getBlockByID,getBlockKramdown:getBlockKramdown,getDoc:getDoc,getDocOutline:getDocOutline,getFile:getFile,getFocusedDoc:getFocusedDoc,getGraph:getGraph,getHPathByID:getHPathByID,getHPathByPath:getHPathByPath,getLocalGraph:getLocalGraph,getLocalStorage:getLocalStorage,getNotebookConf:getNotebookConf,getSysFonts:getSysFonts,getTag:getTag,insertBlock:insertBlock,listDocsByPath:listDocsByPath,lsNotebooks:lsNotebooks,moveBlock:moveBlock,moveDoc:moveDoc,openNotebook:openNotebook,parseBody:parseBody,prependBlock:prependBlock,pushErrMsg:pushErrMsg,pushMsg:pushMsg,putFile:putFile,readDir:readDir,removeDoc:removeDoc,removeFile:removeFile,removeNotebook:removeNotebook,renameDoc:renameDoc,renameNotebook:renameNotebook,render:render,renderSprig:renderSprig,request:request$1,searchBlock:searchBlock,searchDocs:searchDocs,searchEmbedBlock:searchEmbedBlock,searchTemplate:searchTemplate,setBlockAttrs:setBlockAttrs,setNotebookConf:setNotebookConf,setStorageVal:setStorageVal,sql:sql,transactions:transactions,updateBlock:updateBlock},Symbol.toStringTag,{value:"Module"}));class Notification{constructor(e){this.option=e}show(){"error"===this.option.type?pushErrMsg(null,this.option.message,this.option.timeout):pushMsg(null,this.option.message,this.option.timeout)}}var z=Object.defineProperty,D=(e,t,n)=>t in e?z(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,_$1=(e,t,n)=>(D(e,"symbol"!=typeof t?t+"":t,n),n),P=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},b={},W={get exports(){return b},set exports(e){b=e}},i,e,t2;i=W,e=P,t2=function(){var e=function(){},t="undefined",n=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"];function i(e,t){var n=e[t];if("function"==typeof n.bind)return n.bind(e);try{return Function.prototype.bind.call(n,e)}catch{return function(){return Function.prototype.apply.apply(n,[e,arguments])}}}function o(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function a(t,n){for(var i=0;i<r.length;i++){var o=r[i];this[o]=i<t?e:this.methodFactory(o,t,n)}this.log=this.debug}function s(e,n,r){return function(){typeof console!==t&&(a.call(this,n,r),this[e].apply(this,arguments))}}function c(r,a,c){return function(r){return"debug"===r&&(r="log"),typeof console!==t&&("trace"===r&&n?o:void 0!==console[r]?i(console,r):void 0!==console.log?i(console,"log"):e)}(r)||s.apply(this,arguments)}function l(e,n,i){var o,s=this;n=n??"WARN";var l="loglevel";function u(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch{}if(typeof e===t)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(l)+"=");-1!==r&&(e=/^([^;]+)/.exec(n.slice(r))[1])}catch{}return void 0===s.levels[e]&&(e=void 0),e}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),s.name=e,s.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},s.methodFactory=i||c,s.getLevel=function(){return o},s.setLevel=function(n,i){if("string"==typeof n&&void 0!==s.levels[n.toUpperCase()]&&(n=s.levels[n.toUpperCase()]),!("number"==typeof n&&n>=0&&n<=s.levels.SILENT))throw"log.setLevel() called with invalid level: "+n;if(o=n,!1!==i&&function(e){var n=(r[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=n)}catch{}try{window.document.cookie=encodeURIComponent(l)+"="+n+";"}catch{}}}(n),a.call(s,n,e),typeof console===t&&n<s.levels.SILENT)return"No console available for logging"},s.setDefaultLevel=function(e){n=e,u()||s.setLevel(e,!1)},s.resetLevel=function(){s.setLevel(n,!1),function(){if(typeof window!==t&&l){try{return void window.localStorage.removeItem(l)}catch{}try{window.document.cookie=encodeURIComponent(l)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch{}}}()},s.enableAll=function(e){s.setLevel(s.levels.TRACE,e)},s.disableAll=function(e){s.setLevel(s.levels.SILENT,e)};var d=u();null==d&&(d=n),s.setLevel(d,!1)}var u=new l,d={};u.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=d[e];return t||(t=d[e]=new l(e,u.getLevel(),u.methodFactory)),t};var p=typeof window!==t?window.log:void 0;return u.noConflict=function(){return typeof window!==t&&window.log===u&&(window.log=p),u},u.getLoggers=function(){return d},u.default=u,u},i.exports?i.exports=t2():e.log=t2();var R={},B={get exports(){return R},set exports(e){R=e}};!function(e){!function(t,n){e.exports?e.exports=n():t.prefix=n(t)}(P,(function(e){var t,n,r={template:"[%t] %l:",levelFormatter:function(e){return e.toUpperCase()},nameFormatter:function(e){return e||"root"},timestampFormatter:function(e){return e.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/,"$1")},format:void 0},i={},o={reg:function(e){if(!e||!e.getLogger)throw new TypeError("Argument is not a root logger");t=e},apply:function(e,n){if(!e||!e.setLevel)throw new TypeError("Argument is not a logger");var o=e.methodFactory,a=e.name||"",s=i[a]||i[""]||r;return i[a]||(e.methodFactory=function(e,t,n){var r=o(e,t,n),s=i[n]||i[""],c=-1!==s.template.indexOf("%t"),l=-1!==s.template.indexOf("%l"),u=-1!==s.template.indexOf("%n");return function(){for(var t="",o=arguments.length,d=Array(o),p=0;p<o;p++)d[p]=arguments[p];if(a||!i[n]){var f=s.timestampFormatter(new Date),h=s.levelFormatter(e),g=s.nameFormatter(n);s.format?t+=s.format(h,g,f):(t+=s.template,c&&(t=t.replace(/%t/,f)),l&&(t=t.replace(/%l/,h)),u&&(t=t.replace(/%n/,g))),d.length&&"string"==typeof d[0]?d[0]=t+" "+d[0]:d.unshift(t)}r.apply(void 0,d)}}),(n=n||{}).template&&(n.format=void 0),i[a]=function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(t in arguments[n])Object.prototype.hasOwnProperty.call(arguments[n],t)&&(e[t]=arguments[n][t]);return e}({},s,n),e.setLevel(e.getLevel()),t||e.warn("It is necessary to call the function reg() of loglevel-plugin-prefix before calling apply. From the next release, it will throw an error. See more: https://github.com/kutuluk/loglevel-plugin-prefix/blob/master/README.md"),e}};return e&&(n=e.prefix,o.noConflict=function(){return e.prefix===o&&(e.prefix=n),o}),o}))}(B);class T{}_$1(T,"LOG_LEVEL_KEY","VITE_LOG_LEVEL"),_$1(T,"LOG_PREFIX_KEY","VITE_LOG_PREFIX");var S=(e=>(e.LOG_LEVEL_DEBUG="DEBUG",e.LOG_LEVEL_INFO="INFO",e.LOG_LEVEL_WARN="WARN",e.LOG_LEVEL_ERROR="ERROR",e))(S||{});function K(){const e=Error.prepareStackTrace;Error.prepareStackTrace=(e,t)=>t;const t=(new Error).stack.slice(1);return Error.prepareStackTrace=e,t}class I{static stringToEnumValue(e,t){return e[Object.keys(e).filter((n=>e[n].toString()===t))[0]]}static getEnvLevel(e){if(!e)return;const t=e.getEnvOrDefault(T.LOG_LEVEL_KEY,S.LOG_LEVEL_INFO),n=I.stringToEnumValue(S,t.toUpperCase());return n||console.warn("[zhi-log] LOG_LEVEL is invalid in you .env file.Must be either debug, info, warn or error, fallback to default info level"),n}static getEnvLogger(e){if(e)return e.getEnv(T.LOG_PREFIX_KEY)}}class Y{constructor(e,t,n){let r;_$1(this,"consoleLogger","console"),_$1(this,"stackSize",1),_$1(this,"getLogger",(e=>{let t;if(e)t=e;else{const e=this.getCallStack(),n=[],r=[];for(let t=0;t<e.length;t++){const r=e[t],i=r.getFileName()??"none";if(t>this.stackSize-1)break;const o=i+"-"+r.getLineNumber()+":"+r.getColumnNumber();n.push(o)}r.length>0&&(t=n.join(" -> "))}return(!t||0===t.trim().length)&&(t=this.consoleLogger),b.getLogger(t)})),this.stackSize=1,r=e||I.getEnvLevel(n),r=r??S.LOG_LEVEL_INFO,b.setLevel(r);const i=e=>e.toString(),o=e=>e.toString(),a=e=>e.toString(),s=e=>e.toString();R.reg(b),R.apply(b,{format(e,r,c){const l=["["+(t??I.getEnvLogger(n)??"zhi")+"]"];switch(l.push(i("[")+o(c).toString()+i("]")),e){case S.LOG_LEVEL_DEBUG:l.push(i(e.toUpperCase().toString()));break;case S.LOG_LEVEL_INFO:l.push(o(e.toUpperCase().toString()));break;case S.LOG_LEVEL_WARN:l.push(a(e.toUpperCase().toString()));break;case S.LOG_LEVEL_ERROR:l.push(s(e.toUpperCase().toString()))}return l.push(o(r).toString()),l.push(i(":")),l.join(" ")}})}setStackSize(e){this.stackSize=e??1}getCallStack(){let e;try{e=K()}catch{e=[]}return e}}class X{constructor(e,t,n){_$1(this,"logger"),this.logger=new Y(e,t,n)}getLogger(e,t){return this.logger.setStackSize(t),this.logger.getLogger(e)}}class N extends X{constructor(e,t,n){super(e,t,n)}getLogger(e,t){return super.getLogger(e,t)}}class M{static defaultLogger(e,t){return M.customLogFactory(void 0,void 0,e).getLogger(void 0,t)}static customLogFactory(e,t,n){return new N(e,t,n)}static customSignLogFactory(e,t){return new N(void 0,e,t)}}function insertBefore(e,t){return e.insertAdjacentElement("beforebegin",t)}function insertAfter(e,t){return e.insertAdjacentElement("afterend",t)}function addToolbarLeft(e){var t;const n=null==(t=document.getElementById("toolbar"))?void 0:t.getElementsByClassName("fn__ellipsis");n&&insertBefore(n[0],e)}function addToolbarRight(e){var t;const n=null==(t=document.getElementById("toolbar"))?void 0:t.getElementsByClassName("fn__ellipsis");n&&insertAfter(n[0],e)}const createLogger=e=>getLogger(e),clientApi=Object.freeze(Object.defineProperty({__proto__:null,addToolbarLeft:addToolbarLeft,addToolbarRight:addToolbarRight,createLogger:createLogger},Symbol.toStringTag,{value:"Module"}));class Menu{constructor(e){var t,n;const r=null==(n=null==(t=window.siyuan)?void 0:t.menus)?void 0:n.menu;if(!r)throw Error("Siyuan internal menu not found!");if(this.menu=r,!e)throw Error("Menu must has an id, got empty or undefined!");r.remove(),r.element.setAttribute("data-name",e)}addItem(e){return this.menu.append(e.element),this}addSeparator(){return this.addItem(new MenuItem({type:"separator"})),this}showAtMouseEvent(e){return this.menu.popup({x:e.clientX,y:e.clientY}),this}showAtPosition(e){return this.menu.popup({x:e.x,y:e.y}),this}close(){this.menu.remove()}}class MenuItem{constructor(e){if(this.element=document.createElement("button"),e.disabled&&this.element.setAttribute("disabled","disabled"),"separator"===e.type)return void this.element.classList.add("b3-menu__separator");this.element.classList.add("b3-menu__item"),e.current&&this.element.classList.add("b3-menu__item--selected"),e.click&&this.element.addEventListener("click",(t=>{this.element.getAttribute("disabled")||(e.click(this.element),t.preventDefault(),t.stopImmediatePropagation(),t.stopPropagation(),window.siyuan.menus.menu.remove())}));let t=`<span class="b3-menu__label">${e.label}</span>`;if(t=e.iconHTML?e.iconHTML+t:`<svg class="b3-menu__icon${["HTML (SiYuan)",window.siyuan.languages.template].includes(e.label)?" ft__error":""}" style="${"iconClose"===e.icon?"height:10px;":""}"><use xlink:href="#${e.icon||""}"></use></svg>${t}`,e.action&&(t+=`<svg class="b3-menu__action"><use xlink:href="#${e.action}"></use></svg>`),e.id&&this.element.setAttribute("data-id",e.id),"readonly"===e.type&&this.element.classList.add("b3-menu__item--readonly"),this.element.innerHTML=t,e.bind&&(this.element.classList.add("b3-menu__item--custom"),e.bind(this.element)),e.submenu){const t=document.createElement("div");t.classList.add("b3-menu__submenu"),e.submenu.forEach((e=>{t.append(new MenuItem(e).element)})),this.element.insertAdjacentHTML("beforeend",'<svg class="b3-menu__icon b3-menu__icon--arrow"><use xlink:href="#iconRight"></use></svg>'),this.element.append(t)}}}class MenuSeparator{}class Dialog{constructor(e){this.disableClose=e.disableClose,this.id=genUUID(),window.siyuan.dialogs.push(this),this.destroyCallback=e.destroyCallback,this.element=document.createElement("div"),this.element.innerHTML=`<div class="b3-dialog">\n<div class="b3-dialog__scrim"${e.transparent?'style="background-color:transparent"':""}></div>\n<div class="b3-dialog__container" style="width:${e.width||"auto"}">\n  <svg class="b3-dialog__close fn__a${this.disableClose?" fn__none":""}"><use xlink:href="#iconClose"></use></svg>\n  <div class="b3-dialog__header${e.title?"":" fn__none"}" onselectstart="return false;">${e.title||""}</div>\n  <div style="height:${e.height||"auto"}">${e.content}</div>\n</div></div>`,this.element.querySelector(".b3-dialog__scrim").addEventListener("click",(e=>{this.disableClose||this.destroy(),e.preventDefault(),e.stopPropagation(),window.siyuan.menus.menu.remove()})),this.disableClose||this.element.querySelector(".b3-dialog__close").addEventListener("click",(e=>{this.destroy(),e.preventDefault(),e.stopPropagation()})),document.body.append(this.element),e.disableAnimation?this.element.classList.add("b3-dialog--open"):setTimeout((()=>{this.element.classList.add("b3-dialog--open")})),window.siyuan.menus.menu.remove()}static destroyAll(){window.siyuan.dialogs.forEach((e=>e.destroy()))}destroy(){this.element.remove(),window.siyuan.menus.menu.remove(),this.destroyCallback&&this.destroyCallback(),window.siyuan.dialogs.find(((e,t)=>{if(e.id===this.id)return window.siyuan.dialogs.splice(t,1),!0}))}bindInput(e,t){e.focus(),e.addEventListener("keydown",(e=>{if(!e.isComposing)return"Escape"===e.key?(this.destroy(),e.preventDefault(),void e.stopPropagation()):void("Enter"===e.key&&t&&(t(),e.preventDefault()));e.preventDefault()}))}}class Plugin{onload(){}onunload(){}registerCommand(e){}registerSettingRender(e){}async loadStorage(e){return null}async writeStorage(e,t){}}const api={clientApi:clientApi,serverApi:serverApi,Plugin:Plugin,Menu:Menu,MenuItem:MenuItem,MenuSeparator:MenuSeparator,Notification:Notification,Dialog:Dialog};var reExports={},re$3={get exports(){return reExports},set exports(e){reExports=e}};const SEMVER_SPEC_VERSION="2.0.0",MAX_LENGTH$2=256,MAX_SAFE_INTEGER$1=Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH=16;var constants$1={SEMVER_SPEC_VERSION:SEMVER_SPEC_VERSION,MAX_LENGTH:MAX_LENGTH$2,MAX_SAFE_INTEGER:MAX_SAFE_INTEGER$1,MAX_SAFE_COMPONENT_LENGTH:MAX_SAFE_COMPONENT_LENGTH};const debug$1="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};var debug_1=debug$1;!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:n}=constants$1,r=debug_1,i=(t=e.exports={}).re=[],o=t.src=[],a=t.t={};let s=0;const c=(e,t,n)=>{const c=s++;r(e,c,t),a[e]=c,o[c]=t,i[c]=new RegExp(t,n?"g":void 0)};c("NUMERICIDENTIFIER","0|[1-9]\\d*"),c("NUMERICIDENTIFIERLOOSE","[0-9]+"),c("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),c("MAINVERSION",`(${o[a.NUMERICIDENTIFIER]})\\.(${o[a.NUMERICIDENTIFIER]})\\.(${o[a.NUMERICIDENTIFIER]})`),c("MAINVERSIONLOOSE",`(${o[a.NUMERICIDENTIFIERLOOSE]})\\.(${o[a.NUMERICIDENTIFIERLOOSE]})\\.(${o[a.NUMERICIDENTIFIERLOOSE]})`),c("PRERELEASEIDENTIFIER",`(?:${o[a.NUMERICIDENTIFIER]}|${o[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASEIDENTIFIERLOOSE",`(?:${o[a.NUMERICIDENTIFIERLOOSE]}|${o[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASE",`(?:-(${o[a.PRERELEASEIDENTIFIER]}(?:\\.${o[a.PRERELEASEIDENTIFIER]})*))`),c("PRERELEASELOOSE",`(?:-?(${o[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${o[a.PRERELEASEIDENTIFIERLOOSE]})*))`),c("BUILDIDENTIFIER","[0-9A-Za-z-]+"),c("BUILD",`(?:\\+(${o[a.BUILDIDENTIFIER]}(?:\\.${o[a.BUILDIDENTIFIER]})*))`),c("FULLPLAIN",`v?${o[a.MAINVERSION]}${o[a.PRERELEASE]}?${o[a.BUILD]}?`),c("FULL",`^${o[a.FULLPLAIN]}$`),c("LOOSEPLAIN",`[v=\\s]*${o[a.MAINVERSIONLOOSE]}${o[a.PRERELEASELOOSE]}?${o[a.BUILD]}?`),c("LOOSE",`^${o[a.LOOSEPLAIN]}$`),c("GTLT","((?:<|>)?=?)"),c("XRANGEIDENTIFIERLOOSE",`${o[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),c("XRANGEIDENTIFIER",`${o[a.NUMERICIDENTIFIER]}|x|X|\\*`),c("XRANGEPLAIN",`[v=\\s]*(${o[a.XRANGEIDENTIFIER]})(?:\\.(${o[a.XRANGEIDENTIFIER]})(?:\\.(${o[a.XRANGEIDENTIFIER]})(?:${o[a.PRERELEASE]})?${o[a.BUILD]}?)?)?`),c("XRANGEPLAINLOOSE",`[v=\\s]*(${o[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[a.XRANGEIDENTIFIERLOOSE]})(?:${o[a.PRERELEASELOOSE]})?${o[a.BUILD]}?)?)?`),c("XRANGE",`^${o[a.GTLT]}\\s*${o[a.XRANGEPLAIN]}$`),c("XRANGELOOSE",`^${o[a.GTLT]}\\s*${o[a.XRANGEPLAINLOOSE]}$`),c("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),c("COERCERTL",o[a.COERCE],!0),c("LONETILDE","(?:~>?)"),c("TILDETRIM",`(\\s*)${o[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",c("TILDE",`^${o[a.LONETILDE]}${o[a.XRANGEPLAIN]}$`),c("TILDELOOSE",`^${o[a.LONETILDE]}${o[a.XRANGEPLAINLOOSE]}$`),c("LONECARET","(?:\\^)"),c("CARETTRIM",`(\\s*)${o[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",c("CARET",`^${o[a.LONECARET]}${o[a.XRANGEPLAIN]}$`),c("CARETLOOSE",`^${o[a.LONECARET]}${o[a.XRANGEPLAINLOOSE]}$`),c("COMPARATORLOOSE",`^${o[a.GTLT]}\\s*(${o[a.LOOSEPLAIN]})$|^$`),c("COMPARATOR",`^${o[a.GTLT]}\\s*(${o[a.FULLPLAIN]})$|^$`),c("COMPARATORTRIM",`(\\s*)${o[a.GTLT]}\\s*(${o[a.LOOSEPLAIN]}|${o[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",c("HYPHENRANGE",`^\\s*(${o[a.XRANGEPLAIN]})\\s+-\\s+(${o[a.XRANGEPLAIN]})\\s*$`),c("HYPHENRANGELOOSE",`^\\s*(${o[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${o[a.XRANGEPLAINLOOSE]})\\s*$`),c("STAR","(<|>)?=?\\s*\\*"),c("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),c("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")}(re$3,reExports);const opts=["includePrerelease","loose","rtl"],parseOptions$2=e=>e?"object"!=typeof e?{loose:!0}:opts.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{};var parseOptions_1=parseOptions$2;const numeric=/^[0-9]+$/,compareIdentifiers$1=(e,t)=>{const n=numeric.test(e),r=numeric.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1},rcompareIdentifiers=(e,t)=>compareIdentifiers$1(t,e);var identifiers$1={compareIdentifiers:compareIdentifiers$1,rcompareIdentifiers:rcompareIdentifiers};const debug=debug_1,{MAX_LENGTH:MAX_LENGTH$1,MAX_SAFE_INTEGER:MAX_SAFE_INTEGER}=constants$1,{re:re$2,t:t$2}=reExports,parseOptions$1=parseOptions_1,{compareIdentifiers:compareIdentifiers}=identifiers$1;let SemVer$d=class e{constructor(t,n){if(n=parseOptions$1(n),t instanceof e){if(t.loose===!!n.loose&&t.includePrerelease===!!n.includePrerelease)return t;t=t.version}else if("string"!=typeof t)throw new TypeError(`Invalid Version: ${t}`);if(t.length>MAX_LENGTH$1)throw new TypeError(`version is longer than ${MAX_LENGTH$1} characters`);debug("SemVer",t,n),this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease;const r=t.trim().match(n.loose?re$2[t$2.LOOSE]:re$2[t$2.FULL]);if(!r)throw new TypeError(`Invalid Version: ${t}`);if(this.raw=t,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError("Invalid major version");if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<MAX_SAFE_INTEGER)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(t){if(debug("SemVer.compare",this.version,this.options,t),!(t instanceof e)){if("string"==typeof t&&t===this.version)return 0;t=new e(t,this.options)}return t.version===this.version?0:this.compareMain(t)||this.comparePre(t)}compareMain(t){return t instanceof e||(t=new e(t,this.options)),compareIdentifiers(this.major,t.major)||compareIdentifiers(this.minor,t.minor)||compareIdentifiers(this.patch,t.patch)}comparePre(t){if(t instanceof e||(t=new e(t,this.options)),this.prerelease.length&&!t.prerelease.length)return-1;if(!this.prerelease.length&&t.prerelease.length)return 1;if(!this.prerelease.length&&!t.prerelease.length)return 0;let n=0;do{const e=this.prerelease[n],r=t.prerelease[n];if(debug("prerelease compare",n,e,r),void 0===e&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===e)return-1;if(e!==r)return compareIdentifiers(e,r)}while(++n)}compareBuild(t){t instanceof e||(t=new e(t,this.options));let n=0;do{const e=this.build[n],r=t.build[n];if(debug("prerelease compare",n,e,r),void 0===e&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===e)return-1;if(e!==r)return compareIdentifiers(e,r)}while(++n)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(0===compareIdentifiers(this.prerelease[0],t)?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}};var semver$1=SemVer$d;const{MAX_LENGTH:MAX_LENGTH}=constants$1,{re:re$1,t:t$1}=reExports,SemVer$c=semver$1,parseOptions=parseOptions_1,parse$6=(e,t)=>{if(t=parseOptions(t),e instanceof SemVer$c)return e;if("string"!=typeof e)return null;if(e.length>MAX_LENGTH)return null;if(!(t.loose?re$1[t$1.LOOSE]:re$1[t$1.FULL]).test(e))return null;try{return new SemVer$c(e,t)}catch(n){return null}};var parse_1=parse$6;const parse$5=parse_1,valid$2=(e,t)=>{const n=parse$5(e,t);return n?n.version:null};var valid_1=valid$2;const parse$4=parse_1,clean$1=(e,t)=>{const n=parse$4(e.trim().replace(/^[=v]+/,""),t);return n?n.version:null};var clean_1=clean$1;const SemVer$b=semver$1,inc$1=(e,t,n,r)=>{"string"==typeof n&&(r=n,n=void 0);try{return new SemVer$b(e instanceof SemVer$b?e.version:e,n).inc(t,r).version}catch(i){return null}};var inc_1=inc$1;const SemVer$a=semver$1,compare$b=(e,t,n)=>new SemVer$a(e,n).compare(new SemVer$a(t,n));var compare_1=compare$b;const compare$a=compare_1,eq$3=(e,t,n)=>0===compare$a(e,t,n);var eq_1=eq$3;const parse$3=parse_1,eq$2=eq_1,diff$1=(e,t)=>{if(eq$2(e,t))return null;{const n=parse$3(e),r=parse$3(t),i=n.prerelease.length||r.prerelease.length,o=i?"pre":"",a=i?"prerelease":"";for(const e in n)if(("major"===e||"minor"===e||"patch"===e)&&n[e]!==r[e])return o+e;return a}};var diff_1=diff$1;const SemVer$9=semver$1,major$1=(e,t)=>new SemVer$9(e,t).major;var major_1=major$1;const SemVer$8=semver$1,minor$1=(e,t)=>new SemVer$8(e,t).minor;var minor_1=minor$1;const SemVer$7=semver$1,patch$1=(e,t)=>new SemVer$7(e,t).patch;var patch_1=patch$1;const parse$2=parse_1,prerelease$1=(e,t)=>{const n=parse$2(e,t);return n&&n.prerelease.length?n.prerelease:null};var prerelease_1=prerelease$1;const compare$9=compare_1,rcompare$1=(e,t,n)=>compare$9(t,e,n);var rcompare_1=rcompare$1;const compare$8=compare_1,compareLoose$1=(e,t)=>compare$8(e,t,!0);var compareLoose_1=compareLoose$1;const SemVer$6=semver$1,compareBuild$3=(e,t,n)=>{const r=new SemVer$6(e,n),i=new SemVer$6(t,n);return r.compare(i)||r.compareBuild(i)};var compareBuild_1=compareBuild$3;const compareBuild$2=compareBuild_1,sort$1=(e,t)=>e.sort(((e,n)=>compareBuild$2(e,n,t)));var sort_1=sort$1;const compareBuild$1=compareBuild_1,rsort$1=(e,t)=>e.sort(((e,n)=>compareBuild$1(n,e,t)));var rsort_1=rsort$1;const compare$7=compare_1,gt$4=(e,t,n)=>compare$7(e,t,n)>0;var gt_1=gt$4;const compare$6=compare_1,lt$3=(e,t,n)=>compare$6(e,t,n)<0;var lt_1=lt$3;const compare$5=compare_1,neq$2=(e,t,n)=>0!==compare$5(e,t,n);var neq_1=neq$2;const compare$4=compare_1,gte$3=(e,t,n)=>compare$4(e,t,n)>=0;var gte_1=gte$3;const compare$3=compare_1,lte$3=(e,t,n)=>compare$3(e,t,n)<=0;var lte_1=lte$3;const eq$1=eq_1,neq$1=neq_1,gt$3=gt_1,gte$2=gte_1,lt$2=lt_1,lte$2=lte_1,cmp$1=(e,t,n,r)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e===n;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e!==n;case"":case"=":case"==":return eq$1(e,n,r);case"!=":return neq$1(e,n,r);case">":return gt$3(e,n,r);case">=":return gte$2(e,n,r);case"<":return lt$2(e,n,r);case"<=":return lte$2(e,n,r);default:throw new TypeError(`Invalid operator: ${t}`)}};var cmp_1=cmp$1;const SemVer$5=semver$1,parse$1=parse_1,{re:re,t:t}=reExports,coerce$1=(e,n)=>{if(e instanceof SemVer$5)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((n=n||{}).rtl){let n;for(;(n=re[t.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&n.index+n[0].length===r.index+r[0].length||(r=n),re[t.COERCERTL].lastIndex=n.index+n[1].length+n[2].length;re[t.COERCERTL].lastIndex=-1}else r=e.match(re[t.COERCE]);return null===r?null:parse$1(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,n)};var coerce_1=coerce$1,iterator,hasRequiredIterator,yallist,hasRequiredYallist,lruCache,hasRequiredLruCache,range,hasRequiredRange,comparator,hasRequiredComparator;function requireIterator(){return hasRequiredIterator?iterator:(hasRequiredIterator=1,iterator=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}})}function requireYallist(){if(hasRequiredYallist)return yallist;function e(t){var n=this;if(n instanceof e||(n=new e),n.tail=null,n.head=null,n.length=0,t&&"function"==typeof t.forEach)t.forEach((function(e){n.push(e)}));else if(arguments.length>0)for(var r=0,i=arguments.length;r<i;r++)n.push(arguments[r]);return n}function t(e,t,n){var r=t===e.head?new i(n,null,t,e):new i(n,t,t.next,e);return null===r.next&&(e.tail=r),null===r.prev&&(e.head=r),e.length++,r}function n(e,t){e.tail=new i(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function r(e,t){e.head=new i(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function i(e,t,n,r){if(!(this instanceof i))return new i(e,t,n,r);this.list=r,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}hasRequiredYallist=1,yallist=e,e.Node=i,e.create=e,e.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,n=e.prev;return t&&(t.prev=n),n&&(n.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=n),e.list.length--,e.next=null,e.prev=null,e.list=null,t},e.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},e.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},e.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)n(this,arguments[e]);return this.length},e.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)r(this,arguments[e]);return this.length},e.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},e.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},e.prototype.forEach=function(e,t){t=t||this;for(var n=this.head,r=0;null!==n;r++)e.call(t,n.value,r,this),n=n.next},e.prototype.forEachReverse=function(e,t){t=t||this;for(var n=this.tail,r=this.length-1;null!==n;r--)e.call(t,n.value,r,this),n=n.prev},e.prototype.get=function(e){for(var t=0,n=this.head;null!==n&&t<e;t++)n=n.next;if(t===e&&null!==n)return n.value},e.prototype.getReverse=function(e){for(var t=0,n=this.tail;null!==n&&t<e;t++)n=n.prev;if(t===e&&null!==n)return n.value},e.prototype.map=function(t,n){n=n||this;for(var r=new e,i=this.head;null!==i;)r.push(t.call(n,i.value,this)),i=i.next;return r},e.prototype.mapReverse=function(t,n){n=n||this;for(var r=new e,i=this.tail;null!==i;)r.push(t.call(n,i.value,this)),i=i.prev;return r},e.prototype.reduce=function(e,t){var n,r=this.head;if(arguments.length>1)n=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");r=this.head.next,n=this.head.value}for(var i=0;null!==r;i++)n=e(n,r.value,i),r=r.next;return n},e.prototype.reduceReverse=function(e,t){var n,r=this.tail;if(arguments.length>1)n=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");r=this.tail.prev,n=this.tail.value}for(var i=this.length-1;null!==r;i--)n=e(n,r.value,i),r=r.prev;return n},e.prototype.toArray=function(){for(var e=new Array(this.length),t=0,n=this.head;null!==n;t++)e[t]=n.value,n=n.next;return e},e.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,n=this.tail;null!==n;t++)e[t]=n.value,n=n.prev;return e},e.prototype.slice=function(t,n){(n=n||this.length)<0&&(n+=this.length),(t=t||0)<0&&(t+=this.length);var r=new e;if(n<t||n<0)return r;t<0&&(t=0),n>this.length&&(n=this.length);for(var i=0,o=this.head;null!==o&&i<t;i++)o=o.next;for(;null!==o&&i<n;i++,o=o.next)r.push(o.value);return r},e.prototype.sliceReverse=function(t,n){(n=n||this.length)<0&&(n+=this.length),(t=t||0)<0&&(t+=this.length);var r=new e;if(n<t||n<0)return r;t<0&&(t=0),n>this.length&&(n=this.length);for(var i=this.length,o=this.tail;null!==o&&i>n;i--)o=o.prev;for(;null!==o&&i>t;i--,o=o.prev)r.push(o.value);return r},e.prototype.splice=function(e,n,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var i=0,o=this.head;null!==o&&i<e;i++)o=o.next;var a=[];for(i=0;o&&i<n;i++)a.push(o.value),o=this.removeNode(o);null===o&&(o=this.tail),o!==this.head&&o!==this.tail&&(o=o.prev);for(i=0;i<r.length;i++)o=t(this,o,r[i]);return a},e.prototype.reverse=function(){for(var e=this.head,t=this.tail,n=e;null!==n;n=n.prev){var r=n.prev;n.prev=n.next,n.next=r}return this.head=t,this.tail=e,this};try{requireIterator()(e)}catch(o){}return yallist}function requireLruCache(){if(hasRequiredLruCache)return lruCache;hasRequiredLruCache=1;const e=requireYallist(),t=Symbol("max"),n=Symbol("length"),r=Symbol("lengthCalculator"),i=Symbol("allowStale"),o=Symbol("maxAge"),a=Symbol("dispose"),s=Symbol("noDisposeOnSet"),c=Symbol("lruList"),l=Symbol("cache"),u=Symbol("updateAgeOnGet"),d=()=>1;const p=(e,t,n)=>{const r=e[l].get(t);if(r){const t=r.value;if(f(e,t)){if(g(e,r),!e[i])return}else n&&(e[u]&&(r.value.now=Date.now()),e[c].unshiftNode(r));return t.value}},f=(e,t)=>{if(!t||!t.maxAge&&!e[o])return!1;const n=Date.now()-t.now;return t.maxAge?n>t.maxAge:e[o]&&n>e[o]},h=e=>{if(e[n]>e[t])for(let r=e[c].tail;e[n]>e[t]&&null!==r;){const t=r.prev;g(e,r),r=t}},g=(e,t)=>{if(t){const r=t.value;e[a]&&e[a](r.key,r.value),e[n]-=r.length,e[l].delete(r.key),e[c].removeNode(t)}};class m{constructor(e,t,n,r,i){this.key=e,this.value=t,this.length=n,this.now=r,this.maxAge=i||0}}const _=(e,t,n,r)=>{let o=n.value;f(e,o)&&(g(e,n),e[i]||(o=void 0)),o&&t.call(r,o.value,o.key,e)};return lruCache=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[t]=e.max||1/0;const n=e.length||d;if(this[r]="function"!=typeof n?d:n,this[i]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[o]=e.maxAge||0,this[a]=e.dispose,this[s]=e.noDisposeOnSet||!1,this[u]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[t]=e||1/0,h(this)}get max(){return this[t]}set allowStale(e){this[i]=!!e}get allowStale(){return this[i]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[o]=e,h(this)}get maxAge(){return this[o]}set lengthCalculator(e){"function"!=typeof e&&(e=d),e!==this[r]&&(this[r]=e,this[n]=0,this[c].forEach((e=>{e.length=this[r](e.value,e.key),this[n]+=e.length}))),h(this)}get lengthCalculator(){return this[r]}get length(){return this[n]}get itemCount(){return this[c].length}rforEach(e,t){t=t||this;for(let n=this[c].tail;null!==n;){const r=n.prev;_(this,e,n,t),n=r}}forEach(e,t){t=t||this;for(let n=this[c].head;null!==n;){const r=n.next;_(this,e,n,t),n=r}}keys(){return this[c].toArray().map((e=>e.key))}values(){return this[c].toArray().map((e=>e.value))}reset(){this[a]&&this[c]&&this[c].length&&this[c].forEach((e=>this[a](e.key,e.value))),this[l]=new Map,this[c]=new e,this[n]=0}dump(){return this[c].map((e=>!f(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[c]}set(e,i,u){if((u=u||this[o])&&"number"!=typeof u)throw new TypeError("maxAge must be a number");const d=u?Date.now():0,p=this[r](i,e);if(this[l].has(e)){if(p>this[t])return g(this,this[l].get(e)),!1;const r=this[l].get(e).value;return this[a]&&(this[s]||this[a](e,r.value)),r.now=d,r.maxAge=u,r.value=i,this[n]+=p-r.length,r.length=p,this.get(e),h(this),!0}const f=new m(e,i,p,d,u);return f.length>this[t]?(this[a]&&this[a](e,i),!1):(this[n]+=f.length,this[c].unshift(f),this[l].set(e,this[c].head),h(this),!0)}has(e){if(!this[l].has(e))return!1;const t=this[l].get(e).value;return!f(this,t)}get(e){return p(this,e,!0)}peek(e){return p(this,e,!1)}pop(){const e=this[c].tail;return e?(g(this,e),e.value):null}del(e){g(this,this[l].get(e))}load(e){this.reset();const t=Date.now();for(let n=e.length-1;n>=0;n--){const r=e[n],i=r.e||0;if(0===i)this.set(r.k,r.v);else{const e=i-t;e>0&&this.set(r.k,r.v,e)}}}prune(){this[l].forEach(((e,t)=>p(this,t,!1)))}}}function requireRange(){if(hasRequiredRange)return range;hasRequiredRange=1;class e{constructor(t,i){if(i=n(i),t instanceof e)return t.loose===!!i.loose&&t.includePrerelease===!!i.includePrerelease?t:new e(t.raw,i);if(t instanceof r)return this.raw=t.value,this.set=[[t]],this.format(),this;if(this.options=i,this.loose=!!i.loose,this.includePrerelease=!!i.includePrerelease,this.raw=t,this.set=t.split("||").map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${t}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!d(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const t of this.set)if(1===t.length&&p(t[0])){this.set=[t];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const n=`parseRange:${Object.keys(this.options).join(",")}:${e}`,o=t.get(n);if(o)return o;const p=this.options.loose,f=p?a[s.HYPHENRANGELOOSE]:a[s.HYPHENRANGE];e=e.replace(f,$(this.options.includePrerelease)),i("hyphen replace",e),e=e.replace(a[s.COMPARATORTRIM],c),i("comparator trim",e);let g=(e=(e=(e=e.replace(a[s.TILDETRIM],l)).replace(a[s.CARETTRIM],u)).split(/\s+/).join(" ")).split(" ").map((e=>h(e,this.options))).join(" ").split(/\s+/).map((e=>S(e,this.options)));p&&(g=g.filter((e=>(i("loose invalid filter",e,this.options),!!e.match(a[s.COMPARATORLOOSE]))))),i("range list",g);const m=new Map,_=g.map((e=>new r(e,this.options)));for(const t of _){if(d(t))return[t];m.set(t.value,t)}m.size>1&&m.has("")&&m.delete("");const y=[...m.values()];return t.set(n,y),y}intersects(t,n){if(!(t instanceof e))throw new TypeError("a Range is required");return this.set.some((e=>f(e,n)&&t.set.some((t=>f(t,n)&&e.every((e=>t.every((t=>e.intersects(t,n)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new o(e,this.options)}catch(t){return!1}for(let n=0;n<this.set.length;n++)if(A(this.set[n],e,this.options))return!0;return!1}}range=e;const t=new(requireLruCache())({max:1e3}),n=parseOptions_1,r=requireComparator(),i=debug_1,o=semver$1,{re:a,t:s,comparatorTrimReplace:c,tildeTrimReplace:l,caretTrimReplace:u}=reExports,d=e=>"<0.0.0-0"===e.value,p=e=>""===e.value,f=(e,t)=>{let n=!0;const r=e.slice();let i=r.pop();for(;n&&r.length;)n=r.every((e=>i.intersects(e,t))),i=r.pop();return n},h=(e,t)=>(i("comp",e,t),e=y(e,t),i("caret",e),e=m(e,t),i("tildes",e),e=b(e,t),i("xrange",e),e=E(e,t),i("stars",e),e),g=e=>!e||"x"===e.toLowerCase()||"*"===e,m=(e,t)=>e.trim().split(/\s+/).map((e=>_(e,t))).join(" "),_=(e,t)=>{const n=t.loose?a[s.TILDELOOSE]:a[s.TILDE];return e.replace(n,((t,n,r,o,a)=>{let s;return i("tilde",e,t,n,r,o,a),g(n)?s="":g(r)?s=`>=${n}.0.0 <${+n+1}.0.0-0`:g(o)?s=`>=${n}.${r}.0 <${n}.${+r+1}.0-0`:a?(i("replaceTilde pr",a),s=`>=${n}.${r}.${o}-${a} <${n}.${+r+1}.0-0`):s=`>=${n}.${r}.${o} <${n}.${+r+1}.0-0`,i("tilde return",s),s}))},y=(e,t)=>e.trim().split(/\s+/).map((e=>v(e,t))).join(" "),v=(e,t)=>{i("caret",e,t);const n=t.loose?a[s.CARETLOOSE]:a[s.CARET],r=t.includePrerelease?"-0":"";return e.replace(n,((t,n,o,a,s)=>{let c;return i("caret",e,t,n,o,a,s),g(n)?c="":g(o)?c=`>=${n}.0.0${r} <${+n+1}.0.0-0`:g(a)?c="0"===n?`>=${n}.${o}.0${r} <${n}.${+o+1}.0-0`:`>=${n}.${o}.0${r} <${+n+1}.0.0-0`:s?(i("replaceCaret pr",s),c="0"===n?"0"===o?`>=${n}.${o}.${a}-${s} <${n}.${o}.${+a+1}-0`:`>=${n}.${o}.${a}-${s} <${n}.${+o+1}.0-0`:`>=${n}.${o}.${a}-${s} <${+n+1}.0.0-0`):(i("no pr"),c="0"===n?"0"===o?`>=${n}.${o}.${a}${r} <${n}.${o}.${+a+1}-0`:`>=${n}.${o}.${a}${r} <${n}.${+o+1}.0-0`:`>=${n}.${o}.${a} <${+n+1}.0.0-0`),i("caret return",c),c}))},b=(e,t)=>(i("replaceXRanges",e,t),e.split(/\s+/).map((e=>w(e,t))).join(" ")),w=(e,t)=>{e=e.trim();const n=t.loose?a[s.XRANGELOOSE]:a[s.XRANGE];return e.replace(n,((n,r,o,a,s,c)=>{i("xRange",e,n,r,o,a,s,c);const l=g(o),u=l||g(a),d=u||g(s),p=d;return"="===r&&p&&(r=""),c=t.includePrerelease?"-0":"",l?n=">"===r||"<"===r?"<0.0.0-0":"*":r&&p?(u&&(a=0),s=0,">"===r?(r=">=",u?(o=+o+1,a=0,s=0):(a=+a+1,s=0)):"<="===r&&(r="<",u?o=+o+1:a=+a+1),"<"===r&&(c="-0"),n=`${r+o}.${a}.${s}${c}`):u?n=`>=${o}.0.0${c} <${+o+1}.0.0-0`:d&&(n=`>=${o}.${a}.0${c} <${o}.${+a+1}.0-0`),i("xRange return",n),n}))},E=(e,t)=>(i("replaceStars",e,t),e.trim().replace(a[s.STAR],"")),S=(e,t)=>(i("replaceGTE0",e,t),e.trim().replace(a[t.includePrerelease?s.GTE0PRE:s.GTE0],"")),$=e=>(t,n,r,i,o,a,s,c,l,u,d,p,f)=>`${n=g(r)?"":g(i)?`>=${r}.0.0${e?"-0":""}`:g(o)?`>=${r}.${i}.0${e?"-0":""}`:a?`>=${n}`:`>=${n}${e?"-0":""}`} ${c=g(l)?"":g(u)?`<${+l+1}.0.0-0`:g(d)?`<${l}.${+u+1}.0-0`:p?`<=${l}.${u}.${d}-${p}`:e?`<${l}.${u}.${+d+1}-0`:`<=${c}`}`.trim(),A=(e,t,n)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(let n=0;n<e.length;n++)if(i(e[n].semver),e[n].semver!==r.ANY&&e[n].semver.prerelease.length>0){const r=e[n].semver;if(r.major===t.major&&r.minor===t.minor&&r.patch===t.patch)return!0}return!1}return!0};return range}function requireComparator(){if(hasRequiredComparator)return comparator;hasRequiredComparator=1;const e=Symbol("SemVer ANY");class t{static get ANY(){return e}constructor(r,i){if(i=n(i),r instanceof t){if(r.loose===!!i.loose)return r;r=r.value}a("comparator",r,i),this.options=i,this.loose=!!i.loose,this.parse(r),this.semver===e?this.value="":this.value=this.operator+this.semver.version,a("comp",this)}parse(t){const n=this.options.loose?r[i.COMPARATORLOOSE]:r[i.COMPARATOR],o=t.match(n);if(!o)throw new TypeError(`Invalid comparator: ${t}`);this.operator=void 0!==o[1]?o[1]:"","="===this.operator&&(this.operator=""),o[2]?this.semver=new s(o[2],this.options.loose):this.semver=e}toString(){return this.value}test(t){if(a("Comparator.test",t,this.options.loose),this.semver===e||t===e)return!0;if("string"==typeof t)try{t=new s(t,this.options)}catch(n){return!1}return o(t,this.operator,this.semver,this.options)}intersects(e,n){if(!(e instanceof t))throw new TypeError("a Comparator is required");if(n&&"object"==typeof n||(n={loose:!!n,includePrerelease:!1}),""===this.operator)return""===this.value||new c(e.value,n).test(this.value);if(""===e.operator)return""===e.value||new c(this.value,n).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),i=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),a=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),l=o(this.semver,"<",e.semver,n)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),u=o(this.semver,">",e.semver,n)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||i||a&&s||l||u}}comparator=t;const n=parseOptions_1,{re:r,t:i}=reExports,o=cmp_1,a=debug_1,s=semver$1,c=requireRange();return comparator}const Range$9=requireRange(),satisfies$4=(e,t,n)=>{try{t=new Range$9(t,n)}catch(r){return!1}return t.test(e)};var satisfies_1=satisfies$4;const Range$8=requireRange(),toComparators$1=(e,t)=>new Range$8(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" ")));var toComparators_1=toComparators$1;const SemVer$4=semver$1,Range$7=requireRange(),maxSatisfying$1=(e,t,n)=>{let r=null,i=null,o=null;try{o=new Range$7(t,n)}catch(a){return null}return e.forEach((e=>{o.test(e)&&(r&&-1!==i.compare(e)||(r=e,i=new SemVer$4(r,n)))})),r};var maxSatisfying_1=maxSatisfying$1;const SemVer$3=semver$1,Range$6=requireRange(),minSatisfying$1=(e,t,n)=>{let r=null,i=null,o=null;try{o=new Range$6(t,n)}catch(a){return null}return e.forEach((e=>{o.test(e)&&(r&&1!==i.compare(e)||(r=e,i=new SemVer$3(r,n)))})),r};var minSatisfying_1=minSatisfying$1;const SemVer$2=semver$1,Range$5=requireRange(),gt$2=gt_1,minVersion$1=(e,t)=>{e=new Range$5(e,t);let n=new SemVer$2("0.0.0");if(e.test(n))return n;if(n=new SemVer$2("0.0.0-0"),e.test(n))return n;n=null;for(let r=0;r<e.set.length;++r){const t=e.set[r];let i=null;t.forEach((e=>{const t=new SemVer$2(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":i&&!gt$2(t,i)||(i=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!i||n&&!gt$2(n,i)||(n=i)}return n&&e.test(n)?n:null};var minVersion_1=minVersion$1;const Range$4=requireRange(),validRange$1=(e,t)=>{try{return new Range$4(e,t).range||"*"}catch(n){return null}};var valid$1=validRange$1;const SemVer$1=semver$1,Comparator$2=requireComparator(),{ANY:ANY$1}=Comparator$2,Range$3=requireRange(),satisfies$3=satisfies_1,gt$1=gt_1,lt$1=lt_1,lte$1=lte_1,gte$1=gte_1,outside$3=(e,t,n,r)=>{let i,o,a,s,c;switch(e=new SemVer$1(e,r),t=new Range$3(t,r),n){case">":i=gt$1,o=lte$1,a=lt$1,s=">",c=">=";break;case"<":i=lt$1,o=gte$1,a=gt$1,s="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(satisfies$3(e,t,r))return!1;for(let l=0;l<t.set.length;++l){const n=t.set[l];let u=null,d=null;if(n.forEach((e=>{e.semver===ANY$1&&(e=new Comparator$2(">=0.0.0")),u=u||e,d=d||e,i(e.semver,u.semver,r)?u=e:a(e.semver,d.semver,r)&&(d=e)})),u.operator===s||u.operator===c)return!1;if((!d.operator||d.operator===s)&&o(e,d.semver))return!1;if(d.operator===c&&a(e,d.semver))return!1}return!0};var outside_1=outside$3;const outside$2=outside_1,gtr$1=(e,t,n)=>outside$2(e,t,">",n);var gtr_1=gtr$1;const outside$1=outside_1,ltr$1=(e,t,n)=>outside$1(e,t,"<",n);var ltr_1=ltr$1;const Range$2=requireRange(),intersects$1=(e,t,n)=>(e=new Range$2(e,n),t=new Range$2(t,n),e.intersects(t));var intersects_1=intersects$1;const satisfies$2=satisfies_1,compare$2=compare_1;var simplify=(e,t,n)=>{const r=[];let i=null,o=null;const a=e.sort(((e,t)=>compare$2(e,t,n)));for(const u of a){satisfies$2(u,t,n)?(o=u,i||(i=u)):(o&&r.push([i,o]),o=null,i=null)}i&&r.push([i,null]);const s=[];for(const[u,d]of r)u===d?s.push(u):d||u!==a[0]?d?u===a[0]?s.push(`<=${d}`):s.push(`${u} - ${d}`):s.push(`>=${u}`):s.push("*");const c=s.join(" || "),l="string"==typeof t.raw?t.raw:String(t);return c.length<l.length?c:t};const Range$1=requireRange(),Comparator$1=requireComparator(),{ANY:ANY}=Comparator$1,satisfies$1=satisfies_1,compare$1=compare_1,subset$1=(e,t,n={})=>{if(e===t)return!0;e=new Range$1(e,n),t=new Range$1(t,n);let r=!1;e:for(const i of e.set){for(const e of t.set){const t=simpleSubset(i,e,n);if(r=r||null!==t,t)continue e}if(r)return!1}return!0},simpleSubset=(e,t,n)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===ANY){if(1===t.length&&t[0].semver===ANY)return!0;e=n.includePrerelease?[new Comparator$1(">=0.0.0-0")]:[new Comparator$1(">=0.0.0")]}if(1===t.length&&t[0].semver===ANY){if(n.includePrerelease)return!0;t=[new Comparator$1(">=0.0.0")]}const r=new Set;let i,o,a,s,c,l,u;for(const f of e)">"===f.operator||">="===f.operator?i=higherGT(i,f,n):"<"===f.operator||"<="===f.operator?o=lowerLT(o,f,n):r.add(f.semver);if(r.size>1)return null;if(i&&o){if(a=compare$1(i.semver,o.semver,n),a>0)return null;if(0===a&&(">="!==i.operator||"<="!==o.operator))return null}for(const f of r){if(i&&!satisfies$1(f,String(i),n))return null;if(o&&!satisfies$1(f,String(o),n))return null;for(const e of t)if(!satisfies$1(f,String(e),n))return!1;return!0}let d=!(!o||n.includePrerelease||!o.semver.prerelease.length)&&o.semver,p=!(!i||n.includePrerelease||!i.semver.prerelease.length)&&i.semver;d&&1===d.prerelease.length&&"<"===o.operator&&0===d.prerelease[0]&&(d=!1);for(const f of t){if(u=u||">"===f.operator||">="===f.operator,l=l||"<"===f.operator||"<="===f.operator,i)if(p&&f.semver.prerelease&&f.semver.prerelease.length&&f.semver.major===p.major&&f.semver.minor===p.minor&&f.semver.patch===p.patch&&(p=!1),">"===f.operator||">="===f.operator){if(s=higherGT(i,f,n),s===f&&s!==i)return!1}else if(">="===i.operator&&!satisfies$1(i.semver,String(f),n))return!1;if(o)if(d&&f.semver.prerelease&&f.semver.prerelease.length&&f.semver.major===d.major&&f.semver.minor===d.minor&&f.semver.patch===d.patch&&(d=!1),"<"===f.operator||"<="===f.operator){if(c=lowerLT(o,f,n),c===f&&c!==o)return!1}else if("<="===o.operator&&!satisfies$1(o.semver,String(f),n))return!1;if(!f.operator&&(o||i)&&0!==a)return!1}return!(i&&l&&!o&&0!==a)&&(!(o&&u&&!i&&0!==a)&&(!p&&!d))},higherGT=(e,t,n)=>{if(!e)return t;const r=compare$1(e.semver,t.semver,n);return r>0?e:r<0||">"===t.operator&&">="===e.operator?t:e},lowerLT=(e,t,n)=>{if(!e)return t;const r=compare$1(e.semver,t.semver,n);return r<0?e:r>0||"<"===t.operator&&"<="===e.operator?t:e};var subset_1=subset$1;const internalRe=reExports,constants=constants$1,SemVer=semver$1,identifiers=identifiers$1,parse=parse_1,valid=valid_1,clean=clean_1,inc=inc_1,diff=diff_1,major=major_1,minor=minor_1,patch=patch_1,prerelease=prerelease_1,compare=compare_1,rcompare=rcompare_1,compareLoose=compareLoose_1,compareBuild=compareBuild_1,sort=sort_1,rsort=rsort_1,gt=gt_1,lt=lt_1,eq=eq_1,neq=neq_1,gte=gte_1,lte=lte_1,cmp=cmp_1,coerce=coerce_1,Comparator=requireComparator(),Range=requireRange(),satisfies=satisfies_1,toComparators=toComparators_1,maxSatisfying=maxSatisfying_1,minSatisfying=minSatisfying_1,minVersion=minVersion_1,validRange=valid$1,outside=outside_1,gtr=gtr_1,ltr=ltr_1,intersects=intersects_1,simplifyRange=simplify,subset=subset_1;var semver={parse:parse,valid:valid,clean:clean,inc:inc,diff:diff,major:major,minor:minor,patch:patch,prerelease:prerelease,compare:compare,rcompare:rcompare,compareLoose:compareLoose,compareBuild:compareBuild,sort:sort,rsort:rsort,gt:gt,lt:lt,eq:eq,neq:neq,gte:gte,lte:lte,cmp:cmp,coerce:coerce,Comparator:Comparator,Range:Range,satisfies:satisfies,toComparators:toComparators,maxSatisfying:maxSatisfying,minSatisfying:minSatisfying,minVersion:minVersion,validRange:validRange,outside:outside,gtr:gtr,ltr:ltr,intersects:intersects,simplifyRange:simplifyRange,subset:subset,SemVer:SemVer,re:internalRe.re,src:internalRe.src,tokens:internalRe.t,SEMVER_SPEC_VERSION:constants.SEMVER_SPEC_VERSION,compareIdentifiers:identifiers.compareIdentifiers,rcompareIdentifiers:identifiers.rcompareIdentifiers};class FileClient{constructor(){this.electronApi={readDir(e){const t=window.require("fs"),n=window.require("path"),r=n.join(window.siyuan.config.system.dataDir,"..");return new Promise((i=>{t.readdir(n.join(r,e),((o,a)=>{if(o)return void i([]);const s=a.map((i=>({isDir:t.statSync(n.join(r,e,i)).isDirectory(),name:i})));i(s)}))}))},getFile:(t,n="text")=>new Promise(((r,i)=>{const o=window.require("fs"),a=window.require("path"),s=a.join(window.siyuan.config.system.dataDir,"..");o.readFile(a.join(s,t),((t,o)=>{if(t)return i(t);const a=o.toString("utf8");if("json"===n)try{return r(JSON.parse(a))}catch(e){return void i(e)}return r(a)}))})),putFile:putFile,removeFile:e=>new Promise(((t,n)=>{const r=window.require("fs"),i=window.require("path"),o=i.join(window.siyuan.config.system.dataDir,".."),a=i.join(o,e);log("Remove files from",a),r.rm(a,{recursive:!0,force:!0},(e=>{if(e)return n(e);t(null)}))}))},this.serverApi={readDir:readDir,getFile:getFile,putFile:putFile,removeFile:removeFile};const t=this.getVersion();semver.compare(t,"2.8.1")<0?this.fileApi=this.electronApi:this.fileApi=this.serverApi}getVersion(){return window.siyuan.config.system.kernelVersion}static getInstanceApi(){return this.fileClient||(this.fileClient=new FileClient),this.fileClient}}const author$1="作者",version$1="版本",description$1="描述",goBack$1="返回",url$1="地址",readme$1="README",loading$1="加载中",downloading$1="下载中",downloaded$1="已下载",download$1="下载",upgrade$1="升级",nodescription$1="无描述内容",safemode$1="安全模式",safemodetip$1="关闭安全模式允许第三方插件加载",autoupgrade$1="自动更新",autoupgradetip$1="从固定位置获取版本并更新本地存储的插件系统脚本",store_url$1="插件商店地址",store_url_tip$1="线上插件系统仓库地址, 默认为",menu_common$1="通用配置",menu_list$1="插件列表",menu_store$1="插件商店",plugin_system$1="插件系统",plugin_system_setting$1="插件系统设置",reload$1="重载",show_plugin_system_config$1="显示插件系统配置",reload_window$1="重载当前窗口",shortcut$1="快捷键",show_command_panel$1="显示控制面板",uninstall$1="卸载",new_version_widget$1="集市发现新版本的插件系统,请前往更新并重载",zh_CN={author:author$1,version:version$1,description:description$1,goBack:goBack$1,url:url$1,readme:readme$1,loading:loading$1,downloading:downloading$1,downloaded:downloaded$1,download:download$1,upgrade:upgrade$1,nodescription:nodescription$1,safemode:safemode$1,safemodetip:safemodetip$1,autoupgrade:autoupgrade$1,autoupgradetip:autoupgradetip$1,store_url:store_url$1,store_url_tip:store_url_tip$1,menu_common:menu_common$1,menu_list:menu_list$1,menu_store:menu_store$1,plugin_system:plugin_system$1,plugin_system_setting:plugin_system_setting$1,reload:reload$1,show_plugin_system_config:show_plugin_system_config$1,reload_window:reload_window$1,shortcut:shortcut$1,show_command_panel:show_command_panel$1,uninstall:uninstall$1,new_version_widget:new_version_widget$1},author="Author",version="Version",description="Description",goBack="Go Back",url="URL",readme="README",loading="Loading",downloading="Downloading",downloaded="Downloaded",download="Download",upgrade="Upgrade",nodescription="No Description content",safemode="Safe Mode",safemodetip="Turn off safe mode to enable third party plugins.",autoupgrade="Auto Upgrade",autoupgradetip="Auto upgrade plugin system online.",store_url="Plugin Store URL",store_url_tip="Plugin Store URL, default is",menu_common="Common Setting",menu_list="Plugins",menu_store="Store",plugin_system="Plugin System",plugin_system_setting="Plugin System Setting",reload="Reload",show_plugin_system_config="Show plugin system config",reload_window="Reload current window",shortcut="Shortcut",show_command_panel="Show command panel",uninstall="Uninstall",new_version_widget="New version plugin system found in Bazzar, please upgrade and reload.",en_US={author:author,version:version,description:description,goBack:goBack,url:url,readme:readme,loading:loading,downloading:downloading,downloaded:downloaded,download:download,upgrade:upgrade,nodescription:nodescription,safemode:safemode,safemodetip:safemodetip,autoupgrade:autoupgrade,autoupgradetip:autoupgradetip,store_url:store_url,store_url_tip:store_url_tip,menu_common:menu_common,menu_list:menu_list,menu_store:menu_store,plugin_system:plugin_system,plugin_system_setting:plugin_system_setting,reload:reload,show_plugin_system_config:show_plugin_system_config,reload_window:reload_window,shortcut:shortcut,show_command_panel:show_command_panel,uninstall:uninstall,new_version_widget:new_version_widget};function bind(e,t){return function(){return e.apply(t,arguments)}}const{toString:toString}=Object.prototype,{getPrototypeOf:getPrototypeOf}=Object,kindOf=(cache=Object.create(null),e=>{const t=toString.call(e);return cache[t]||(cache[t]=t.slice(8,-1).toLowerCase())});var cache;const kindOfTest=e=>(e=e.toLowerCase(),t=>kindOf(t)===e),typeOfTest=e=>t=>typeof t===e,{isArray:isArray}=Array,isUndefined=typeOfTest("undefined");function isBuffer(e){return null!==e&&!isUndefined(e)&&null!==e.constructor&&!isUndefined(e.constructor)&&isFunction(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const isArrayBuffer=kindOfTest("ArrayBuffer");function isArrayBufferView(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&isArrayBuffer(e.buffer),t}const isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=e=>null!==e&&"object"==typeof e,isBoolean=e=>!0===e||!1===e,isPlainObject=e=>{if("object"!==kindOf(e))return!1;const t=getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isStream=e=>isObject(e)&&isFunction(e.pipe),isFormData=e=>{const t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||toString.call(e)===t||isFunction(e.toString)&&e.toString()===t)},isURLSearchParams=kindOfTest("URLSearchParams"),trim=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function forEach(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,i;if("object"!=typeof e&&(e=[e]),isArray(e))for(r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),o=i.length;let a;for(r=0;r<o;r++)a=i[r],t.call(null,e[a],a,e)}}function findKey(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,i=n.length;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const _global="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,isContextDefined=e=>!isUndefined(e)&&e!==_global;function merge(){const{caseless:e}=isContextDefined(this)&&this||{},t={},n=(n,r)=>{const i=e&&findKey(t,r)||r;isPlainObject(t[i])&&isPlainObject(n)?t[i]=merge(t[i],n):isPlainObject(n)?t[i]=merge({},n):isArray(n)?t[i]=n.slice():t[i]=n};for(let r=0,i=arguments.length;r<i;r++)arguments[r]&&forEach(arguments[r],n);return t}const extend=(e,t,n,{allOwnKeys:r}={})=>(forEach(t,((t,r)=>{n&&isFunction(t)?e[r]=bind(t,n):e[r]=t}),{allOwnKeys:r}),e),stripBOM=e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits=(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject=(e,t,n,r)=>{let i,o,a;const s={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||s[a]||(t[a]=e[a],s[a]=!0);e=!1!==n&&getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},endsWith=(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray=e=>{if(!e)return null;if(isArray(e))return e;let t=e.length;if(!isNumber(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},isTypedArray=(TypedArray="undefined"!=typeof Uint8Array&&getPrototypeOf(Uint8Array),e=>TypedArray&&e instanceof TypedArray);var TypedArray;const forEachEntry=(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll=(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm=kindOfTest("HTMLFormElement"),toCamelCase=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),hasOwnProperty=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),isRegExp=kindOfTest("RegExp"),reduceDescriptors=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};forEach(n,((n,i)=>{!1!==t(n,i,e)&&(r[i]=n)})),Object.defineProperties(e,r)},freezeMethods=e=>{reduceDescriptors(e,((t,n)=>{if(isFunction(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];isFunction(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet=(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return isArray(e)?r(e):r(String(e).split(t)),n},noop$1=()=>{},toFiniteNumber=(e,t)=>(e=+e,Number.isFinite(e)?e:t),ALPHA="abcdefghijklmnopqrstuvwxyz",DIGIT="0123456789",ALPHABET={DIGIT:DIGIT,ALPHA:ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+DIGIT},generateString=(e=16,t=ALPHABET.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n};function isSpecCompliantForm(e){return!!(e&&isFunction(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])}const toJSONObject=e=>{const t=new Array(10),n=(e,r)=>{if(isObject(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const i=isArray(e)?[]:{};return forEach(e,((e,t)=>{const o=n(e,r+1);!isUndefined(o)&&(i[t]=o)})),t[r]=void 0,i}}return e};return n(e,0)},utils={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:isBuffer,isFormData:isFormData,isArrayBufferView:isArrayBufferView,isString:isString,isNumber:isNumber,isBoolean:isBoolean,isObject:isObject,isPlainObject:isPlainObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isRegExp:isRegExp,isFunction:isFunction,isStream:isStream,isURLSearchParams:isURLSearchParams,isTypedArray:isTypedArray,isFileList:isFileList,forEach:forEach,merge:merge,extend:extend,trim:trim,stripBOM:stripBOM,inherits:inherits,toFlatObject:toFlatObject,kindOf:kindOf,kindOfTest:kindOfTest,endsWith:endsWith,toArray:toArray,forEachEntry:forEachEntry,matchAll:matchAll,isHTMLForm:isHTMLForm,hasOwnProperty:hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors:reduceDescriptors,freezeMethods:freezeMethods,toObjectSet:toObjectSet,toCamelCase:toCamelCase,noop:noop$1,toFiniteNumber:toFiniteNumber,findKey:findKey,global:_global,isContextDefined:isContextDefined,ALPHABET:ALPHABET,generateString:generateString,isSpecCompliantForm:isSpecCompliantForm,toJSONObject:toJSONObject};function AxiosError(e,t,n,r,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),i&&(this.response=i)}utils.inherits(AxiosError,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{descriptors[e]={value:e}})),Object.defineProperties(AxiosError,descriptors),Object.defineProperty(prototype$1,"isAxiosError",{value:!0}),AxiosError.from=(e,t,n,r,i,o)=>{const a=Object.create(prototype$1);return utils.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),AxiosError.call(a,e.message,t,n,r,i),a.cause=e,a.name=e.name,o&&Object.assign(a,o),a};const httpAdapter=null;function isVisitable(e){return utils.isPlainObject(e)||utils.isArray(e)}function removeBrackets(e){return utils.endsWith(e,"[]")?e.slice(0,-2):e}function renderKey(e,t,n){return e?e.concat(t).map((function(e,t){return e=removeBrackets(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}function isFlatArray(e){return utils.isArray(e)&&!e.some(isVisitable)}const predicates=utils.toFlatObject(utils,{},null,(function(e){return/^is[A-Z]/.test(e)}));function toFormData(e,t,n){if(!utils.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=utils.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!utils.isUndefined(t[e])}))).metaTokens,i=n.visitor||l,o=n.dots,a=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&utils.isSpecCompliantForm(t);if(!utils.isFunction(i))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(utils.isDate(e))return e.toISOString();if(!s&&utils.isBlob(e))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils.isArrayBuffer(e)||utils.isTypedArray(e)?s&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,i){let s=e;if(e&&!i&&"object"==typeof e)if(utils.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(utils.isArray(e)&&isFlatArray(e)||(utils.isFileList(e)||utils.endsWith(n,"[]"))&&(s=utils.toArray(e)))return n=removeBrackets(n),s.forEach((function(e,r){!utils.isUndefined(e)&&null!==e&&t.append(!0===a?renderKey([n],r,o):null===a?n:n+"[]",c(e))})),!1;return!!isVisitable(e)||(t.append(renderKey(i,n,o),c(e)),!1)}const u=[],d=Object.assign(predicates,{defaultVisitor:l,convertValue:c,isVisitable:isVisitable});if(!utils.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!utils.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),utils.forEach(n,(function(n,o){!0===(!(utils.isUndefined(n)||null===n)&&i.call(t,n,utils.isString(o)?o.trim():o,r,d))&&e(n,r?r.concat(o):[o])})),u.pop()}}(e),t}function encode$1(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function AxiosURLSearchParams(e,t){this._pairs=[],e&&toFormData(e,this,t)}const prototype=AxiosURLSearchParams.prototype;function encode(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(e,t,n){if(!t)return e;const r=n&&n.encode||encode,i=n&&n.serialize;let o;if(o=i?i(t,n):utils.isURLSearchParams(t)?t.toString():new AxiosURLSearchParams(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}prototype.append=function(e,t){this._pairs.push([e,t])},prototype.toString=function(e){const t=e?function(t){return e.call(this,t,encode$1)}:encode$1;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};class InterceptorManager{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){utils.forEach(this.handlers,(function(t){null!==t&&e(t)}))}}const InterceptorManager$1=InterceptorManager,transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1="undefined"!=typeof URLSearchParams?URLSearchParams:AxiosURLSearchParams,FormData$1="undefined"!=typeof FormData?FormData:null,Blob$1="undefined"!=typeof Blob?Blob:null,isStandardBrowserEnv=(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&("undefined"!=typeof window&&"undefined"!=typeof document)})(),isStandardBrowserWebWorkerEnv="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,platform={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob$1},isStandardBrowserEnv:isStandardBrowserEnv,isStandardBrowserWebWorkerEnv:isStandardBrowserWebWorkerEnv,protocols:["http","https","file","blob","url","data"]};function toURLEncodedForm(e,t){return toFormData(e,new platform.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return platform.isNode&&utils.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}function parsePropPath(e){return utils.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}function arrayToObject(e){const t={},n=Object.keys(e);let r;const i=n.length;let o;for(r=0;r<i;r++)o=n[r],t[o]=e[o];return t}function formDataToJSON(e){function t(e,n,r,i){let o=e[i++];const a=Number.isFinite(+o),s=i>=e.length;if(o=!o&&utils.isArray(r)?r.length:o,s)return utils.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!a;r[o]&&utils.isObject(r[o])||(r[o]=[]);return t(e,n,r[o],i)&&utils.isArray(r[o])&&(r[o]=arrayToObject(r[o])),!a}if(utils.isFormData(e)&&utils.isFunction(e.entries)){const n={};return utils.forEachEntry(e,((e,r)=>{t(parsePropPath(e),r,n,0)})),n}return null}const DEFAULT_CONTENT_TYPE={"Content-Type":void 0};function stringifySafely(t,n,r){if(utils.isString(t))try{return(n||JSON.parse)(t),utils.trim(t)}catch(e){if("SyntaxError"!==e.name)throw e}return(r||JSON.stringify)(t)}const defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,i=utils.isObject(e);i&&utils.isHTMLForm(e)&&(e=new FormData(e));if(utils.isFormData(e))return r&&r?JSON.stringify(formDataToJSON(e)):e;if(utils.isArrayBuffer(e)||utils.isBuffer(e)||utils.isStream(e)||utils.isFile(e)||utils.isBlob(e))return e;if(utils.isArrayBufferView(e))return e.buffer;if(utils.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(i){if(n.indexOf("application/x-www-form-urlencoded")>-1)return toURLEncodedForm(e,this.formSerializer).toString();if((o=utils.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return toFormData(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||r?(t.setContentType("application/json",!1),stringifySafely(e)):e}],transformResponse:[function(t){const n=this.transitional||defaults.transitional,r=n&&n.forcedJSONParsing,i="json"===this.responseType;if(t&&utils.isString(t)&&(r&&!this.responseType||i)){const r=!(n&&n.silentJSONParsing)&&i;try{return JSON.parse(t)}catch(e){if(r){if("SyntaxError"===e.name)throw AxiosError.from(e,AxiosError.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};utils.forEach(["delete","get","head"],(function(e){defaults.headers[e]={}})),utils.forEach(["post","put","patch"],(function(e){defaults.headers[e]=utils.merge(DEFAULT_CONTENT_TYPE)}));const defaults$1=defaults,ignoreDuplicateOf=utils.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),parseHeaders=e=>{const t={};let n,r,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),n=e.substring(0,i).trim().toLowerCase(),r=e.substring(i+1).trim(),!n||t[n]&&ignoreDuplicateOf[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t},$internals=Symbol("internals");function normalizeHeader(e){return e&&String(e).trim().toLowerCase()}function normalizeValue(e){return!1===e||null==e?e:utils.isArray(e)?e.map(normalizeValue):String(e)}function parseTokens(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}function isValidHeaderName(e){return/^[-_a-zA-Z]+$/.test(e.trim())}function matchHeaderValue(e,t,n,r,i){return utils.isFunction(r)?r.call(this,t,n):(i&&(t=n),utils.isString(t)?utils.isString(r)?-1!==t.indexOf(r):utils.isRegExp(r)?r.test(t):void 0:void 0)}function formatHeader(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}function buildAccessors(e,t){const n=utils.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,i){return this[r].call(this,t,e,n,i)},configurable:!0})}))}class AxiosHeaders{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function i(e,t,n){const i=normalizeHeader(t);if(!i)throw new Error("header name must be a non-empty string");const o=utils.findKey(r,i);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=normalizeValue(e))}const o=(e,t)=>utils.forEach(e,((e,n)=>i(e,n,t)));return utils.isPlainObject(e)||e instanceof this.constructor?o(e,t):utils.isString(e)&&(e=e.trim())&&!isValidHeaderName(e)?o(parseHeaders(e),t):null!=e&&i(t,e,n),this}get(e,t){if(e=normalizeHeader(e)){const n=utils.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return parseTokens(e);if(utils.isFunction(t))return t.call(this,e,n);if(utils.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=normalizeHeader(e)){const n=utils.findKey(this,e);return!(!n||void 0===this[n]||t&&!matchHeaderValue(this,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function i(e){if(e=normalizeHeader(e)){const i=utils.findKey(n,e);!i||t&&!matchHeaderValue(n,n[i],i,t)||(delete n[i],r=!0)}}return utils.isArray(e)?e.forEach(i):i(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const i=t[n];e&&!matchHeaderValue(this,this[i],i,e,!0)||(delete this[i],r=!0)}return r}normalize(e){const t=this,n={};return utils.forEach(this,((r,i)=>{const o=utils.findKey(n,i);if(o)return t[o]=normalizeValue(r),void delete t[i];const a=e?formatHeader(i):String(i).trim();a!==i&&delete t[i],t[a]=normalizeValue(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return utils.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&utils.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[$internals]=this[$internals]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=normalizeHeader(e);t[r]||(buildAccessors(n,e),t[r]=!0)}return utils.isArray(e)?e.forEach(r):r(e),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),utils.freezeMethods(AxiosHeaders.prototype),utils.freezeMethods(AxiosHeaders);const AxiosHeaders$1=AxiosHeaders;function transformData(e,t){const n=this||defaults$1,r=t||n,i=AxiosHeaders$1.from(r.headers);let o=r.data;return utils.forEach(e,(function(e){o=e.call(n,o,i.normalize(),t?t.status:void 0)})),i.normalize(),o}function isCancel(e){return!(!e||!e.__CANCEL__)}function CanceledError(e,t,n){AxiosError.call(this,null==e?"canceled":e,AxiosError.ERR_CANCELED,t,n),this.name="CanceledError"}function settle(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new AxiosError("Request failed with status code "+n.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}utils.inherits(CanceledError,AxiosError,{__CANCEL__:!0});const cookies=platform.isStandardBrowserEnv?{write:function(e,t,n,r,i,o){const a=[];a.push(e+"="+encodeURIComponent(t)),utils.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),utils.isString(r)&&a.push("path="+r),utils.isString(i)&&a.push("domain="+i),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function isAbsoluteURL(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function combineURLs(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function buildFullPath(e,t){return e&&!isAbsoluteURL(t)?combineURLs(e,t):t}const isURLSameOrigin=platform.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=utils.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function parseProtocol(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function speedometer(e,t){e=e||10;const n=new Array(e),r=new Array(e);let i,o=0,a=0;return t=void 0!==t?t:1e3,function(s){const c=Date.now(),l=r[a];i||(i=c),n[o]=s,r[o]=c;let u=a,d=0;for(;u!==o;)d+=n[u++],u%=e;if(o=(o+1)%e,o===a&&(a=(a+1)%e),c-i<t)return;const p=l&&c-l;return p?Math.round(1e3*d/p):void 0}}function progressEventReducer(e,t){let n=0;const r=speedometer(50,250);return i=>{const o=i.loaded,a=i.lengthComputable?i.total:void 0,s=o-n,c=r(s);n=o;const l={loaded:o,total:a,progress:a?o/a:void 0,bytes:s,rate:c||void 0,estimated:c&&a&&o<=a?(a-o)/c:void 0,event:i};l[t?"download":"upload"]=!0,e(l)}}const isXHRAdapterSupported="undefined"!=typeof XMLHttpRequest,xhrAdapter=isXHRAdapterSupported&&function(e){return new Promise((function(t,n){let r=e.data;const i=AxiosHeaders$1.from(e.headers).normalize(),o=e.responseType;let a;function s(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}utils.isFormData(r)&&(platform.isStandardBrowserEnv||platform.isStandardBrowserWebWorkerEnv)&&i.setContentType(!1);let c=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";i.set("Authorization","Basic "+btoa(t+":"+n))}const l=buildFullPath(e.baseURL,e.url);function u(){if(!c)return;const r=AxiosHeaders$1.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());settle((function(e){t(e),s()}),(function(e){n(e),s()}),{data:o&&"text"!==o&&"json"!==o?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}if(c.open(e.method.toUpperCase(),buildURL(l,e.params,e.paramsSerializer),!0),c.timeout=e.timeout,"onloadend"in c?c.onloadend=u:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(u)},c.onabort=function(){c&&(n(new AxiosError("Request aborted",AxiosError.ECONNABORTED,e,c)),c=null)},c.onerror=function(){n(new AxiosError("Network Error",AxiosError.ERR_NETWORK,e,c)),c=null},c.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||transitionalDefaults;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new AxiosError(t,r.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,e,c)),c=null},platform.isStandardBrowserEnv){const t=(e.withCredentials||isURLSameOrigin(l))&&e.xsrfCookieName&&cookies.read(e.xsrfCookieName);t&&i.set(e.xsrfHeaderName,t)}void 0===r&&i.setContentType(null),"setRequestHeader"in c&&utils.forEach(i.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),utils.isUndefined(e.withCredentials)||(c.withCredentials=!!e.withCredentials),o&&"json"!==o&&(c.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&c.addEventListener("progress",progressEventReducer(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",progressEventReducer(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{c&&(n(!t||t.type?new CanceledError(null,e,c):t),c.abort(),c=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const d=parseProtocol(l);d&&-1===platform.protocols.indexOf(d)?n(new AxiosError("Unsupported protocol "+d+":",AxiosError.ERR_BAD_REQUEST,e)):c.send(r||null)}))},knownAdapters={http:httpAdapter,xhr:xhrAdapter};utils.forEach(knownAdapters,((t,n)=>{if(t){try{Object.defineProperty(t,"name",{value:n})}catch(e){}Object.defineProperty(t,"adapterName",{value:n})}}));const adapters={getAdapter:e=>{e=utils.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let i=0;i<t&&(n=e[i],!(r=utils.isString(n)?knownAdapters[n.toLowerCase()]:n));i++);if(!r){if(!1===r)throw new AxiosError(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(utils.hasOwnProp(knownAdapters,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!utils.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:knownAdapters};function throwIfCancellationRequested(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new CanceledError(null,e)}function dispatchRequest(e){throwIfCancellationRequested(e),e.headers=AxiosHeaders$1.from(e.headers),e.data=transformData.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1);return adapters.getAdapter(e.adapter||defaults$1.adapter)(e).then((function(t){return throwIfCancellationRequested(e),t.data=transformData.call(e,e.transformResponse,t),t.headers=AxiosHeaders$1.from(t.headers),t}),(function(t){return isCancel(t)||(throwIfCancellationRequested(e),t&&t.response&&(t.response.data=transformData.call(e,e.transformResponse,t.response),t.response.headers=AxiosHeaders$1.from(t.response.headers))),Promise.reject(t)}))}const headersToObject=e=>e instanceof AxiosHeaders$1?e.toJSON():e;function mergeConfig(e,t){t=t||{};const n={};function r(e,t,n){return utils.isPlainObject(e)&&utils.isPlainObject(t)?utils.merge.call({caseless:n},e,t):utils.isPlainObject(t)?utils.merge({},t):utils.isArray(t)?t.slice():t}function i(e,t,n){return utils.isUndefined(t)?utils.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function o(e,t){if(!utils.isUndefined(t))return r(void 0,t)}function a(e,t){return utils.isUndefined(t)?utils.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function s(n,i,o){return o in t?r(n,i):o in e?r(void 0,n):void 0}const c={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s,headers:(e,t)=>i(headersToObject(e),headersToObject(t),!0)};return utils.forEach(Object.keys(e).concat(Object.keys(t)),(function(r){const o=c[r]||i,a=o(e[r],t[r],r);utils.isUndefined(a)&&o!==s||(n[r]=a)})),n}const VERSION="1.3.4",validators$1={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{validators$1[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const deprecatedWarnings={};function assertOptions(e,t,n){if("object"!=typeof e)throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let i=r.length;for(;i-- >0;){const o=r[i],a=t[o];if(a){const t=e[o],n=void 0===t||a(t,o,e);if(!0!==n)throw new AxiosError("option "+o+" must be "+n,AxiosError.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new AxiosError("Unknown option "+o,AxiosError.ERR_BAD_OPTION)}}validators$1.transitional=function(e,t,n){function r(e,t){return"[Axios v"+VERSION+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,i,o)=>{if(!1===e)throw new AxiosError(r(i," has been removed"+(t?" in "+t:"")),AxiosError.ERR_DEPRECATED);return t&&!deprecatedWarnings[i]&&(deprecatedWarnings[i]=!0,console.warn(r(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,i,o)}};const validator={assertOptions:assertOptions,validators:validators$1},validators=validator.validators;class Axios{constructor(e){this.defaults=e,this.interceptors={request:new InterceptorManager$1,response:new InterceptorManager$1}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=mergeConfig(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:i}=t;let o;void 0!==n&&validator.assertOptions(n,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),void 0!==r&&validator.assertOptions(r,{encode:validators.function,serialize:validators.function},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase(),o=i&&utils.merge(i.common,i[t.method]),o&&utils.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=AxiosHeaders$1.concat(o,i);const a=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!s){const e=[dispatchRequest.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);d<u;)l=l.then(e[d++],e[d++]);return l}u=a.length;let p=t;for(d=0;d<u;){const e=a[d++],t=a[d++];try{p=e(p)}catch(f){t.call(this,f);break}}try{l=dispatchRequest.call(this,p)}catch(f){return Promise.reject(f)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(e){return buildURL(buildFullPath((e=mergeConfig(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}utils.forEach(["delete","get","head","options"],(function(e){Axios.prototype[e]=function(t,n){return this.request(mergeConfig(n||{},{method:e,url:t,data:(n||{}).data}))}})),utils.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,i){return this.request(mergeConfig(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Axios.prototype[e]=t(),Axios.prototype[e+"Form"]=t(!0)}));const Axios$1=Axios;class CancelToken{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,i){n.reason||(n.reason=new CanceledError(e,r,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new CancelToken((function(t){e=t})),cancel:e}}}const CancelToken$1=CancelToken;function spread(e){return function(t){return e.apply(null,t)}}function isAxiosError(e){return utils.isObject(e)&&!0===e.isAxiosError}const HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach((([e,t])=>{HttpStatusCode[t]=e}));const HttpStatusCode$1=HttpStatusCode;function createInstance(e){const t=new Axios$1(e),n=bind(Axios$1.prototype.request,t);return utils.extend(n,Axios$1.prototype,t,{allOwnKeys:!0}),utils.extend(n,t,null,{allOwnKeys:!0}),n.create=function(t){return createInstance(mergeConfig(e,t))},n}const axios=createInstance(defaults$1);axios.Axios=Axios$1,axios.CanceledError=CanceledError,axios.CancelToken=CancelToken$1,axios.isCancel=isCancel,axios.VERSION=VERSION,axios.toFormData=toFormData,axios.AxiosError=AxiosError,axios.Cancel=axios.CanceledError,axios.all=function(e){return Promise.all(e)},axios.spread=spread,axios.isAxiosError=isAxiosError,axios.mergeConfig=mergeConfig,axios.AxiosHeaders=AxiosHeaders$1,axios.formToJSON=e=>formDataToJSON(utils.isHTMLForm(e)?new FormData(e):e),axios.HttpStatusCode=HttpStatusCode$1,axios.default=axios;const axios$1=axios,factory=M.customLogFactory(S.LOG_LEVEL_INFO,"PluginSystem"),pluginSystemLogger=factory.getLogger("plugin system"),log=(...e)=>{pluginSystemLogger.info(...e)},request=axios$1.create({withCredentials:!1,headers:{"Cache-Control":"no-cache",Pragma:"no-cache",Expires:"0"}}),sleep=async e=>new Promise((t=>{setTimeout((()=>t(null)),e)})),error=(...e)=>pluginSystemLogger.error(...e),reloadWindow=()=>window.location.reload(),genUUID=()=>([1e7].toString()+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(parseInt(e,10)^window.crypto.getRandomValues(new Uint32Array(1))[0]&15>>parseInt(e,10)/4).toString(16)));async function isExists(e){try{return null!==await FileClient.getInstanceApi().fileApi.getFile(e)}catch{return!1}}let Error$1=class{constructor(e){this.message=e}};class Warning{constructor(e){this.message=e}}const showInfoMessage=(e,t)=>new Notification({type:"info",message:e,timeout:t}).show(),showErrorMessage=(e,t)=>new Notification({type:"error",message:e,timeout:t}).show(),getLogger=e=>factory.getLogger(e),langs={zh_CN:zh_CN,en_US:en_US},_=e=>langs[window.siyuan.config.lang][e]||"not defined";var NAMED_TAG="named",NAME_TAG="name",UNMANAGED_TAG="unmanaged",OPTIONAL_TAG="optional",INJECT_TAG="inject",MULTI_INJECT_TAG="multi_inject",TAGGED="inversify:tagged",TAGGED_PROP="inversify:tagged_props",PARAM_TYPES="inversify:paramtypes",DESIGN_PARAM_TYPES="design:paramtypes",POST_CONSTRUCT="post_construct",PRE_DESTROY="pre_destroy";function getNonCustomTagKeys(){return[INJECT_TAG,MULTI_INJECT_TAG,NAME_TAG,UNMANAGED_TAG,NAMED_TAG,OPTIONAL_TAG]}var NON_CUSTOM_TAG_KEYS=getNonCustomTagKeys(),BindingScopeEnum={Request:"Request",Singleton:"Singleton",Transient:"Transient"},BindingTypeEnum={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},TargetTypeEnum={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"},idCounter=0;function id(){return idCounter++}var Binding=function(){function e(e,t){this.id=id(),this.activated=!1,this.serviceIdentifier=e,this.scope=t,this.type=BindingTypeEnum.Invalid,this.constraint=function(e){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.onDeactivation=null,this.dynamicValue=null}return e.prototype.clone=function(){var t=new e(this.serviceIdentifier,this.scope);return t.activated=t.scope===BindingScopeEnum.Singleton&&this.activated,t.implementationType=this.implementationType,t.dynamicValue=this.dynamicValue,t.scope=this.scope,t.type=this.type,t.factory=this.factory,t.provider=this.provider,t.constraint=this.constraint,t.onActivation=this.onActivation,t.onDeactivation=this.onDeactivation,t.cache=this.cache,t},e}(),DUPLICATED_INJECTABLE_DECORATOR="Cannot apply @injectable decorator multiple times.",DUPLICATED_METADATA="Metadata key was used more than once in a parameter:",NULL_ARGUMENT="NULL argument",KEY_NOT_FOUND="Key Not Found",AMBIGUOUS_MATCH="Ambiguous match found for serviceIdentifier:",CANNOT_UNBIND="Could not unbind serviceIdentifier:",NOT_REGISTERED="No matching bindings found for serviceIdentifier:",MISSING_INJECTABLE_ANNOTATION="Missing required @injectable annotation in:",MISSING_INJECT_ANNOTATION="Missing required @inject or @multiInject annotation in:",UNDEFINED_INJECT_ANNOTATION=function(e){return"@inject called with undefined this could mean that the class "+e+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation."},CIRCULAR_DEPENDENCY="Circular dependency found:",INVALID_BINDING_TYPE="Invalid binding type:",NO_MORE_SNAPSHOTS_AVAILABLE="No snapshot available to restore.",INVALID_MIDDLEWARE_RETURN="Invalid return type in middleware. Middleware must return!",INVALID_FUNCTION_BINDING="Value provided to function binding must be a function!",LAZY_IN_SYNC=function(e){return"You are attempting to construct '"+e+"' in a synchronous way\n but it has asynchronous dependencies."},INVALID_TO_SELF_VALUE="The toSelf function can only be applied when a constructor is used as service identifier",INVALID_DECORATOR_OPERATION="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",ARGUMENTS_LENGTH_MISMATCH=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return"The number of constructor arguments in the derived class "+e[0]+" must be >= than the number of constructor arguments of its base class."},CONTAINER_OPTIONS_MUST_BE_AN_OBJECT="Invalid Container constructor argument. Container options must be an object.",CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE="Invalid Container option. Default scope must be a string ('singleton' or 'transient').",CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE="Invalid Container option. Auto bind injectable must be a boolean",CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK="Invalid Container option. Skip base check must be a boolean",ASYNC_UNBIND_REQUIRED="Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)",POST_CONSTRUCT_ERROR=function(e,t){return"@postConstruct error in class "+e+": "+t},PRE_DESTROY_ERROR=function(e,t){return"@preDestroy error in class "+e+": "+t},ON_DEACTIVATION_ERROR=function(e,t){return"onDeactivation() error in class "+e+": "+t},CIRCULAR_DEPENDENCY_IN_FACTORY=function(e,t){return"It looks like there is a circular dependency in one of the '"+e+"' bindings. Please investigate bindings withservice identifier '"+t+"'."},STACK_OVERFLOW="Maximum call stack size exceeded",MetadataReader=function(){function e(){}return e.prototype.getConstructorMetadata=function(e){return{compilerGeneratedMetadata:Reflect.getMetadata(PARAM_TYPES,e),userGeneratedMetadata:Reflect.getMetadata(TAGGED,e)||{}}},e.prototype.getPropertiesMetadata=function(e){return Reflect.getMetadata(TAGGED_PROP,e)||[]},e}(),BindingCount={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1};function isStackOverflowExeption(e){return e instanceof RangeError||e.message===STACK_OVERFLOW}var tryAndThrowErrorIfStackOverflow=function(e,t){try{return e()}catch(n){throw isStackOverflowExeption(n)&&(n=t()),n}};function getServiceIdentifierAsString(e){return"function"==typeof e?e.name:"symbol"==typeof e?e.toString():e}function listRegisteredBindingsForServiceIdentifier(e,t,n){var r="",i=n(e,t);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(e){var t="Object";null!==e.implementationType&&(t=getFunctionName(e.implementationType)),r=r+"\n "+t,e.constraint.metaData&&(r=r+" - "+e.constraint.metaData)}))),r}function alreadyDependencyChain(e,t){return null!==e.parentRequest&&(e.parentRequest.serviceIdentifier===t||alreadyDependencyChain(e.parentRequest,t))}function dependencyChainToString(e){var t=function e(t,n){void 0===n&&(n=[]);var r=getServiceIdentifierAsString(t.serviceIdentifier);return n.push(r),null!==t.parentRequest?e(t.parentRequest,n):n}(e);return t.reverse().join(" --\x3e ")}function circularDependencyToException(e){e.childRequests.forEach((function(e){if(alreadyDependencyChain(e,e.serviceIdentifier)){var t=dependencyChainToString(e);throw new Error(CIRCULAR_DEPENDENCY+" "+t)}circularDependencyToException(e)}))}function listMetadataForTarget(e,t){if(t.isTagged()||t.isNamed()){var n="",r=t.getNamedTag(),i=t.getCustomTags();return null!==r&&(n+=r.toString()+"\n"),null!==i&&i.forEach((function(e){n+=e.toString()+"\n"}))," "+e+"\n "+e+" - "+n}return" "+e}function getFunctionName(e){if(e.name)return e.name;var t=e.toString(),n=t.match(/^function\s*([^\s(]+)/);return n?n[1]:"Anonymous function: "+t}function getSymbolDescription(e){return e.toString().slice(7,-1)}var Context=function(){function e(e){this.id=id(),this.container=e}return e.prototype.addPlan=function(e){this.plan=e},e.prototype.setCurrentRequest=function(e){this.currentRequest=e},e}(),Metadata=function(){function e(e,t){this.key=e,this.value=t}return e.prototype.toString=function(){return this.key===NAMED_TAG?"named: "+String(this.value).toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+String(this.value)+" }"},e}(),Plan=function(e,t){this.parentContext=e,this.rootRequest=t},LazyServiceIdentifer=function(){function e(e){this._cb=e}return e.prototype.unwrap=function(){return this._cb()},e}(),QueryableString=function(){function e(e){this.str=e}return e.prototype.startsWith=function(e){return 0===this.str.indexOf(e)},e.prototype.endsWith=function(e){var t,n=e.split("").reverse().join("");return t=this.str.split("").reverse().join(""),this.startsWith.call({str:t},n)},e.prototype.contains=function(e){return-1!==this.str.indexOf(e)},e.prototype.equals=function(e){return this.str===e},e.prototype.value=function(){return this.str},e}(),Target=function(){function e(e,t,n,r){this.id=id(),this.type=e,this.serviceIdentifier=n;var i="symbol"==typeof t?getSymbolDescription(t):t;this.name=new QueryableString(i||""),this.identifier=t,this.metadata=new Array;var o=null;"string"==typeof r?o=new Metadata(NAMED_TAG,r):r instanceof Metadata&&(o=r),null!==o&&this.metadata.push(o)}return e.prototype.hasTag=function(e){for(var t=0,n=this.metadata;t<n.length;t++){if(n[t].key===e)return!0}return!1},e.prototype.isArray=function(){return this.hasTag(MULTI_INJECT_TAG)},e.prototype.matchesArray=function(e){return this.matchesTag(MULTI_INJECT_TAG)(e)},e.prototype.isNamed=function(){return this.hasTag(NAMED_TAG)},e.prototype.isTagged=function(){return this.metadata.some((function(e){return NON_CUSTOM_TAG_KEYS.every((function(t){return e.key!==t}))}))},e.prototype.isOptional=function(){return this.matchesTag(OPTIONAL_TAG)(!0)},e.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(e){return e.key===NAMED_TAG}))[0]:null},e.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(e){return NON_CUSTOM_TAG_KEYS.every((function(t){return e.key!==t}))})):null},e.prototype.matchesNamedTag=function(e){return this.matchesTag(NAMED_TAG)(e)},e.prototype.matchesTag=function(e){var t=this;return function(n){for(var r=0,i=t.metadata;r<i.length;r++){var o=i[r];if(o.key===e&&o.value===n)return!0}return!1}},e}(),__spreadArray$2=globalThis&&globalThis.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};function getDependencies(e,t){return getTargets(e,getFunctionName(t),t,!1)}function getTargets(e,t,n,r){var i=e.getConstructorMetadata(n),o=i.compilerGeneratedMetadata;if(void 0===o)throw new Error(MISSING_INJECTABLE_ANNOTATION+" "+t+".");var a=i.userGeneratedMetadata,s=Object.keys(a),c=0===n.length&&s.length>0,l=s.length>n.length,u=getConstructorArgsAsTargets(r,t,o,a,c||l?s.length:n.length),d=getClassPropsAsTargets(e,n,t);return __spreadArray$2(__spreadArray$2([],u,!0),d,!0)}function getConstructorArgsAsTarget(e,t,n,r,i){var o=i[e.toString()]||[],a=formatTargetMetadata(o),s=!0!==a.unmanaged,c=r[e],l=a.inject||a.multiInject;if((c=l||c)instanceof LazyServiceIdentifer&&(c=c.unwrap()),s){if(!t&&(c===Object||c===Function||void 0===c))throw new Error(MISSING_INJECT_ANNOTATION+" argument "+e+" in class "+n+".");var u=new Target(TargetTypeEnum.ConstructorArgument,a.targetName,c);return u.metadata=o,u}return null}function getConstructorArgsAsTargets(e,t,n,r,i){for(var o=[],a=0;a<i;a++){var s=getConstructorArgsAsTarget(a,e,t,n,r);null!==s&&o.push(s)}return o}function _getServiceIdentifierForProperty(e,t,n,r){var i=e||t;if(void 0===i){var o=MISSING_INJECTABLE_ANNOTATION+" for property "+String(n)+" in class "+r+".";throw new Error(o)}return i}function getClassPropsAsTargets(e,t,n){for(var r=e.getPropertiesMetadata(t),i=[],o=Object.getOwnPropertySymbols(r),a=0,s=Object.keys(r).concat(o);a<s.length;a++){var c=s[a],l=r[c],u=formatTargetMetadata(l),d=u.targetName||c,p=_getServiceIdentifierForProperty(u.inject,u.multiInject,c,n),f=new Target(TargetTypeEnum.ClassProperty,d,p);f.metadata=l,i.push(f)}var h=Object.getPrototypeOf(t.prototype).constructor;if(h!==Object){var g=getClassPropsAsTargets(e,h,n);i=__spreadArray$2(__spreadArray$2([],i,!0),g,!0)}return i}function getBaseClassDependencyCount(e,t){var n=Object.getPrototypeOf(t.prototype).constructor;if(n!==Object){var r=getTargets(e,getFunctionName(n),n,!0),i=r.map((function(e){return e.metadata.filter((function(e){return e.key===UNMANAGED_TAG}))})),o=[].concat.apply([],i).length,a=r.length-o;return a>0?a:getBaseClassDependencyCount(e,n)}return 0}function formatTargetMetadata(e){var t={};return e.forEach((function(e){t[e.key.toString()]=e.value})),{inject:t[INJECT_TAG],multiInject:t[MULTI_INJECT_TAG],targetName:t[NAME_TAG],unmanaged:t[UNMANAGED_TAG]}}var Request=function(){function e(e,t,n,r,i){this.id=id(),this.serviceIdentifier=e,this.parentContext=t,this.parentRequest=n,this.target=i,this.childRequests=[],this.bindings=Array.isArray(r)?r:[r],this.requestScope=null===n?new Map:null}return e.prototype.addChildRequest=function(t,n,r){var i=new e(t,this.parentContext,this,n,r);return this.childRequests.push(i),i},e}();function getBindingDictionary(e){return e._bindingDictionary}function _createTarget(e,t,n,r,i,o){var a=new Metadata(e?MULTI_INJECT_TAG:INJECT_TAG,n),s=new Target(t,r,n,a);if(void 0!==i){var c=new Metadata(i,o);s.metadata.push(c)}return s}function _getActiveBindings(e,t,n,r,i){var o=getBindings(n.container,i.serviceIdentifier),a=[];return o.length===BindingCount.NoBindingsAvailable&&n.container.options.autoBindInjectable&&"function"==typeof i.serviceIdentifier&&e.getConstructorMetadata(i.serviceIdentifier).compilerGeneratedMetadata&&(n.container.bind(i.serviceIdentifier).toSelf(),o=getBindings(n.container,i.serviceIdentifier)),a=t?o:o.filter((function(e){var t=new Request(e.serviceIdentifier,n,r,e,i);return e.constraint(t)})),_validateActiveBindingCount(i.serviceIdentifier,a,i,n.container),a}function _validateActiveBindingCount(e,t,n,r){switch(t.length){case BindingCount.NoBindingsAvailable:if(n.isOptional())return t;var i=getServiceIdentifierAsString(e),o=NOT_REGISTERED;throw o+=listMetadataForTarget(i,n),o+=listRegisteredBindingsForServiceIdentifier(r,i,getBindings),new Error(o);case BindingCount.OnlyOneBindingAvailable:return t;case BindingCount.MultipleBindingsAvailable:default:if(n.isArray())return t;i=getServiceIdentifierAsString(e),o=AMBIGUOUS_MATCH+" "+i;throw o+=listRegisteredBindingsForServiceIdentifier(r,i,getBindings),new Error(o)}}function _createSubRequests(e,t,n,r,i,o){var a,s;if(null===i){a=_getActiveBindings(e,t,r,null,o),s=new Request(n,r,null,a,o);var c=new Plan(r,s);r.addPlan(c)}else a=_getActiveBindings(e,t,r,i,o),s=i.addChildRequest(o.serviceIdentifier,a,o);a.forEach((function(t){var n=null;if(o.isArray())n=s.addChildRequest(t.serviceIdentifier,t,o);else{if(t.cache)return;n=s}if(t.type===BindingTypeEnum.Instance&&null!==t.implementationType){var i=getDependencies(e,t.implementationType);if(!r.container.options.skipBaseClassChecks){var a=getBaseClassDependencyCount(e,t.implementationType);if(i.length<a){var c=ARGUMENTS_LENGTH_MISMATCH(getFunctionName(t.implementationType));throw new Error(c)}}i.forEach((function(t){_createSubRequests(e,!1,t.serviceIdentifier,r,n,t)}))}}))}function getBindings(e,t){var n=[],r=getBindingDictionary(e);return r.hasKey(t)?n=r.get(t):null!==e.parent&&(n=getBindings(e.parent,t)),n}function plan(e,t,n,r,i,o,a,s){void 0===s&&(s=!1);var c=new Context(t),l=_createTarget(n,r,i,"",o,a);try{return _createSubRequests(e,s,i,c,null,l),c}catch(u){throw isStackOverflowExeption(u)&&circularDependencyToException(c.plan.rootRequest),u}}function createMockRequest(e,t,n,r){var i=new Target(TargetTypeEnum.Variable,"",t,new Metadata(n,r)),o=new Context(e);return new Request(t,o,null,[],i)}function isPromise(e){return("object"==typeof e&&null!==e||"function"==typeof e)&&"function"==typeof e.then}function isPromiseOrContainsPromise(e){return!!isPromise(e)||Array.isArray(e)&&e.some(isPromise)}var __awaiter$3=globalThis&&globalThis.__awaiter||function(t,n,r,i){return new(r||(r=Promise))((function(o,a){function s(t){try{l(i.next(t))}catch(e){a(e)}}function c(t){try{l(i.throw(t))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}l((i=i.apply(t,n||[])).next())}))},__generator$3=globalThis&&globalThis.__generator||function(t,n){var r,i,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=n.call(t,s)}catch(e){a=[6,e],i=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},tryGetFromScope=function(e,t){return t.scope===BindingScopeEnum.Singleton&&t.activated?t.cache:t.scope===BindingScopeEnum.Request&&e.has(t.id)?e.get(t.id):null},saveToScope=function(e,t,n){t.scope===BindingScopeEnum.Singleton&&_saveToSingletonScope(t,n),t.scope===BindingScopeEnum.Request&&_saveToRequestScope(e,t,n)},_saveToRequestScope=function(e,t,n){e.has(t.id)||e.set(t.id,n)},_saveToSingletonScope=function(e,t){e.cache=t,e.activated=!0,isPromise(t)&&_saveAsyncResultToSingletonScope(e,t)},_saveAsyncResultToSingletonScope=function(e,t){return __awaiter$3(void 0,void 0,void 0,(function(){var n,r;return __generator$3(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,t];case 1:return n=i.sent(),e.cache=n,[3,3];case 2:throw r=i.sent(),e.cache=null,e.activated=!1,r;case 3:return[2]}}))}))},FactoryType,FactoryType2;FactoryType2=FactoryType||(FactoryType={}),FactoryType2.DynamicValue="toDynamicValue",FactoryType2.Factory="toFactory",FactoryType2.Provider="toProvider";var ensureFullyBound=function(e){var t=null;switch(e.type){case BindingTypeEnum.ConstantValue:case BindingTypeEnum.Function:t=e.cache;break;case BindingTypeEnum.Constructor:case BindingTypeEnum.Instance:t=e.implementationType;break;case BindingTypeEnum.DynamicValue:t=e.dynamicValue;break;case BindingTypeEnum.Provider:t=e.provider;break;case BindingTypeEnum.Factory:t=e.factory}if(null===t){var n=getServiceIdentifierAsString(e.serviceIdentifier);throw new Error(INVALID_BINDING_TYPE+" "+n)}},getFactoryDetails=function(e){switch(e.type){case BindingTypeEnum.Factory:return{factory:e.factory,factoryType:FactoryType.Factory};case BindingTypeEnum.Provider:return{factory:e.provider,factoryType:FactoryType.Provider};case BindingTypeEnum.DynamicValue:return{factory:e.dynamicValue,factoryType:FactoryType.DynamicValue};default:throw new Error("Unexpected factory type "+e.type)}},__assign$1=globalThis&&globalThis.__assign||function(){return __assign$1=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},__assign$1.apply(this,arguments)},__awaiter$2=globalThis&&globalThis.__awaiter||function(t,n,r,i){return new(r||(r=Promise))((function(o,a){function s(t){try{l(i.next(t))}catch(e){a(e)}}function c(t){try{l(i.throw(t))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}l((i=i.apply(t,n||[])).next())}))},__generator$2=globalThis&&globalThis.__generator||function(t,n){var r,i,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=n.call(t,s)}catch(e){a=[6,e],i=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},__spreadArray$1=globalThis&&globalThis.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};function _resolveRequests(e,t){return e.reduce((function(e,n){var r=t(n);return n.target.type===TargetTypeEnum.ConstructorArgument?e.constructorInjections.push(r):(e.propertyRequests.push(n),e.propertyInjections.push(r)),e.isAsync||(e.isAsync=isPromiseOrContainsPromise(r)),e}),{constructorInjections:[],propertyInjections:[],propertyRequests:[],isAsync:!1})}function _createInstance(e,t,n){var r;if(t.length>0){var i=_resolveRequests(t,n),o=__assign$1(__assign$1({},i),{constr:e});r=i.isAsync?createInstanceWithInjectionsAsync(o):createInstanceWithInjections(o)}else r=new e;return r}function createInstanceWithInjections(e){var t,n=new((t=e.constr).bind.apply(t,__spreadArray$1([void 0],e.constructorInjections,!1)));return e.propertyRequests.forEach((function(t,r){var i=t.target.identifier,o=e.propertyInjections[r];n[i]=o})),n}function createInstanceWithInjectionsAsync(e){return __awaiter$2(this,void 0,void 0,(function(){var t,n;return __generator$2(this,(function(r){switch(r.label){case 0:return[4,possiblyWaitInjections(e.constructorInjections)];case 1:return t=r.sent(),[4,possiblyWaitInjections(e.propertyInjections)];case 2:return n=r.sent(),[2,createInstanceWithInjections(__assign$1(__assign$1({},e),{constructorInjections:t,propertyInjections:n}))]}}))}))}function possiblyWaitInjections(e){return __awaiter$2(this,void 0,void 0,(function(){var t,n,r,i;return __generator$2(this,(function(o){for(t=[],n=0,r=e;n<r.length;n++)i=r[n],Array.isArray(i)?t.push(Promise.all(i)):t.push(i);return[2,Promise.all(t)]}))}))}function _getInstanceAfterPostConstruct(e,t){var n=_postConstruct(e,t);return isPromise(n)?n.then((function(){return t})):t}function _postConstruct(t,n){var r,i;if(Reflect.hasMetadata(POST_CONSTRUCT,t)){var o=Reflect.getMetadata(POST_CONSTRUCT,t);try{return null===(i=(r=n)[o.value])||void 0===i?void 0:i.call(r)}catch(e){throw new Error(POST_CONSTRUCT_ERROR(t.name,e.message))}}}function _validateInstanceResolution(e,t){e.scope!==BindingScopeEnum.Singleton&&_throwIfHandlingDeactivation(e,t)}function _throwIfHandlingDeactivation(e,t){var n="Class cannot be instantiated in "+(e.scope===BindingScopeEnum.Request?"request":"transient")+" scope.";if("function"==typeof e.onDeactivation)throw new Error(ON_DEACTIVATION_ERROR(t.name,n));if(Reflect.hasMetadata(PRE_DESTROY,t))throw new Error(PRE_DESTROY_ERROR(t.name,n))}function resolveInstance(e,t,n,r){_validateInstanceResolution(e,t);var i=_createInstance(t,n,r);return isPromise(i)?i.then((function(e){return _getInstanceAfterPostConstruct(t,e)})):_getInstanceAfterPostConstruct(t,i)}var __awaiter$1=globalThis&&globalThis.__awaiter||function(t,n,r,i){return new(r||(r=Promise))((function(o,a){function s(t){try{l(i.next(t))}catch(e){a(e)}}function c(t){try{l(i.throw(t))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}l((i=i.apply(t,n||[])).next())}))},__generator$1=globalThis&&globalThis.__generator||function(t,n){var r,i,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=n.call(t,s)}catch(e){a=[6,e],i=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},_resolveRequest=function(e){return function(t){t.parentContext.setCurrentRequest(t);var n=t.bindings,r=t.childRequests,i=t.target&&t.target.isArray(),o=!(t.parentRequest&&t.parentRequest.target&&t.target&&t.parentRequest.target.matchesArray(t.target.serviceIdentifier));if(i&&o)return r.map((function(t){return _resolveRequest(e)(t)}));if(!t.target.isOptional()||0!==n.length){var a=n[0];return _resolveBinding(e,t,a)}}},_resolveFactoryFromBinding=function(e,t){var n=getFactoryDetails(e);return tryAndThrowErrorIfStackOverflow((function(){return n.factory.bind(e)(t)}),(function(){return new Error(CIRCULAR_DEPENDENCY_IN_FACTORY(n.factoryType,t.currentRequest.serviceIdentifier.toString()))}))},_getResolvedFromBinding=function(e,t,n){var r,i=t.childRequests;switch(ensureFullyBound(n),n.type){case BindingTypeEnum.ConstantValue:case BindingTypeEnum.Function:r=n.cache;break;case BindingTypeEnum.Constructor:r=n.implementationType;break;case BindingTypeEnum.Instance:r=resolveInstance(n,n.implementationType,i,_resolveRequest(e));break;default:r=_resolveFactoryFromBinding(n,t.parentContext)}return r},_resolveInScope=function(e,t,n){var r=tryGetFromScope(e,t);return null!==r||(r=n(),saveToScope(e,t,r)),r},_resolveBinding=function(e,t,n){return _resolveInScope(e,n,(function(){var r=_getResolvedFromBinding(e,t,n);return r=isPromise(r)?r.then((function(e){return _onActivation(t,n,e)})):_onActivation(t,n,r)}))};function _onActivation(e,t,n){var r,i=_bindingActivation(e.parentContext,t,n),o=_getContainersIterator(e.parentContext.container),a=o.next();do{r=a.value;var s=e.parentContext,c=e.serviceIdentifier,l=_getContainerActivationsForService(r,c);i=isPromise(i)?_activateContainerAsync(l,s,i):_activateContainer(l,s,i),a=o.next()}while(!0!==a.done&&!getBindingDictionary(r).hasKey(e.serviceIdentifier));return i}var _bindingActivation=function(e,t,n){return"function"==typeof t.onActivation?t.onActivation(e,n):n},_activateContainer=function(e,t,n){for(var r=e.next();!r.done;){if(isPromise(n=r.value(t,n)))return _activateContainerAsync(e,t,n);r=e.next()}return n},_activateContainerAsync=function(e,t,n){return __awaiter$1(void 0,void 0,void 0,(function(){var r,i;return __generator$1(this,(function(o){switch(o.label){case 0:return[4,n];case 1:r=o.sent(),i=e.next(),o.label=2;case 2:return i.done?[3,4]:[4,i.value(t,r)];case 3:return r=o.sent(),i=e.next(),[3,2];case 4:return[2,r]}}))}))},_getContainerActivationsForService=function(e,t){var n=e._activations;return n.hasKey(t)?n.get(t).values():[].values()},_getContainersIterator=function(e){for(var t=[e],n=e.parent;null!==n;)t.push(n),n=n.parent;return{next:function(){var e=t.pop();return void 0!==e?{done:!1,value:e}:{done:!0,value:void 0}}}};function resolve(e){return _resolveRequest(e.plan.rootRequest.requestScope)(e.plan.rootRequest)}var traverseAncerstors=function(e,t){var n=e.parentRequest;return null!==n&&(!!t(n)||traverseAncerstors(n,t))},taggedConstraint=function(e){return function(t){var n=function(n){return null!==n&&null!==n.target&&n.target.matchesTag(e)(t)};return n.metaData=new Metadata(e,t),n}},namedConstraint=taggedConstraint(NAMED_TAG),typeConstraint=function(e){return function(t){var n=null;if(null!==t){if(n=t.bindings[0],"string"==typeof e)return n.serviceIdentifier===e;var r=t.bindings[0].implementationType;return e===r}return!1}},BindingWhenSyntax=function(){function e(e){this._binding=e}return e.prototype.when=function(e){return this._binding.constraint=e,new BindingOnSyntax(this._binding)},e.prototype.whenTargetNamed=function(e){return this._binding.constraint=namedConstraint(e),new BindingOnSyntax(this._binding)},e.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(e){return null!==e&&(null!==e.target&&!e.target.isNamed()&&!e.target.isTagged())},new BindingOnSyntax(this._binding)},e.prototype.whenTargetTagged=function(e,t){return this._binding.constraint=taggedConstraint(e)(t),new BindingOnSyntax(this._binding)},e.prototype.whenInjectedInto=function(e){return this._binding.constraint=function(t){return null!==t&&typeConstraint(e)(t.parentRequest)},new BindingOnSyntax(this._binding)},e.prototype.whenParentNamed=function(e){return this._binding.constraint=function(t){return null!==t&&namedConstraint(e)(t.parentRequest)},new BindingOnSyntax(this._binding)},e.prototype.whenParentTagged=function(e,t){return this._binding.constraint=function(n){return null!==n&&taggedConstraint(e)(t)(n.parentRequest)},new BindingOnSyntax(this._binding)},e.prototype.whenAnyAncestorIs=function(e){return this._binding.constraint=function(t){return null!==t&&traverseAncerstors(t,typeConstraint(e))},new BindingOnSyntax(this._binding)},e.prototype.whenNoAncestorIs=function(e){return this._binding.constraint=function(t){return null!==t&&!traverseAncerstors(t,typeConstraint(e))},new BindingOnSyntax(this._binding)},e.prototype.whenAnyAncestorNamed=function(e){return this._binding.constraint=function(t){return null!==t&&traverseAncerstors(t,namedConstraint(e))},new BindingOnSyntax(this._binding)},e.prototype.whenNoAncestorNamed=function(e){return this._binding.constraint=function(t){return null!==t&&!traverseAncerstors(t,namedConstraint(e))},new BindingOnSyntax(this._binding)},e.prototype.whenAnyAncestorTagged=function(e,t){return this._binding.constraint=function(n){return null!==n&&traverseAncerstors(n,taggedConstraint(e)(t))},new BindingOnSyntax(this._binding)},e.prototype.whenNoAncestorTagged=function(e,t){return this._binding.constraint=function(n){return null!==n&&!traverseAncerstors(n,taggedConstraint(e)(t))},new BindingOnSyntax(this._binding)},e.prototype.whenAnyAncestorMatches=function(e){return this._binding.constraint=function(t){return null!==t&&traverseAncerstors(t,e)},new BindingOnSyntax(this._binding)},e.prototype.whenNoAncestorMatches=function(e){return this._binding.constraint=function(t){return null!==t&&!traverseAncerstors(t,e)},new BindingOnSyntax(this._binding)},e}(),BindingOnSyntax=function(){function e(e){this._binding=e}return e.prototype.onActivation=function(e){return this._binding.onActivation=e,new BindingWhenSyntax(this._binding)},e.prototype.onDeactivation=function(e){return this._binding.onDeactivation=e,new BindingWhenSyntax(this._binding)},e}(),BindingWhenOnSyntax=function(){function e(e){this._binding=e,this._bindingWhenSyntax=new BindingWhenSyntax(this._binding),this._bindingOnSyntax=new BindingOnSyntax(this._binding)}return e.prototype.when=function(e){return this._bindingWhenSyntax.when(e)},e.prototype.whenTargetNamed=function(e){return this._bindingWhenSyntax.whenTargetNamed(e)},e.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},e.prototype.whenTargetTagged=function(e,t){return this._bindingWhenSyntax.whenTargetTagged(e,t)},e.prototype.whenInjectedInto=function(e){return this._bindingWhenSyntax.whenInjectedInto(e)},e.prototype.whenParentNamed=function(e){return this._bindingWhenSyntax.whenParentNamed(e)},e.prototype.whenParentTagged=function(e,t){return this._bindingWhenSyntax.whenParentTagged(e,t)},e.prototype.whenAnyAncestorIs=function(e){return this._bindingWhenSyntax.whenAnyAncestorIs(e)},e.prototype.whenNoAncestorIs=function(e){return this._bindingWhenSyntax.whenNoAncestorIs(e)},e.prototype.whenAnyAncestorNamed=function(e){return this._bindingWhenSyntax.whenAnyAncestorNamed(e)},e.prototype.whenAnyAncestorTagged=function(e,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(e,t)},e.prototype.whenNoAncestorNamed=function(e){return this._bindingWhenSyntax.whenNoAncestorNamed(e)},e.prototype.whenNoAncestorTagged=function(e,t){return this._bindingWhenSyntax.whenNoAncestorTagged(e,t)},e.prototype.whenAnyAncestorMatches=function(e){return this._bindingWhenSyntax.whenAnyAncestorMatches(e)},e.prototype.whenNoAncestorMatches=function(e){return this._bindingWhenSyntax.whenNoAncestorMatches(e)},e.prototype.onActivation=function(e){return this._bindingOnSyntax.onActivation(e)},e.prototype.onDeactivation=function(e){return this._bindingOnSyntax.onDeactivation(e)},e}(),BindingInSyntax=function(){function e(e){this._binding=e}return e.prototype.inRequestScope=function(){return this._binding.scope=BindingScopeEnum.Request,new BindingWhenOnSyntax(this._binding)},e.prototype.inSingletonScope=function(){return this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.inTransientScope=function(){return this._binding.scope=BindingScopeEnum.Transient,new BindingWhenOnSyntax(this._binding)},e}(),BindingInWhenOnSyntax=function(){function e(e){this._binding=e,this._bindingWhenSyntax=new BindingWhenSyntax(this._binding),this._bindingOnSyntax=new BindingOnSyntax(this._binding),this._bindingInSyntax=new BindingInSyntax(e)}return e.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},e.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},e.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},e.prototype.when=function(e){return this._bindingWhenSyntax.when(e)},e.prototype.whenTargetNamed=function(e){return this._bindingWhenSyntax.whenTargetNamed(e)},e.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},e.prototype.whenTargetTagged=function(e,t){return this._bindingWhenSyntax.whenTargetTagged(e,t)},e.prototype.whenInjectedInto=function(e){return this._bindingWhenSyntax.whenInjectedInto(e)},e.prototype.whenParentNamed=function(e){return this._bindingWhenSyntax.whenParentNamed(e)},e.prototype.whenParentTagged=function(e,t){return this._bindingWhenSyntax.whenParentTagged(e,t)},e.prototype.whenAnyAncestorIs=function(e){return this._bindingWhenSyntax.whenAnyAncestorIs(e)},e.prototype.whenNoAncestorIs=function(e){return this._bindingWhenSyntax.whenNoAncestorIs(e)},e.prototype.whenAnyAncestorNamed=function(e){return this._bindingWhenSyntax.whenAnyAncestorNamed(e)},e.prototype.whenAnyAncestorTagged=function(e,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(e,t)},e.prototype.whenNoAncestorNamed=function(e){return this._bindingWhenSyntax.whenNoAncestorNamed(e)},e.prototype.whenNoAncestorTagged=function(e,t){return this._bindingWhenSyntax.whenNoAncestorTagged(e,t)},e.prototype.whenAnyAncestorMatches=function(e){return this._bindingWhenSyntax.whenAnyAncestorMatches(e)},e.prototype.whenNoAncestorMatches=function(e){return this._bindingWhenSyntax.whenNoAncestorMatches(e)},e.prototype.onActivation=function(e){return this._bindingOnSyntax.onActivation(e)},e.prototype.onDeactivation=function(e){return this._bindingOnSyntax.onDeactivation(e)},e}(),BindingToSyntax=function(){function e(e){this._binding=e}return e.prototype.to=function(e){return this._binding.type=BindingTypeEnum.Instance,this._binding.implementationType=e,new BindingInWhenOnSyntax(this._binding)},e.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error(""+INVALID_TO_SELF_VALUE);var e=this._binding.serviceIdentifier;return this.to(e)},e.prototype.toConstantValue=function(e){return this._binding.type=BindingTypeEnum.ConstantValue,this._binding.cache=e,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.toDynamicValue=function(e){return this._binding.type=BindingTypeEnum.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=e,this._binding.implementationType=null,new BindingInWhenOnSyntax(this._binding)},e.prototype.toConstructor=function(e){return this._binding.type=BindingTypeEnum.Constructor,this._binding.implementationType=e,this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.toFactory=function(e){return this._binding.type=BindingTypeEnum.Factory,this._binding.factory=e,this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.toFunction=function(e){if("function"!=typeof e)throw new Error(INVALID_FUNCTION_BINDING);var t=this.toConstantValue(e);return this._binding.type=BindingTypeEnum.Function,this._binding.scope=BindingScopeEnum.Singleton,t},e.prototype.toAutoFactory=function(e){return this._binding.type=BindingTypeEnum.Factory,this._binding.factory=function(t){return function(){return t.container.get(e)}},this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.toAutoNamedFactory=function(e){return this._binding.type=BindingTypeEnum.Factory,this._binding.factory=function(t){return function(n){return t.container.getNamed(e,n)}},new BindingWhenOnSyntax(this._binding)},e.prototype.toProvider=function(e){return this._binding.type=BindingTypeEnum.Provider,this._binding.provider=e,this._binding.scope=BindingScopeEnum.Singleton,new BindingWhenOnSyntax(this._binding)},e.prototype.toService=function(e){this.toDynamicValue((function(t){return t.container.get(e)}))},e}(),ContainerSnapshot=function(){function e(){}return e.of=function(t,n,r,i,o){var a=new e;return a.bindings=t,a.middleware=n,a.deactivations=i,a.activations=r,a.moduleActivationStore=o,a},e}();function isClonable(e){return"object"==typeof e&&null!==e&&"clone"in e&&"function"==typeof e.clone}var Lookup=function(){function e(){this._map=new Map}return e.prototype.getMap=function(){return this._map},e.prototype.add=function(e,t){if(null==e)throw new Error(NULL_ARGUMENT);if(null==t)throw new Error(NULL_ARGUMENT);var n=this._map.get(e);void 0!==n?n.push(t):this._map.set(e,[t])},e.prototype.get=function(e){if(null==e)throw new Error(NULL_ARGUMENT);var t=this._map.get(e);if(void 0!==t)return t;throw new Error(KEY_NOT_FOUND)},e.prototype.remove=function(e){if(null==e)throw new Error(NULL_ARGUMENT);if(!this._map.delete(e))throw new Error(KEY_NOT_FOUND)},e.prototype.removeIntersection=function(e){var t=this;this.traverse((function(n,r){var i=e.hasKey(n)?e.get(n):void 0;if(void 0!==i){var o=r.filter((function(e){return!i.some((function(t){return e===t}))}));t._setValue(n,o)}}))},e.prototype.removeByCondition=function(e){var t=this,n=[];return this._map.forEach((function(r,i){for(var o=[],a=0,s=r;a<s.length;a++){var c=s[a];e(c)?n.push(c):o.push(c)}t._setValue(i,o)})),n},e.prototype.hasKey=function(e){if(null==e)throw new Error(NULL_ARGUMENT);return this._map.has(e)},e.prototype.clone=function(){var t=new e;return this._map.forEach((function(e,n){e.forEach((function(e){return t.add(n,isClonable(e)?e.clone():e)}))})),t},e.prototype.traverse=function(e){this._map.forEach((function(t,n){e(n,t)}))},e.prototype._setValue=function(e,t){t.length>0?this._map.set(e,t):this._map.delete(e)},e}(),ModuleActivationStore=function(){function e(){this._map=new Map}return e.prototype.remove=function(e){if(this._map.has(e)){var t=this._map.get(e);return this._map.delete(e),t}return this._getEmptyHandlersStore()},e.prototype.addDeactivation=function(e,t,n){this._getModuleActivationHandlers(e).onDeactivations.add(t,n)},e.prototype.addActivation=function(e,t,n){this._getModuleActivationHandlers(e).onActivations.add(t,n)},e.prototype.clone=function(){var t=new e;return this._map.forEach((function(e,n){t._map.set(n,{onActivations:e.onActivations.clone(),onDeactivations:e.onDeactivations.clone()})})),t},e.prototype._getModuleActivationHandlers=function(e){var t=this._map.get(e);return void 0===t&&(t=this._getEmptyHandlersStore(),this._map.set(e,t)),t},e.prototype._getEmptyHandlersStore=function(){return{onActivations:new Lookup,onDeactivations:new Lookup}},e}(),__assign=globalThis&&globalThis.__assign||function(){return __assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},__assign.apply(this,arguments)},__awaiter=globalThis&&globalThis.__awaiter||function(t,n,r,i){return new(r||(r=Promise))((function(o,a){function s(t){try{l(i.next(t))}catch(e){a(e)}}function c(t){try{l(i.throw(t))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}l((i=i.apply(t,n||[])).next())}))},__generator=globalThis&&globalThis.__generator||function(t,n){var r,i,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=n.call(t,s)}catch(e){a=[6,e],i=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},__spreadArray=globalThis&&globalThis.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},Container=function(){function t(e){var t=e||{};if("object"!=typeof t)throw new Error(""+CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);if(void 0===t.defaultScope)t.defaultScope=BindingScopeEnum.Transient;else if(t.defaultScope!==BindingScopeEnum.Singleton&&t.defaultScope!==BindingScopeEnum.Transient&&t.defaultScope!==BindingScopeEnum.Request)throw new Error(""+CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);if(void 0===t.autoBindInjectable)t.autoBindInjectable=!1;else if("boolean"!=typeof t.autoBindInjectable)throw new Error(""+CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);if(void 0===t.skipBaseClassChecks)t.skipBaseClassChecks=!1;else if("boolean"!=typeof t.skipBaseClassChecks)throw new Error(""+CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);this.options={autoBindInjectable:t.autoBindInjectable,defaultScope:t.defaultScope,skipBaseClassChecks:t.skipBaseClassChecks},this.id=id(),this._bindingDictionary=new Lookup,this._snapshots=[],this._middleware=null,this._activations=new Lookup,this._deactivations=new Lookup,this.parent=null,this._metadataReader=new MetadataReader,this._moduleActivationStore=new ModuleActivationStore}return t.merge=function(e,n){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var o=new t,a=__spreadArray([e,n],r,!0).map((function(e){return getBindingDictionary(e)})),s=getBindingDictionary(o);return a.forEach((function(e){var t;t=s,e.traverse((function(e,n){n.forEach((function(e){t.add(e.serviceIdentifier,e.clone())}))}))})),o},t.prototype.load=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=this._getContainerModuleHelpersFactory(),r=0,i=e;r<i.length;r++){var o=i[r],a=n(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction,a.unbindAsyncFunction,a.onActivationFunction,a.onDeactivationFunction)}},t.prototype.loadAsync=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return __awaiter(this,void 0,void 0,(function(){var t,n,r,i,o;return __generator(this,(function(a){switch(a.label){case 0:t=this._getContainerModuleHelpersFactory(),n=0,r=e,a.label=1;case 1:return n<r.length?(i=r[n],o=t(i.id),[4,i.registry(o.bindFunction,o.unbindFunction,o.isboundFunction,o.rebindFunction,o.unbindAsyncFunction,o.onActivationFunction,o.onDeactivationFunction)]):[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];t.forEach((function(t){var n=e._removeModuleBindings(t.id);e._deactivateSingletons(n),e._removeModuleHandlers(t.id)}))},t.prototype.unloadAsync=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return __awaiter(this,void 0,void 0,(function(){var t,n,r,i;return __generator(this,(function(o){switch(o.label){case 0:t=0,n=e,o.label=1;case 1:return t<n.length?(r=n[t],i=this._removeModuleBindings(r.id),[4,this._deactivateSingletonsAsync(i)]):[3,4];case 2:o.sent(),this._removeModuleHandlers(r.id),o.label=3;case 3:return t++,[3,1];case 4:return[2]}}))}))},t.prototype.bind=function(e){var t=this.options.defaultScope||BindingScopeEnum.Transient,n=new Binding(e,t);return this._bindingDictionary.add(e,n),new BindingToSyntax(n)},t.prototype.rebind=function(e){return this.unbind(e),this.bind(e)},t.prototype.rebindAsync=function(e){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(t){switch(t.label){case 0:return[4,this.unbindAsync(e)];case 1:return t.sent(),[2,this.bind(e)]}}))}))},t.prototype.unbind=function(e){if(this._bindingDictionary.hasKey(e)){var t=this._bindingDictionary.get(e);this._deactivateSingletons(t)}this._removeServiceFromDictionary(e)},t.prototype.unbindAsync=function(e){return __awaiter(this,void 0,void 0,(function(){var t;return __generator(this,(function(n){switch(n.label){case 0:return this._bindingDictionary.hasKey(e)?(t=this._bindingDictionary.get(e),[4,this._deactivateSingletonsAsync(t)]):[3,2];case 1:n.sent(),n.label=2;case 2:return this._removeServiceFromDictionary(e),[2]}}))}))},t.prototype.unbindAll=function(){var e=this;this._bindingDictionary.traverse((function(t,n){e._deactivateSingletons(n)})),this._bindingDictionary=new Lookup},t.prototype.unbindAllAsync=function(){return __awaiter(this,void 0,void 0,(function(){var e,t=this;return __generator(this,(function(n){switch(n.label){case 0:return e=[],this._bindingDictionary.traverse((function(n,r){e.push(t._deactivateSingletonsAsync(r))})),[4,Promise.all(e)];case 1:return n.sent(),this._bindingDictionary=new Lookup,[2]}}))}))},t.prototype.onActivation=function(e,t){this._activations.add(e,t)},t.prototype.onDeactivation=function(e,t){this._deactivations.add(e,t)},t.prototype.isBound=function(e){var t=this._bindingDictionary.hasKey(e);return!t&&this.parent&&(t=this.parent.isBound(e)),t},t.prototype.isCurrentBound=function(e){return this._bindingDictionary.hasKey(e)},t.prototype.isBoundNamed=function(e,t){return this.isBoundTagged(e,NAMED_TAG,t)},t.prototype.isBoundTagged=function(e,t,n){var r=!1;if(this._bindingDictionary.hasKey(e)){var i=this._bindingDictionary.get(e),o=createMockRequest(this,e,t,n);r=i.some((function(e){return e.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(e,t,n)),r},t.prototype.snapshot=function(){this._snapshots.push(ContainerSnapshot.of(this._bindingDictionary.clone(),this._middleware,this._activations.clone(),this._deactivations.clone(),this._moduleActivationStore.clone()))},t.prototype.restore=function(){var e=this._snapshots.pop();if(void 0===e)throw new Error(NO_MORE_SNAPSHOTS_AVAILABLE);this._bindingDictionary=e.bindings,this._activations=e.activations,this._deactivations=e.deactivations,this._middleware=e.middleware,this._moduleActivationStore=e.moduleActivationStore},t.prototype.createChild=function(e){var n=new t(e||this.options);return n.parent=this,n},t.prototype.applyMiddleware=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._middleware?this._middleware:this._planAndResolve();this._middleware=e.reduce((function(e,t){return t(e)}),n)},t.prototype.applyCustomMetadataReader=function(e){this._metadataReader=e},t.prototype.get=function(e){var t=this._getNotAllArgs(e,!1);return this._getButThrowIfAsync(t)},t.prototype.getAsync=function(e){return __awaiter(this,void 0,void 0,(function(){var t;return __generator(this,(function(n){return t=this._getNotAllArgs(e,!1),[2,this._get(t)]}))}))},t.prototype.getTagged=function(e,t,n){var r=this._getNotAllArgs(e,!1,t,n);return this._getButThrowIfAsync(r)},t.prototype.getTaggedAsync=function(e,t,n){return __awaiter(this,void 0,void 0,(function(){var r;return __generator(this,(function(i){return r=this._getNotAllArgs(e,!1,t,n),[2,this._get(r)]}))}))},t.prototype.getNamed=function(e,t){return this.getTagged(e,NAMED_TAG,t)},t.prototype.getNamedAsync=function(e,t){return this.getTaggedAsync(e,NAMED_TAG,t)},t.prototype.getAll=function(e){var t=this._getAllArgs(e);return this._getButThrowIfAsync(t)},t.prototype.getAllAsync=function(e){var t=this._getAllArgs(e);return this._getAll(t)},t.prototype.getAllTagged=function(e,t,n){var r=this._getNotAllArgs(e,!0,t,n);return this._getButThrowIfAsync(r)},t.prototype.getAllTaggedAsync=function(e,t,n){var r=this._getNotAllArgs(e,!0,t,n);return this._getAll(r)},t.prototype.getAllNamed=function(e,t){return this.getAllTagged(e,NAMED_TAG,t)},t.prototype.getAllNamedAsync=function(e,t){return this.getAllTaggedAsync(e,NAMED_TAG,t)},t.prototype.resolve=function(e){var t=this.isBound(e);t||this.bind(e).toSelf();var n=this.get(e);return t||this.unbind(e),n},t.prototype._preDestroy=function(e,t){if(Reflect.hasMetadata(PRE_DESTROY,e))return t[Reflect.getMetadata(PRE_DESTROY,e).value]()},t.prototype._removeModuleHandlers=function(e){var t=this._moduleActivationStore.remove(e);this._activations.removeIntersection(t.onActivations),this._deactivations.removeIntersection(t.onDeactivations)},t.prototype._removeModuleBindings=function(e){return this._bindingDictionary.removeByCondition((function(t){return t.moduleId===e}))},t.prototype._deactivate=function(e,t){var n=this,r=Object.getPrototypeOf(t).constructor;try{if(this._deactivations.hasKey(e.serviceIdentifier)){var i=this._deactivateContainer(t,this._deactivations.get(e.serviceIdentifier).values());if(isPromise(i))return this._handleDeactivationError(i.then((function(){return n._propagateContainerDeactivationThenBindingAndPreDestroyAsync(e,t,r)})),r)}var o=this._propagateContainerDeactivationThenBindingAndPreDestroy(e,t,r);if(isPromise(o))return this._handleDeactivationError(o,r)}catch(a){throw new Error(ON_DEACTIVATION_ERROR(r.name,a.message))}},t.prototype._handleDeactivationError=function(e,t){return __awaiter(this,void 0,void 0,(function(){var n;return __generator(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,e];case 1:return r.sent(),[3,3];case 2:throw n=r.sent(),new Error(ON_DEACTIVATION_ERROR(t.name,n.message));case 3:return[2]}}))}))},t.prototype._deactivateContainer=function(e,t){for(var n=this,r=t.next();r.value;){var i=r.value(e);if(isPromise(i))return i.then((function(){return n._deactivateContainerAsync(e,t)}));r=t.next()}},t.prototype._deactivateContainerAsync=function(e,t){return __awaiter(this,void 0,void 0,(function(){var n;return __generator(this,(function(r){switch(r.label){case 0:n=t.next(),r.label=1;case 1:return n.value?[4,n.value(e)]:[3,3];case 2:return r.sent(),n=t.next(),[3,1];case 3:return[2]}}))}))},t.prototype._getContainerModuleHelpersFactory=function(){var e=this,t=function(e,t){e._binding.moduleId=t},n=function(n){return function(r){var i=e.rebind(r);return t(i,n),i}},r=function(t){return function(n,r){e._moduleActivationStore.addActivation(t,n,r),e.onActivation(n,r)}},i=function(t){return function(n,r){e._moduleActivationStore.addDeactivation(t,n,r),e.onDeactivation(n,r)}};return function(o){return{bindFunction:(a=o,function(n){var r=e.bind(n);return t(r,a),r}),isboundFunction:function(t){return e.isBound(t)},onActivationFunction:r(o),onDeactivationFunction:i(o),rebindFunction:n(o),unbindFunction:function(t){return e.unbind(t)},unbindAsyncFunction:function(t){return e.unbindAsync(t)}};var a}},t.prototype._getAll=function(e){return Promise.all(this._get(e))},t.prototype._get=function(e){var t=__assign(__assign({},e),{contextInterceptor:function(e){return e},targetType:TargetTypeEnum.Variable});if(this._middleware){var n=this._middleware(t);if(null==n)throw new Error(INVALID_MIDDLEWARE_RETURN);return n}return this._planAndResolve()(t)},t.prototype._getButThrowIfAsync=function(e){var t=this._get(e);if(isPromiseOrContainsPromise(t))throw new Error(LAZY_IN_SYNC(e.serviceIdentifier));return t},t.prototype._getAllArgs=function(e){return{avoidConstraints:!0,isMultiInject:!0,serviceIdentifier:e}},t.prototype._getNotAllArgs=function(e,t,n,r){return{avoidConstraints:!1,isMultiInject:t,serviceIdentifier:e,key:n,value:r}},t.prototype._planAndResolve=function(){var e=this;return function(t){var n=plan(e._metadataReader,e,t.isMultiInject,t.targetType,t.serviceIdentifier,t.key,t.value,t.avoidConstraints);return resolve(n=t.contextInterceptor(n))}},t.prototype._deactivateIfSingleton=function(e){var t=this;if(e.activated)return isPromise(e.cache)?e.cache.then((function(n){return t._deactivate(e,n)})):this._deactivate(e,e.cache)},t.prototype._deactivateSingletons=function(e){for(var t=0,n=e;t<n.length;t++){var r=n[t];if(isPromise(this._deactivateIfSingleton(r)))throw new Error(ASYNC_UNBIND_REQUIRED)}},t.prototype._deactivateSingletonsAsync=function(e){return __awaiter(this,void 0,void 0,(function(){var t=this;return __generator(this,(function(n){switch(n.label){case 0:return[4,Promise.all(e.map((function(e){return t._deactivateIfSingleton(e)})))];case 1:return n.sent(),[2]}}))}))},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroy=function(e,t,n){return this.parent?this._deactivate.bind(this.parent)(e,t):this._bindingDeactivationAndPreDestroy(e,t,n)},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync=function(e,t,n){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(r){switch(r.label){case 0:return this.parent?[4,this._deactivate.bind(this.parent)(e,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this._bindingDeactivationAndPreDestroyAsync(e,t,n)];case 3:r.sent(),r.label=4;case 4:return[2]}}))}))},t.prototype._removeServiceFromDictionary=function(t){try{this._bindingDictionary.remove(t)}catch(e){throw new Error(CANNOT_UNBIND+" "+getServiceIdentifierAsString(t))}},t.prototype._bindingDeactivationAndPreDestroy=function(e,t,n){var r=this;if("function"==typeof e.onDeactivation){var i=e.onDeactivation(t);if(isPromise(i))return i.then((function(){return r._preDestroy(n,t)}))}return this._preDestroy(n,t)},t.prototype._bindingDeactivationAndPreDestroyAsync=function(e,t,n){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(r){switch(r.label){case 0:return"function"!=typeof e.onDeactivation?[3,2]:[4,e.onDeactivation(t)];case 1:r.sent(),r.label=2;case 2:return[4,this._preDestroy(n,t)];case 3:return r.sent(),[2]}}))}))},t}();function getFirstArrayDuplicate(e){for(var t=new Set,n=0,r=e;n<r.length;n++){var i=r[n];if(t.has(i))return i;t.add(i)}}function targetIsConstructorFunction(e){return void 0!==e.prototype}function _throwIfMethodParameter(e){if(void 0!==e)throw new Error(INVALID_DECORATOR_OPERATION)}function tagParameter(e,t,n,r){_throwIfMethodParameter(t),_tagParameterOrProperty(TAGGED,e,n.toString(),r)}function tagProperty(e,t,n){if(targetIsConstructorFunction(e))throw new Error(INVALID_DECORATOR_OPERATION);_tagParameterOrProperty(TAGGED_PROP,e.constructor,t,n)}function _ensureNoMetadataKeyDuplicates(e){var t=[];if(Array.isArray(e)){var n=getFirstArrayDuplicate((t=e).map((function(e){return e.key})));if(void 0!==n)throw new Error(DUPLICATED_METADATA+" "+n.toString())}else t=[e];return t}function _tagParameterOrProperty(e,t,n,r){var i=_ensureNoMetadataKeyDuplicates(r),o={};Reflect.hasOwnMetadata(e,t)&&(o=Reflect.getMetadata(e,t));var a=o[n];if(void 0===a)a=[];else for(var s=function(e){if(i.some((function(t){return t.key===e.key})))throw new Error(DUPLICATED_METADATA+" "+e.key.toString())},c=0,l=a;c<l.length;c++){s(l[c])}a.push.apply(a,i),o[n]=a,Reflect.defineMetadata(e,o,t)}function createTaggedDecorator(e){return function(t,n,r){"number"==typeof r?tagParameter(t,n,r,e):tagProperty(t,n,e)}}function injectable(){return function(e){if(Reflect.hasOwnMetadata(PARAM_TYPES,e))throw new Error(DUPLICATED_INJECTABLE_DECORATOR);var t=Reflect.getMetadata(DESIGN_PARAM_TYPES,e)||[];return Reflect.defineMetadata(PARAM_TYPES,t,e),e}}function injectBase(e){return function(t){return function(n,r,i){if(void 0===t){var o="function"==typeof n?n.name:n.constructor.name;throw new Error(UNDEFINED_INJECT_ANNOTATION(o))}return createTaggedDecorator(new Metadata(e,t))(n,r,i)}}}var inject=injectBase(INJECT_TAG);const PLUGIN_SYSTEM_AUTO_UPDATE="PLUGIN_SYSTEM_AUTO_UPDATE",PLUGIN_SYSTEM_PLUGIN="PLUGIN_SYSTEM_PLUGIN",PLUGIN_SYSTEM_THIRD_PARTY_PLUGIN="PLUGIN_SYSTEM_THIRD_PARTY_PLUGIN",PLUGIN_SYSTEM_SAFE_MODE_ENABLED="PLUGIN_SYSTEM_SAFE_MODE_ENABLED",PLUGIN_STORE_URL="PLUGIN_STORE_URL",defaultConfig={[PLUGIN_SYSTEM_SAFE_MODE_ENABLED]:!0,[PLUGIN_SYSTEM_AUTO_UPDATE]:!0,[PLUGIN_SYSTEM_PLUGIN]:[{key:"setting",enabled:!0}],[PLUGIN_SYSTEM_THIRD_PARTY_PLUGIN]:[],[PLUGIN_STORE_URL]:"https://bitbucket.org/siyuan-plugin/siyuan-plugins/raw/main/"};function noop(){}function assign(e,t){for(const n in t)e[n]=t[n];return e}function run(e){return e()}function blank_object(){return Object.create(null)}function run_all(e){e.forEach(run)}function is_function(e){return"function"==typeof e}function safe_not_equal(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function is_empty(e){return 0===Object.keys(e).length}function create_slot(e,t,n,r){if(e){const i=get_slot_context(e,t,n,r);return e[0](i)}}function get_slot_context(e,t,n,r){return e[1]&&r?assign(n.ctx.slice(),e[1](r(t))):n.ctx}function get_slot_changes(e,t,n,r){if(e[2]&&r){const i=e[2](r(n));if(void 0===t.dirty)return i;if("object"==typeof i){const e=[],n=Math.max(t.dirty.length,i.length);for(let r=0;r<n;r+=1)e[r]=t.dirty[r]|i[r];return e}return t.dirty|i}return t.dirty}function update_slot_base(e,t,n,r,i,o){if(i){const a=get_slot_context(t,n,r,o);e.p(a,i)}}function get_all_dirty_from_scope(e){if(e.ctx.length>32){const t=[],n=e.ctx.length/32;for(let e=0;e<n;e++)t[e]=-1;return t}return-1}function null_to_empty(e){return null==e?"":e}function append(e,t){e.appendChild(t)}function insert(e,t,n){e.insertBefore(t,n||null)}function detach(e){e.parentNode&&e.parentNode.removeChild(e)}function destroy_each(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function element(e){return document.createElement(e)}function svg_element(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function text(e){return document.createTextNode(e)}function space(){return text(" ")}function empty(){return text("")}function listen(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function attr(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function xlink_attr(e,t,n){e.setAttributeNS("http://www.w3.org/1999/xlink",t,n)}function children(e){return Array.from(e.childNodes)}function set_data(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function set_input_value(e,t){e.value=null==t?"":t}function set_style(e,t,n,r){null===n?e.style.removeProperty(t):e.style.setProperty(t,n,r?"important":"")}function custom_event(e,t,{bubbles:n=!1,cancelable:r=!1}={}){const i=document.createEvent("CustomEvent");return i.initCustomEvent(e,n,r,t),i}class HtmlTag{constructor(e=!1){this.is_svg=!1,this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,t,n=null){this.e||(this.is_svg?this.e=svg_element(t.nodeName):this.e=element(t.nodeName),this.t=t,this.c(e)),this.i(n)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let t=0;t<this.n.length;t+=1)insert(this.t,this.n[t],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(detach)}}function construct_svelte_component(e,t){return new e(t)}let current_component;function set_current_component(e){current_component=e}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function onMount(e){get_current_component().$$.on_mount.push(e)}function createEventDispatcher(){const e=get_current_component();return(t,n,{cancelable:r=!1}={})=>{const i=e.$$.callbacks[t];if(i){const o=custom_event(t,n,{cancelable:r});return i.slice().forEach((t=>{t.call(e,o)})),!o.defaultPrevented}return!0}}const dirty_components=[],binding_callbacks=[],render_callbacks=[],flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function add_render_callback(e){render_callbacks.push(e)}const seen_callbacks=new Set;let flushidx=0;function flush(){if(0!==flushidx)return;const t=current_component;do{try{for(;flushidx<dirty_components.length;){const e=dirty_components[flushidx];flushidx++,set_current_component(e),update(e.$$)}}catch(e){throw dirty_components.length=0,flushidx=0,e}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let e=0;e<render_callbacks.length;e+=1){const t=render_callbacks[e];seen_callbacks.has(t)||(seen_callbacks.add(t),t())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(t)}function update(e){if(null!==e.fragment){e.update(),run_all(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(add_render_callback)}}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(e,t){e&&e.i&&(outroing.delete(e),e.i(t))}function transition_out(e,t,n,r){if(e&&e.o){if(outroing.has(e))return;outroing.add(e),outros.c.push((()=>{outroing.delete(e),r&&(n&&e.d(1),r())})),e.o(t)}else r&&r()}function create_component(e){e&&e.c()}function mount_component(e,t,n,r){const{fragment:i,after_update:o}=e.$$;i&&i.m(t,n),r||add_render_callback((()=>{const t=e.$$.on_mount.map(run).filter(is_function);e.$$.on_destroy?e.$$.on_destroy.push(...t):run_all(t),e.$$.on_mount=[]})),o.forEach(add_render_callback)}function destroy_component(e,t){const n=e.$$;null!==n.fragment&&(run_all(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function make_dirty(e,t){-1===e.$$.dirty[0]&&(dirty_components.push(e),schedule_update(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function init(e,t,n,r,i,o,a,s=[-1]){const c=current_component;set_current_component(e);const l=e.$$={fragment:null,ctx:[],props:o,update:noop,not_equal:i,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(c?c.$$.context:[])),callbacks:blank_object(),dirty:s,skip_bound:!1,root:t.target||c.$$.root};a&&a(l.root);let u=!1;if(l.ctx=n?n(e,t.props||{},((t,n,...r)=>{const o=r.length?r[0]:n;return l.ctx&&i(l.ctx[t],l.ctx[t]=o)&&(!l.skip_bound&&l.bound[t]&&l.bound[t](o),u&&make_dirty(e,t)),n})):[],l.update(),u=!0,run_all(l.before_update),l.fragment=!!r&&r(l.ctx),t.target){if(t.hydrate){const e=children(t.target);l.fragment&&l.fragment.l(e),e.forEach(detach)}else l.fragment&&l.fragment.c();t.intro&&transition_in(e.$$.fragment),mount_component(e,t.target,t.anchor,t.customElement),flush()}set_current_component(c)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop}$on(e,t){if(!is_function(t))return noop;const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!is_empty(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const commandPanel_svelte_svelte_type_style_lang="";function get_each_context$4(e,t,n){const r=e.slice();return r[11]=t[n],r[13]=n,r}function create_if_block$5(e){let t,n=e[2],r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block$4(get_each_context$4(e,n,i));return{c(){for(let e=0;e<r.length;e+=1)r[e].c();t=empty()},m(e,n){for(let t=0;t<r.length;t+=1)r[t].m(e,n);insert(e,t,n)},p(e,i){if(22&i){let o;for(n=e[2],o=0;o<n.length;o+=1){const a=get_each_context$4(e,n,o);r[o]?r[o].p(a,i):(r[o]=create_each_block$4(a),r[o].c(),r[o].m(t.parentNode,t))}for(;o<r.length;o+=1)r[o].d(1);r.length=n.length}},d(e){destroy_each(r,e),e&&detach(t)}}}function create_if_block_1$4(e){let t,n,r,i,o=_("shortcut")+"",a=e[11].shortcut+"";return{c(){t=element("div"),n=text(o),r=text(": "),i=text(a),attr(t,"class","command-shortcut svelte-1bq7axd")},m(e,o){insert(e,t,o),append(t,n),append(t,r),append(t,i)},p(e,t){4&t&&a!==(a=e[11].shortcut+"")&&set_data(i,a)},d(e){e&&detach(t)}}}function create_each_block$4(e){let t,n,r,i,o,a,s,c,l,u,d,p,f,h,g,m=e[11].pluginName+"",_=e[11].command+"",y=(e[11].description||"")+"",v=e[11].shortcut&&create_if_block_1$4(e);function b(){return e[7](e[13])}return{c(){t=element("div"),n=element("span"),r=text(m),i=space(),o=text(":"),a=space(),s=element("span"),c=text(_),l=space(),u=text(y),d=space(),v&&v.c(),p=space(),attr(n,"class","command-plugin svelte-1bq7axd"),attr(s,"class","command-description"),attr(t,"class",f=null_to_empty(e[13]===e[1]?"command-selected command":"command")+" svelte-1bq7axd")},m(e,f){insert(e,t,f),append(t,n),append(n,r),append(n,i),append(n,o),append(t,a),append(t,s),append(s,c),append(s,l),append(s,u),append(t,d),v&&v.m(t,null),append(t,p),h||(g=listen(t,"click",b),h=!0)},p(n,i){e=n,4&i&&m!==(m=e[11].pluginName+"")&&set_data(r,m),4&i&&_!==(_=e[11].command+"")&&set_data(c,_),4&i&&y!==(y=(e[11].description||"")+"")&&set_data(u,y),e[11].shortcut?v?v.p(e,i):(v=create_if_block_1$4(e),v.c(),v.m(t,p)):v&&(v.d(1),v=null),2&i&&f!==(f=null_to_empty(e[13]===e[1]?"command-selected command":"command")+" svelte-1bq7axd")&&attr(t,"class",f)},d(e){e&&detach(t),v&&v.d(),h=!1,g()}}}function create_fragment$7(e){let t,n,r,i,o,a,s,c,l,u=e[2]&&create_if_block$5(e);return{c(){t=element("div"),n=element("div"),r=svg_element("svg"),i=svg_element("path"),o=space(),a=element("input"),s=space(),u&&u.c(),attr(i,"d","M64 112v800h896V112H64z m846 750H114V162h796v700zM234.6 688.8L411.3 512 234.6 335.2l35.4-35.4L482.1 512 269.9 724.1l-35.3-35.3z m554.8-10.2h-300v-50h300v50z"),set_style(r,"left","14px"),attr(r,"class","b3-form__icon-icon"),attr(r,"viewBox","0 0 1024 1024"),attr(r,"version","1.1"),attr(r,"xmlns","http://www.w3.org/2000/svg"),attr(r,"width","200"),attr(r,"height","200"),attr(a,"id","commandPanelInput"),attr(a,"class","b3-text-field b3-text-field--text fn__block b3-form__icon-input"),attr(n,"class","b3-form__icon search__header"),attr(t,"class","fn__flex-column"),set_style(t,"border-radius","4px"),set_style(t,"overflow","hidden"),set_style(t,"position","relative"),set_style(t,"width","max(80vw, 1000px)")},m(d,p){insert(d,t,p),append(t,n),append(n,r),append(r,i),append(n,o),append(n,a),set_input_value(a,e[0]),append(t,s),u&&u.m(t,null),c||(l=[listen(a,"input",e[6]),listen(a,"keydown",e[3])],c=!0)},p(e,[n]){1&n&&a.value!==e[0]&&set_input_value(a,e[0]),e[2]?u?u.p(e,n):(u=create_if_block$5(e),u.c(),u.m(t,null)):u&&(u.d(1),u=null)},i:noop,o:noop,d(e){e&&detach(t),u&&u.d(),c=!1,run_all(l)}}}function instance$7(e,t,n){const r=container.get("CommandManager");let i=[],o="",a=0,s=[];const c=()=>{const e=s[a];Dialog.destroyAll(),e.callback()},l=e=>{n(1,a=e),c()},u=(e,t)=>e&&e.toLowerCase().indexOf(t.toLowerCase())>=0;onMount((()=>{n(5,i=r.getCommands());document.getElementById("commandPanelInput").focus()}));return e.$$.update=()=>{33&e.$$.dirty&&(n(1,a=0),n(2,s=o?i.filter((e=>u(e.plugin,o)||u(e.pluginName,o)||u(e.command,o)||u(e.description,o))):i))},[o,a,s,e=>{if(13!==e.keyCode)if(38!==e.keyCode){if(40===e.keyCode){const t=s.length;if(e.preventDefault(),a>=t-1)return;n(1,a++,a)}}else{if(e.preventDefault(),0===a)return;n(1,a--,a)}else c()},l,i,function(){o=this.value,n(0,o)},e=>l(e)]}class Command_panel extends SvelteComponent{constructor(e){super(),init(this,e,instance$7,create_fragment$7,safe_not_equal,{})}}class CommandPanelPlugin extends Plugin{onload(){this.registerCommand({command:"Show command panel",description:_("show_command_panel"),shortcut:"ctrl+shift+o,command+shift+o",callback:()=>{this.showPanel()}})}showPanel(){Dialog.destroyAll(),new Dialog({content:'<div id="command-panel"></div>'}),setImmediate((()=>{new Command_panel({target:document.getElementById("command-panel")})}))}}function get_each_context$3(e,t,n){const r=e.slice();return r[5]=t[n],r[6]=t,r[7]=n,r}function create_if_block_1$3(e){let t,n,r;function i(){e[2].call(t,e[6],e[7])}return{c(){t=element("input"),attr(t,"class","b3-text-field fn__flex-center fn__size200"),attr(t,"type","input")},m(o,a){insert(o,t,a),set_input_value(t,e[5].value),n||(r=[listen(t,"input",i),listen(t,"change",(function(){is_function(e[5].onChange)&&e[5].onChange.apply(this,arguments)}))],n=!0)},p(n,r){e=n,1&r&&set_input_value(t,e[5].value)},d(e){e&&detach(t),n=!1,run_all(r)}}}function create_if_block$4(e){let t,n,r;function i(){e[1].call(t,e[6],e[7])}return{c(){t=element("input"),attr(t,"class","b3-switch fn__flex-center"),attr(t,"type","checkbox")},m(o,a){insert(o,t,a),t.checked=e[5].checked,n||(r=[listen(t,"change",i),listen(t,"change",(function(){is_function(e[5].onChange)&&e[5].onChange.apply(this,arguments)}))],n=!0)},p(n,r){e=n,1&r&&(t.checked=e[5].checked)},d(e){e&&detach(t),n=!1,run_all(r)}}}function create_each_block$3(e){let t,n,r,i,o,a,s,c,l,u,d=e[5].label+"",p=e[5].tip+"";function f(e,t){return"checkbox"===e[5].type?create_if_block$4:"input"===e[5].type?create_if_block_1$3:void 0}let h=f(e),g=h&&h(e);return{c(){t=element("label"),n=element("div"),r=text(d),i=space(),o=element("div"),a=text(p),s=space(),c=element("span"),l=space(),g&&g.c(),u=space(),attr(o,"class","b3-label__text"),attr(n,"class","fn__flex-1"),attr(c,"class","fn__space"),attr(t,"class","fn__flex b3-label config__item")},m(e,d){insert(e,t,d),append(t,n),append(n,r),append(n,i),append(n,o),append(o,a),append(t,s),append(t,c),append(t,l),g&&g.m(t,null),append(t,u)},p(e,n){1&n&&d!==(d=e[5].label+"")&&set_data(r,d),1&n&&p!==(p=e[5].tip+"")&&set_data(a,p),h===(h=f(e))&&g?g.p(e,n):(g&&g.d(1),g=h&&h(e),g&&(g.c(),g.m(t,u)))},d(e){e&&detach(t),g&&g.d()}}}function create_fragment$6(e){let t,n=e[0],r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block$3(get_each_context$3(e,n,i));return{c(){for(let e=0;e<r.length;e+=1)r[e].c();t=empty()},m(e,n){for(let t=0;t<r.length;t+=1)r[t].m(e,n);insert(e,t,n)},p(e,[i]){if(1&i){let o;for(n=e[0],o=0;o<n.length;o+=1){const a=get_each_context$3(e,n,o);r[o]?r[o].p(a,i):(r[o]=create_each_block$3(a),r[o].c(),r[o].m(t.parentNode,t))}for(;o<r.length;o+=1)r[o].d(1);r.length=n.length}},i:noop,o:noop,d(e){destroy_each(r,e),e&&detach(t)}}}function instance$6(e,t,n){const r=container.get(TYPES.StorageManager),i=container.get(TYPES.PluginSystem);let o=[{label:_("safemode"),tip:_("safemodetip"),checked:!0,type:"checkbox",onChange:e=>{e.target.checked?i.turnOnSafeMode():i.turnOffSafeMode()}},{label:_("store_url"),tip:`${_("store_url_tip")} ${defaultConfig.PLUGIN_STORE_URL}`,type:"input",value:r.get(PLUGIN_STORE_URL),onChange:e=>{r.set(PLUGIN_STORE_URL,e.target.value)}}];return onMount((()=>{const e=r.get(PLUGIN_SYSTEM_SAFE_MODE_ENABLED);n(0,o[0].checked=e,o);const t=r.get(PLUGIN_SYSTEM_AUTO_UPDATE);n(0,o[1].checked=t,o)})),[o,function(e,t){e[t].checked=this.checked,n(0,o)},function(e,t){e[t].value=this.value,n(0,o)}]}class Setting_common extends SvelteComponent{constructor(e){super(),init(this,e,instance$6,create_fragment$6,safe_not_equal,{})}}const settingList_svelte_svelte_type_style_lang="";function get_each_context$2(e,t,n){const r=e.slice();return r[10]=t[n],r[11]=t,r[12]=n,r}function create_if_block$3(e){let t,n,r,i,o,a,s,c,l,u,d,p,f,h,g,m,y,v=e[10].name+"",b=e[10].version+"",w=(e[10].description||_("nodescription"))+"";function E(...t){return e[4](e[10],...t)}function S(){e[5].call(h,e[11],e[12])}return{c(){t=element("label"),n=element("div"),r=text(v),i=space(),o=text(b),a=space(),s=element("span"),s.textContent=`${_("uninstall")}`,c=space(),l=element("div"),u=text(w),d=space(),p=element("span"),f=space(),h=element("input"),g=space(),attr(s,"class","remove svelte-bwhxpp"),attr(l,"class","b3-label__text"),attr(n,"class","plugin fn__flex-1 svelte-bwhxpp"),attr(p,"class","fn__space"),attr(h,"class","b3-switch fn__flex-center"),attr(h,"id","fullWidth"),attr(h,"type","checkbox"),attr(t,"class","fn__flex b3-label")},m(_,v){insert(_,t,v),append(t,n),append(n,r),append(n,i),append(n,o),append(n,a),append(n,s),append(n,c),append(n,l),append(l,u),append(t,d),append(t,p),append(t,f),append(t,h),h.checked=e[10].enabled,append(t,g),m||(y=[listen(s,"click",E),listen(h,"change",S),listen(h,"change",(function(){is_function(e[1](e[10].key))&&e[1](e[10].key).apply(this,arguments)}))],m=!0)},p(t,n){e=t,1&n&&v!==(v=e[10].name+"")&&set_data(r,v),1&n&&b!==(b=e[10].version+"")&&set_data(o,b),1&n&&w!==(w=(e[10].description||_("nodescription"))+"")&&set_data(u,w),1&n&&(h.checked=e[10].enabled)},d(e){e&&detach(t),m=!1,run_all(y)}}}function create_each_block$2(e){let t,n=!e[10].hidden&&create_if_block$3(e);return{c(){n&&n.c(),t=empty()},m(e,r){n&&n.m(e,r),insert(e,t,r)},p(e,r){e[10].hidden?n&&(n.d(1),n=null):n?n.p(e,r):(n=create_if_block$3(e),n.c(),n.m(t.parentNode,t))},d(e){n&&n.d(e),e&&detach(t)}}}function create_fragment$5(e){let t,n,r=e[0],i=[];for(let o=0;o<r.length;o+=1)i[o]=create_each_block$2(get_each_context$2(e,r,o));return{c(){t=element("label"),n=element("div");for(let e=0;e<i.length;e+=1)i[e].c();attr(n,"class","fn__flex-1"),attr(t,"class","b3-label fn__flex")},m(e,r){insert(e,t,r),append(t,n);for(let t=0;t<i.length;t+=1)i[t].m(n,null)},p(e,[t]){if(7&t){let o;for(r=e[0],o=0;o<r.length;o+=1){const a=get_each_context$2(e,r,o);i[o]?i[o].p(a,t):(i[o]=create_each_block$2(a),i[o].c(),i[o].m(n,null))}for(;o<i.length;o+=1)i[o].d(1);i.length=r.length}},i:noop,o:noop,d(e){e&&detach(t),destroy_each(i,e)}}}function instance$5(e,t,n){let r;const i=container.get(TYPES.StorageManager),o=container.get(TYPES.PluginSystem);let a=[];const s=()=>{n(3,a=i.getPlugins())},c=createEventDispatcher(),l=async(e,t)=>{t.preventDefault(),t.stopPropagation(),await o.unloadPlugin(e),await i.uninstallPlugin(e),await i.initStorage(),s()};onMount((async()=>{await i.initStorage(),s()}));return e.$$.update=()=>{8&e.$$.dirty&&n(0,r=a.filter((e=>e.script)))},[r,e=>async t=>{const n=i.get(PLUGIN_SYSTEM_SAFE_MODE_ENABLED),r=t.target.checked;await i.setPluginEnabled(e,r),n||(r?o.loadPlugin(e):o.unloadPlugin(e),c("update"))},l,a,(e,t)=>l(e.key,t),function(e,t){e[t].enabled=this.checked,n(0,r),n(3,a)}]}class Setting_list extends SvelteComponent{constructor(e){super(),init(this,e,instance$5,create_fragment$5,safe_not_equal,{})}}var __defProp$9=Object.defineProperty,__getOwnPropDesc$9=Object.getOwnPropertyDescriptor,__decorateClass$9=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$9(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$9(t,n,o),o},__decorateParam$6=(e,t)=>(n,r)=>t(n,r,e);let Store=class{constructor(e){this.storageManager=e,this.plugins=[],this.pluginStatus=[]}async init(){this.plugins=[],this.pluginStatus=[],await Promise.all([this.loadPluginsFromUrl(),this.storageManager.initStorage()]);const e=this.storageManager.getPlugins(),t=[];for(const n of this.plugins){const r={...n,isExist:!1,needUpgrade:!1},i=e.find((e=>e.key===n.key));if(i){r.isExist=!0;const e=new semver.SemVer(r.version),t=new semver.SemVer(i.version);1===e.compare(t)&&(r.needUpgrade=!0)}t.push(r)}this.pluginStatus=t}getStoreUrl(){return this.storageManager.get(PLUGIN_STORE_URL)}getPlugins(){return this.plugins}async loadPlugins(){return await this.init(),this.getPluginsWithStatus()}getPluginsWithStatus(){return this.pluginStatus}async loadPluginsFromUrl(){var t,n;const r=this.getStoreUrl();if(!r)return;let i;try{i=await request.get(r+"/plugins.json",{headers:{"Cache-Control":"no-cache"}})}catch(e){return void console.error(e)}const o=[];if(Array.isArray(null==(t=i.data)?void 0:t.plugins))for(const e of(null==(n=i.data)?void 0:n.plugins)||{}){const t=this.getPluginManifest(`${r}/${e}`);o.push(t)}this.plugins=await Promise.all(o)}async getPluginByUrl(e){return Promise.all([this.getPluginManifest(e),this.getPluginMainJs(e)]).then((e=>({manifest:e[0],mainJs:e[1]})))}async getPluginManifest(t){try{return(await request.get(`${t}/manifest.json`,{headers:{"Content-Type":"application/json","Cache-Control":"no-cache"}})).data}catch(e){return console.error(e),null}}async getPluginMainJs(t){try{return(await request.get(`${t}/main.js`,{headers:{"Content-Type":"text/plain","Cache-Control":"no-cache"}})).data}catch(e){return console.error(e),null}}async getPluginReadme(t){const n=`${this.getStoreUrl()}/${t}`;try{return(await request.get(`${n}/README.md`,{headers:{"Content-Type":"text/plain","Cache-Control":"no-cache"}})).data}catch(e){return console.error(e),null}}async downloadPlugin(e){await sleep(500);const t=await this.getPluginByUrl(`${this.getStoreUrl()}/${e}`),n=t.manifest,r=t.mainJs;return await Promise.all([FileClient.getInstanceApi().fileApi.putFile(`/data/plugins/${e}`,null,!0),FileClient.getInstanceApi().fileApi.putFile(`/data/plugins/${e}/manifest.json`,JSON.stringify(n),!1),FileClient.getInstanceApi().fileApi.putFile(`/data/plugins/${e}/main.js`,r,!1)])}};function create_fragment$4(e){let t,n,r,i;const o=e[3].default,a=create_slot(o,e,e[2],null);return{c(){t=element("button"),a&&a.c(),t.disabled=e[1],attr(t,"class","b3-button")},m(o,s){insert(o,t,s),a&&a.m(t,null),n=!0,r||(i=listen(t,"click",(function(){is_function(e[0])&&e[0].apply(this,arguments)})),r=!0)},p(r,[i]){e=r,a&&a.p&&(!n||4&i)&&update_slot_base(a,o,e,e[2],n?get_slot_changes(o,e[2],i,null):get_all_dirty_from_scope(e[2]),null),(!n||2&i)&&(t.disabled=e[1])},i(e){n||(transition_in(a,e),n=!0)},o(e){transition_out(a,e),n=!1},d(e){e&&detach(t),a&&a.d(e),r=!1,i()}}}function instance$4(e,t,n){let{$$slots:r={},$$scope:i}=t,{onClick:o=null}=t,{disabled:a=!1}=t;return e.$$set=e=>{"onClick"in e&&n(0,o=e.onClick),"disabled"in e&&n(1,a=e.disabled),"$$scope"in e&&n(2,i=e.$$scope)},[o,a,i,r]}Store=__decorateClass$9([injectable(),__decorateParam$6(0,inject(TYPES.StorageManager))],Store);class Button extends SvelteComponent{constructor(e){super(),init(this,e,instance$4,create_fragment$4,safe_not_equal,{onClick:0,disabled:1})}}const settingPreview_svelte_svelte_type_style_lang="";function create_if_block_4$1(e){let t,n,r,i,o,a,s=_("url")+"",c=e[0].url+"";return{c(){t=element("div"),n=text(s),r=text(": "),i=element("a"),o=text(c),attr(i,"href",a=e[0].url),attr(i,"target","_blank"),attr(i,"rel","noreferrer"),attr(t,"class","plugin-item")},m(e,a){insert(e,t,a),append(t,n),append(t,r),append(t,i),append(i,o)},p(e,t){1&t&&c!==(c=e[0].url+"")&&set_data(o,c),1&t&&a!==(a=e[0].url)&&attr(i,"href",a)},d(e){e&&detach(t)}}}function create_if_block_3$1(e){let t,n,r,i,o=_("author")+"",a=e[0].author+"";return{c(){t=element("div"),n=text(o),r=text(": "),i=text(a),attr(t,"class","plugin-item")},m(e,o){insert(e,t,o),append(t,n),append(t,r),append(t,i)},p(e,t){1&t&&a!==(a=e[0].author+"")&&set_data(i,a)},d(e){e&&detach(t)}}}function create_if_block_2$1(e){let t,n,r,i,o=_("version")+"",a=e[0].version+"";return{c(){t=element("div"),n=text(o),r=text(": "),i=text(a),attr(t,"class","plugin-item")},m(e,o){insert(e,t,o),append(t,n),append(t,r),append(t,i)},p(e,t){1&t&&a!==(a=e[0].version+"")&&set_data(i,a)},d(e){e&&detach(t)}}}function create_if_block_1$2(e){let t,n,r,i,o=_("description")+"",a=e[0].description+"";return{c(){t=element("div"),n=text(o),r=text(": "),i=text(a),attr(t,"class","plugin-item")},m(e,o){insert(e,t,o),append(t,n),append(t,r),append(t,i)},p(e,t){1&t&&a!==(a=e[0].description+"")&&set_data(i,a)},d(e){e&&detach(t)}}}function create_else_block$2(e){let t,n,r=e[2]()+"";return{c(){t=new HtmlTag(!1),n=empty(),t.a=n},m(e,i){t.m(r,e,i),insert(e,n,i)},p(e,n){4&n&&r!==(r=e[2]()+"")&&t.p(r)},d(e){e&&detach(n),e&&t.d()}}}function create_if_block$2(e){let t;return{c(){t=element("span"),t.textContent=`${_("readme")}`},m(e,n){insert(e,t,n)},p:noop,d(e){e&&detach(t)}}}function create_fragment$3(e){let t,n,r,i,o,a,s,c,l,u,d,p,f,h,g,m,y,v,b,w,E,S,$,A,T,P,O=e[0].name+"",I=e[0].key+"",N=_("goBack")+"",R=e[0].url&&create_if_block_4$1(e),k=e[0].author&&create_if_block_3$1(e),C=e[0].version&&create_if_block_2$1(e),x=e[0].description&&create_if_block_1$2(e);function L(e,t){return e[1]?create_if_block$2:create_else_block$2}let D=L(e),B=D(e);return{c(){t=element("div"),n=element("div"),r=element("div"),i=element("div"),o=text(O),a=space(),s=element("div"),c=text("("),l=text(I),u=text(")"),d=space(),p=element("button"),f=svg_element("svg"),h=svg_element("use"),g=text(N),m=space(),y=element("div"),R&&R.c(),v=space(),k&&k.c(),b=space(),C&&C.c(),w=space(),x&&x.c(),E=space(),S=element("hr"),$=space(),A=element("div"),B.c(),attr(i,"class","plugin-name svelte-bj9chc"),attr(s,"class","plugin-key svelte-bj9chc"),xlink_attr(h,"xlink:href","#iconBack"),attr(f,"class","go-back-icon svelte-bj9chc"),attr(p,"class","go-back b3-button svelte-bj9chc"),attr(r,"class","plugin-info svelte-bj9chc"),attr(y,"class","plugin-manifest svelte-bj9chc"),attr(n,"class","plugin-basic"),attr(A,"class","plugin-readme b3-typography svelte-bj9chc"),attr(t,"class","plugin-detail svelte-bj9chc")},m(_,O){insert(_,t,O),append(t,n),append(n,r),append(r,i),append(i,o),append(r,a),append(r,s),append(s,c),append(s,l),append(s,u),append(r,d),append(r,p),append(p,f),append(f,h),append(p,g),append(n,m),append(n,y),R&&R.m(y,null),append(y,v),k&&k.m(y,null),append(y,b),C&&C.m(y,null),append(y,w),x&&x.m(y,null),append(t,E),append(t,S),append(t,$),append(t,A),B.m(A,null),T||(P=listen(p,"click",e[5]),T=!0)},p(e,[t]){1&t&&O!==(O=e[0].name+"")&&set_data(o,O),1&t&&I!==(I=e[0].key+"")&&set_data(l,I),e[0].url?R?R.p(e,t):(R=create_if_block_4$1(e),R.c(),R.m(y,v)):R&&(R.d(1),R=null),e[0].author?k?k.p(e,t):(k=create_if_block_3$1(e),k.c(),k.m(y,b)):k&&(k.d(1),k=null),e[0].version?C?C.p(e,t):(C=create_if_block_2$1(e),C.c(),C.m(y,w)):C&&(C.d(1),C=null),e[0].description?x?x.p(e,t):(x=create_if_block_1$2(e),x.c(),x.m(y,null)):x&&(x.d(1),x=null),D===(D=L(e))&&B?B.p(e,t):(B.d(1),B=D(e),B&&(B.c(),B.m(A,null)))},i:noop,o:noop,d(e){e&&detach(t),R&&R.d(),k&&k.d(),C&&C.d(),x&&x.d(),B.d(),T=!1,P()}}}function instance$3(e,t,n){let r;const i=createEventDispatcher();let o=!0,{plugin:a}=t;let s;const c=window.Lute.New();onMount((()=>{(async()=>{n(4,s=await container.get("Store").getPluginReadme(a.key)),n(1,o=!1)})()}));const l=()=>{i("goback")};return e.$$set=e=>{"plugin"in e&&n(0,a=e.plugin)},e.$$.update=()=>{16&e.$$.dirty&&n(2,r=()=>s?c.Md2HTML(s):"")},[a,o,r,l,s,()=>l()]}class Setting_preview extends SvelteComponent{constructor(e){super(),init(this,e,instance$3,create_fragment$3,safe_not_equal,{plugin:0})}}function get_each_context$1(e,t,n){const r=e.slice();return r[11]=t[n],r}function create_else_block_2(e){let t,n;return t=new Setting_preview({props:{plugin:e[3]}}),t.$on("goback",e[9]),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(e,n){const r={};8&n&&(r.plugin=e[3]),t.$set(r)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_if_block_1$1(e){let t,n,r=e[0],i=[];for(let a=0;a<r.length;a+=1)i[a]=create_each_block$1(get_each_context$1(e,r,a));const o=e=>transition_out(i[e],1,1,(()=>{i[e]=null}));return{c(){t=element("div");for(let e=0;e<i.length;e+=1)i[e].c();attr(t,"class","fn__flex-1")},m(e,r){insert(e,t,r);for(let n=0;n<i.length;n+=1)i[n].m(t,null);n=!0},p(e,n){if(53&n){let a;for(r=e[0],a=0;a<r.length;a+=1){const o=get_each_context$1(e,r,a);i[a]?(i[a].p(o,n),transition_in(i[a],1)):(i[a]=create_each_block$1(o),i[a].c(),transition_in(i[a],1),i[a].m(t,null))}for(group_outros(),a=r.length;a<i.length;a+=1)o(a);check_outros()}},i(e){if(!n){for(let e=0;e<r.length;e+=1)transition_in(i[e]);n=!0}},o(e){i=i.filter(Boolean);for(let t=0;t<i.length;t+=1)transition_out(i[t]);n=!1},d(e){e&&detach(t),destroy_each(i,e)}}}function create_if_block$1(e){let t;return{c(){t=element("div"),t.textContent=`${_("loading")}`},m(e,n){insert(e,t,n)},p:noop,i:noop,o:noop,d(e){e&&detach(t)}}}function create_else_block_1(e){let t,n;function r(){return e[8](e[11])}return t=new Button({props:{onClick:r,$$slots:{default:[create_default_slot_3]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(n,i){e=n;const o={};1&i&&(o.onClick=r),16384&i&&(o.$$scope={dirty:i,ctx:e}),t.$set(o)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_if_block_3(e){let t,n,r,i;const o=[create_if_block_4,create_else_block$1],a=[];function s(e,t){return e[11].needUpgrade?0:1}return t=s(e),n=a[t]=o[t](e),{c(){n.c(),r=empty()},m(e,n){a[t].m(e,n),insert(e,r,n),i=!0},p(e,i){let c=t;t=s(e),t===c?a[t].p(e,i):(group_outros(),transition_out(a[c],1,1,(()=>{a[c]=null})),check_outros(),n=a[t],n?n.p(e,i):(n=a[t]=o[t](e),n.c()),transition_in(n,1),n.m(r.parentNode,r))},i(e){i||(transition_in(n),i=!0)},o(e){transition_out(n),i=!1},d(e){a[t].d(e),e&&detach(r)}}}function create_if_block_2(e){let t,n;return t=new Button({props:{disabled:!0,$$slots:{default:[create_default_slot]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(e,n){const r={};16384&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_default_slot_3(e){let t,n=_("download")+"";return{c(){t=text(n)},m(e,n){insert(e,t,n)},p:noop,d(e){e&&detach(t)}}}function create_else_block$1(e){let t,n;return t=new Button({props:{disabled:!0,$$slots:{default:[create_default_slot_2]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(e,n){const r={};16384&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_if_block_4(e){let t,n;function r(){return e[7](e[11])}return t=new Button({props:{onClick:r,$$slots:{default:[create_default_slot_1]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(n,i){e=n;const o={};1&i&&(o.onClick=r),16384&i&&(o.$$scope={dirty:i,ctx:e}),t.$set(o)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_default_slot_2(e){let t,n=_("downloaded")+"";return{c(){t=text(n)},m(e,n){insert(e,t,n)},p:noop,d(e){e&&detach(t)}}}function create_default_slot_1(e){let t,n=_("upgrade")+"";return{c(){t=text(n)},m(e,n){insert(e,t,n)},p:noop,d(e){e&&detach(t)}}}function create_default_slot(e){let t,n=_("downloading")+"";return{c(){t=text(n)},m(e,n){insert(e,t,n)},p:noop,d(e){e&&detach(t)}}}function create_each_block$1(e){let t,n,r,i,o,a,s,c,l,u,d,p,f,h,g,m,_,y,v=e[11].name+"",b=e[11].version+"",w=(e[11].description||"")+"";function E(...t){return e[6](e[11],...t)}const S=[create_if_block_2,create_if_block_3,create_else_block_1],$=[];function A(e,t){return e[2][e[11].key]?0:e[11].isExist?1:2}return f=A(e),h=$[f]=S[f](e),{c(){t=element("label"),n=element("div"),r=element("a"),i=text(v),o=space(),a=text(b),s=space(),c=element("div"),l=text(w),u=space(),d=element("span"),p=space(),h.c(),g=space(),attr(r,"href","javascript:void(0)"),attr(r,"class",""),attr(c,"class","b3-label__text"),attr(n,"class","fn__flex-1"),attr(d,"class","fn__space"),attr(t,"class","fn__flex b3-label")},m(e,h){insert(e,t,h),append(t,n),append(n,r),append(r,i),append(n,o),append(n,a),append(n,s),append(n,c),append(c,l),append(t,u),append(t,d),append(t,p),$[f].m(t,null),append(t,g),m=!0,_||(y=listen(r,"click",E),_=!0)},p(n,r){e=n,(!m||1&r)&&v!==(v=e[11].name+"")&&set_data(i,v),(!m||1&r)&&b!==(b=e[11].version+"")&&set_data(a,b),(!m||1&r)&&w!==(w=(e[11].description||"")+"")&&set_data(l,w);let o=f;f=A(e),f===o?$[f].p(e,r):(group_outros(),transition_out($[o],1,1,(()=>{$[o]=null})),check_outros(),h=$[f],h?h.p(e,r):(h=$[f]=S[f](e),h.c()),transition_in(h,1),h.m(t,g))},i(e){m||(transition_in(h),m=!0)},o(e){transition_out(h),m=!1},d(e){e&&detach(t),$[f].d(),_=!1,y()}}}function create_fragment$2(e){let t,n,r,i;const o=[create_if_block$1,create_if_block_1$1,create_else_block_2],a=[];function s(e,t){return e[1]?0:e[3]?2:1}return n=s(e),r=a[n]=o[n](e),{c(){t=element("div"),r.c(),attr(t,"class","b3-label fn__flex")},m(e,r){insert(e,t,r),a[n].m(t,null),i=!0},p(e,[i]){let c=n;n=s(e),n===c?a[n].p(e,i):(group_outros(),transition_out(a[c],1,1,(()=>{a[c]=null})),check_outros(),r=a[n],r?r.p(e,i):(r=a[n]=o[n](e),r.c()),transition_in(r,1),r.m(t,null))},i(e){i||(transition_in(r),i=!0)},o(e){transition_out(r),i=!1},d(e){e&&detach(t),a[n].d()}}}function instance$2(e,t,n){const r=container.get(TYPES.Store);let i=[],o=!0;const a={};onMount((async()=>{n(0,i=await r.loadPlugins()),n(1,o=!1)}));const s=async e=>{if(!a[e])try{n(2,a[e]=!0,a),await r.downloadPlugin(e);const t=i.find((t=>t.key===e));t&&(t.isExist=!0,t.needUpgrade=!1)}finally{n(2,a[e]=!1,a)}};let c=null;const l=(e,t)=>{n(3,c=t),e.stopPropagation(),e.preventDefault()};return[i,o,a,c,s,l,(e,t)=>l(t,e),e=>s(e.key),e=>s(e.key),()=>n(3,c=null)]}class Setting_store extends SvelteComponent{constructor(e){super(),init(this,e,instance$2,create_fragment$2,safe_not_equal,{})}}function create_fragment$1(e){let t;return{c(){t=element("div"),attr(t,"id","setting-custom-render")},m(e,n){insert(e,t,n)},p:noop,i:noop,o:noop,d(e){e&&detach(t)}}}function instance$1(e,t,n){let r,{render:i}=t;return onMount((()=>{n(1,r=document.createElement("div")),document.getElementById("setting-custom-render").appendChild(r),i(r)})),e.$$set=e=>{"render"in e&&n(0,i=e.render)},e.$$.update=()=>{if(3&e.$$.dirty){document.getElementById("setting-custom-render")&&(r&&r.remove(),n(1,r=document.createElement("div")),document.getElementById("setting-custom-render").appendChild(r),i(r))}},[i,r]}class Setting_custom extends SvelteComponent{constructor(e){super(),init(this,e,instance$1,create_fragment$1,safe_not_equal,{render:0})}}function get_each_context(e,t,n){const r=e.slice();return r[13]=t[n],r}function get_each_context_1(e,t,n){const r=e.slice();return r[13]=t[n],r}function create_each_block_1(e){let t,n,r,i,o,a,s=e[13].name+"";function c(){return e[6](e[13])}return{c(){t=element("li"),n=element("span"),r=text(s),attr(n,"class","b3-list-item__text"),attr(t,"data-name",e[13].key),attr(t,"class",i=e[0].key===e[13].key?"b3-list-item--focus b3-list-item b3-list-item--big":"b3-list-item b3-list-item--big")},m(e,i){insert(e,t,i),append(t,n),append(n,r),o||(a=listen(t,"click",c),o=!0)},p(n,r){e=n,1&r&&i!==(i=e[0].key===e[13].key?"b3-list-item--focus b3-list-item b3-list-item--big":"b3-list-item b3-list-item--big")&&attr(t,"class",i)},d(e){e&&detach(t),o=!1,a()}}}function create_if_block_1(e){let t;return{c(){t=element("hr"),set_style(t,"margin","12px")},m(e,n){insert(e,t,n)},d(e){e&&detach(t)}}}function create_each_block(e){let t,n,r,i,o,a,s,c,l=e[13].name+"";function u(){return e[7](e[13])}return{c(){t=element("li"),n=element("span"),r=text(l),i=space(),attr(n,"class","b3-list-item__text"),attr(t,"data-name",o=e[13].key),attr(t,"class",a=e[0].key===e[13].key?"b3-list-item--focus b3-list-item b3-list-item--big":"b3-list-item b3-list-item--big")},m(e,o){insert(e,t,o),append(t,n),append(n,r),append(t,i),s||(c=listen(t,"click",u),s=!0)},p(n,i){e=n,2&i&&l!==(l=e[13].name+"")&&set_data(r,l),2&i&&o!==(o=e[13].key)&&attr(t,"data-name",o),3&i&&a!==(a=e[0].key===e[13].key?"b3-list-item--focus b3-list-item b3-list-item--big":"b3-list-item b3-list-item--big")&&attr(t,"class",a)},d(e){e&&detach(t),s=!1,c()}}}function create_else_block(e){let t,n;return t=new Setting_custom({props:{render:e[0].render}}),{c(){create_component(t.$$.fragment)},m(e,r){mount_component(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.render=e[0].render),t.$set(r)},i(e){n||(transition_in(t.$$.fragment,e),n=!0)},o(e){transition_out(t.$$.fragment,e),n=!1},d(e){destroy_component(t,e)}}}function create_if_block(e){let t,n,r;var i=e[0].component;return i&&(t=construct_svelte_component(i,{}),t.$on("update",e[8])),{c(){t&&create_component(t.$$.fragment),n=empty()},m(e,i){t&&mount_component(t,e,i),insert(e,n,i),r=!0},p(e,r){if(i!==(i=e[0].component)){if(t){group_outros();const e=t;transition_out(e.$$.fragment,1,0,(()=>{destroy_component(e,1)})),check_outros()}i?(t=construct_svelte_component(i,{}),t.$on("update",e[8]),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,n.parentNode,n)):t=null}},i(e){r||(t&&transition_in(t.$$.fragment,e),r=!0)},o(e){t&&transition_out(t.$$.fragment,e),r=!1},d(e){e&&detach(n),t&&destroy_component(t,e)}}}function create_fragment(e){let t,n,r,i,o,a,s,c,l,u,d,p=e[2],f=[];for(let b=0;b<p.length;b+=1)f[b]=create_each_block_1(get_each_context_1(e,p,b));let h=e[1].length>0&&create_if_block_1(),g=e[1],m=[];for(let b=0;b<g.length;b+=1)m[b]=create_each_block(get_each_context(e,g,b));const _=[create_if_block,create_else_block],y=[];function v(e,t){return"internal"===e[0].type?0:1}return c=v(e),l=y[c]=_[c](e),{c(){t=element("div"),n=element("div"),r=element("ul");for(let e=0;e<f.length;e+=1)f[e].c();i=space(),h&&h.c(),o=space();for(let e=0;e<m.length;e+=1)m[e].c();a=space(),s=element("div"),l.c(),attr(r,"class","b3-tab-bar b3-list b3-list--background"),set_style(r,"height","unset",1),attr(s,"class","config__tab-container"),set_style(s,"height","unset",1),attr(s,"data-name",u=e[0].key),attr(n,"class","fn__flex-1 fn__flex config__panel"),attr(t,"class","fn__flex-column"),set_style(t,"border-radius","4px"),set_style(t,"overflow","auto"),set_style(t,"position","relative"),set_style(t,"height","80vh")},m(e,l){insert(e,t,l),append(t,n),append(n,r);for(let t=0;t<f.length;t+=1)f[t].m(r,null);append(r,i),h&&h.m(r,null),append(r,o);for(let t=0;t<m.length;t+=1)m[t].m(r,null);append(n,a),append(n,s),y[c].m(s,null),d=!0},p(e,[t]){if(13&t){let n;for(p=e[2],n=0;n<p.length;n+=1){const o=get_each_context_1(e,p,n);f[n]?f[n].p(o,t):(f[n]=create_each_block_1(o),f[n].c(),f[n].m(r,i))}for(;n<f.length;n+=1)f[n].d(1);f.length=p.length}if(e[1].length>0?h||(h=create_if_block_1(),h.c(),h.m(r,o)):h&&(h.d(1),h=null),11&t){let n;for(g=e[1],n=0;n<g.length;n+=1){const i=get_each_context(e,g,n);m[n]?m[n].p(i,t):(m[n]=create_each_block(i),m[n].c(),m[n].m(r,null))}for(;n<m.length;n+=1)m[n].d(1);m.length=g.length}let n=c;c=v(e),c===n?y[c].p(e,t):(group_outros(),transition_out(y[n],1,1,(()=>{y[n]=null})),check_outros(),l=y[c],l?l.p(e,t):(l=y[c]=_[c](e),l.c()),transition_in(l,1),l.m(s,null)),(!d||1&t&&u!==(u=e[0].key))&&attr(s,"data-name",u)},i(e){d||(transition_in(l),d=!0)},o(e){transition_out(l),d=!1},d(e){e&&detach(t),destroy_each(f,e),h&&h.d(),destroy_each(m,e),y[c].d()}}}function instance(e,t,n){let r;const i=[{key:"common",name:_("menu_common"),type:"internal",component:Setting_common},{key:"list",name:_("menu_list"),type:"internal",component:Setting_list},{key:"store",name:_("menu_store"),type:"internal",component:Setting_store}],o=container.get(TYPES.SettingManager),a=container.get(TYPES.StorageManager).getThirdPartyPlugins();let s=o.getSettingRenders();const c=e=>n(0,u=e),l=()=>{n(5,s=[...o.getSettingRenders()])};let u=i[0];return e.$$.update=()=>{32&e.$$.dirty&&n(1,r=s.map((e=>{return{key:e.key,name:(t=e.key,null==(n=a.find((e=>e.key===t)))?void 0:n.name),component:Setting_common,type:"custom",render:e.value};var t,n})))},[u,r,i,c,l,s,e=>c(e),e=>c(e),()=>l()]}class Setting extends SvelteComponent{constructor(e){super(),init(this,e,instance,create_fragment,safe_not_equal,{})}}class InternalSettingPlugin extends Plugin{constructor(){super(),this.svg='<svg t="1679703027227" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="24715" width="200" height="200"><path d="M512 1023.99984a75.519988 75.519988 0 0 1-53.679992-22.207997L22.368077 565.455912c-29.487995-29.679995-29.487995-77.919988-0.064-107.519984l159.711975-159.839975a31.951995 31.951995 0 0 1 54.047991 28.207996 131.10398 131.10398 0 0 0-2.368 23.135996c0 69.951989 56.895991 128.11198 126.847981 128.11198 69.999989 0 121.119981-58.159991 121.119981-128.11198 0-70.079989-51.119992-127.07198-121.119981-127.07198a130.87998 130.87998 0 0 0-23.007997 2.384 31.759995 31.759995 0 0 1-33.919994-16.671998 31.999995 31.999995 0 0 1 5.743999-37.423994l148.895976-149.103976c28.847995-28.719996 78.719988-28.655996 107.423984-0.064l109.023983 109.183983C697.439971 59.887991 763.871961 8.479999 842.015948 8.479999c96.911985 0 175.743973 78.959988 175.743973 175.967972 0 78.239988-51.295992 144.719977-122.063981 167.471974l105.887984 105.951983a76.351988 76.351988 0 0 1 0.031999 107.551984L565.743992 1001.775843A75.759988 75.759988 0 0 1 512 1023.99984z" fill="" p-id="24716"></path></svg>'}onload(){const e=document.createElement("button");e.setAttribute("aria-label",_("plugin_system")),e.classList.add("toolbar__item","b3-tooltips","b3-tooltips__sw"),e.insertAdjacentHTML("beforeend",this.svg),e.addEventListener("click",(e=>{new Menu("internalSettingButton").addItem(new MenuItem({label:_("plugin_system_setting"),icon:"iconEdit",click:()=>showSettingDialog()})).addSeparator().addItem(new MenuItem({label:_("reload"),icon:"iconRefresh",click:()=>window.location.reload()})).showAtMouseEvent(e),e.stopPropagation()})),addToolbarRight(e),this.registerCommand({command:"Show plugin system conifg",description:_("show_plugin_system_config"),shortcut:"command+option+p",callback:()=>showSettingDialog()}),this.registerCommand({command:"Reload Window",description:_("reload_window"),callback:()=>window.location.reload()})}}function showSettingDialog(){new Dialog({title:_("plugin_system_setting"),content:'<div id="plugin-settings"></div>',width:"90vw",height:"80vh"}),setTimeout((()=>{new Setting({target:document.getElementById("plugin-settings")})}))}const internalPlugins=[{key:"setting",name:"setting",plugin:InternalSettingPlugin,enabled:!0,hidden:!0,version:"1.0.0"},{key:"commandPanel",name:"commandPanel",plugin:CommandPanelPlugin,enabled:!0,hidden:!0,version:"1.0.0"}];function isHighSurrogate$1(e){return e>=55296&&e<=56319}function isLowSurrogate$1(e){return e>=56320&&e<=57343}var truncate$2=function(e,t,n){if("string"!=typeof t)throw new Error("Input must be string");for(var r,i,o=t.length,a=0,s=0;s<o;s+=1){if(r=t.charCodeAt(s),i=t[s],isHighSurrogate$1(r)&&isLowSurrogate$1(t.charCodeAt(s+1))&&(i+=t[s+=1]),(a+=e(i))===n)return t.slice(0,s+1);if(a>n)return t.slice(0,s-i.length+1)}return t};function isHighSurrogate(e){return e>=55296&&e<=56319}function isLowSurrogate(e){return e>=56320&&e<=57343}var browser$1=function(e){if("string"!=typeof e)throw new Error("Input must be string");for(var t=e.length,n=0,r=null,i=null,o=0;o<t;o++)isLowSurrogate(r=e.charCodeAt(o))?null!=i&&isHighSurrogate(i)?n+=1:n+=3:r<=127?n+=1:r>=128&&r<=2047?n+=2:r>=2048&&r<=65535&&(n+=3),i=r;return n},truncate$1=truncate$2,getLength=browser$1,browser=truncate$1.bind(null,getLength),truncate=browser,illegalRe=/[\/\?<>\\:\*\|"]/g,controlRe=/[\x00-\x1f\x80-\x9f]/g,reservedRe=/^\.+$/,windowsReservedRe=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,windowsTrailingRe=/[\. ]+$/;function sanitize(e,t){if("string"!=typeof e)throw new Error("Input must be string");var n=e.replace(illegalRe,t).replace(controlRe,t).replace(reservedRe,t).replace(windowsReservedRe,t).replace(windowsTrailingRe,t);return truncate(n,255)}var sanitizeFilename=function(e,t){var n=t&&t.replacement||"",r=sanitize(e,n);return""===n?r:sanitize(r,"")},__defProp$8=Object.defineProperty,__getOwnPropDesc$8=Object.getOwnPropertyDescriptor,__decorateClass$8=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$8(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$8(t,n,o),o},__decorateParam$5=(e,t)=>(n,r)=>t(n,r,e);let StorageManager=class{constructor(e){this.config=Object.assign({},defaultConfig),this.pluginFileManager=e}get(e){return this.config[e]}async set(e,t){return this.config[e]=t,setStorageVal(e,t)}async initStorage(){const e=await getLocalStorage(),t=Object.keys(defaultConfig);for(const n of t)void 0!==e[n]?this.config[n]=e[n]:await setStorageVal(n,defaultConfig[n]);return this.thirdPartyPlugins=await this.pluginFileManager.getAllPlugins(),this.internalPlugins=[...internalPlugins],this.init3rdPartyEnabled(),this.initInternalEnabled(),await this.savePluginsEnabled(),this}init3rdPartyEnabled(){const e=this.get(PLUGIN_SYSTEM_THIRD_PARTY_PLUGIN);for(const t of e)for(const e of this.thirdPartyPlugins)if(e.key===t.key){e.enabled=t.enabled||!1;break}}initInternalEnabled(){const e=this.get(PLUGIN_SYSTEM_PLUGIN);for(const t of e)for(const e of this.internalPlugins)if(e.key===t.key){e.enabled=t.enabled||!1;break}}getPlugins(){return[...this.internalPlugins,...this.thirdPartyPlugins]}getInternalPlugins(){return this.internalPlugins}getThirdPartyPlugins(){return this.thirdPartyPlugins}getPluginByKey(e){return this.getPlugins().find((t=>t.key===e))}async setPluginEnabled(e,t){for(const n of[...this.internalPlugins,...this.thirdPartyPlugins])if(n.key===e){n.enabled=t;break}await this.savePluginsEnabled()}async setSafeModeEnabled(e){return this.set(PLUGIN_SYSTEM_SAFE_MODE_ENABLED,e)}async savePluginsEnabled(){return await this.set(PLUGIN_SYSTEM_PLUGIN,this.internalPlugins.map((e=>({key:e.key,enabled:e.enabled})))),this.set(PLUGIN_SYSTEM_THIRD_PARTY_PLUGIN,this.thirdPartyPlugins.map((e=>({key:e.key,enabled:e.enabled}))))}async setPluginStorage(t,n,r){try{if(this.isFileNameIllegal(n))return void showErrorMessage(`插件${t}存储文件名不合法`);await this.addPluginStorageFolderIfNotExist(t),await FileClient.getInstanceApi().fileApi.putFile(`/data/plugins/.storage/${t}/${n}`,r)}catch(e){showErrorMessage(`插件${t}存储保存失败`,2e3)}}async getPluginStorage(t,n){try{return await FileClient.getInstanceApi().fileApi.getFile(`/data/plugins/.storage/${t}/${n}`)}catch(e){return showErrorMessage(`插件${t}存储保存失败`,2e3),null}}async uninstallPlugin(e){await FileClient.getInstanceApi().fileApi.removeFile(`/data/plugins/${e}`),await FileClient.getInstanceApi().fileApi.removeFile(`/data/plugins//.storage/${e}`)}async addPluginStorageFolderIfNotExist(e){const t=`/data/plugins/.storage/${e}`;await FileClient.getInstanceApi().fileApi.putFile(t,null,!0)}isFileNameIllegal(e){return e!==sanitizeFilename(e)}};StorageManager=__decorateClass$8([injectable(),__decorateParam$5(0,inject(TYPES.PluginFileManager))],StorageManager);var __defProp$7=Object.defineProperty,__getOwnPropDesc$7=Object.getOwnPropertyDescriptor,__decorateClass$7=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$7(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$7(t,n,o),o},__decorateParam$4=(e,t)=>(n,r)=>t(n,r,e);let PluginSystem=class{constructor(e,t,n,r,i){this.pluginLoader=e,this.pslm=t,this.storageManager=n,this.commandManager=r,this.store=i,this.version=VERSION$1}async init(){await this.storageManager.initStorage();const e=this.storageManager.getInternalPlugins();this.pluginLoader.loadEnabledPlugins(e),log(`Loading internal enabled plugins: ${e.map((e=>e.key)).join(",")}`);if(!this.storageManager.get(PLUGIN_SYSTEM_SAFE_MODE_ENABLED)){const e=this.storageManager.getThirdPartyPlugins();log(`Loading 3rd party enabled plugins: ${e.map((e=>e.key)).join(",")}`),this.pluginLoader.loadEnabledPlugins(e)}return this.pslm.localCacheInit(),this}async loadPlugin(e){this.storageManager.setPluginEnabled(e,!0);const t=this.storageManager.getPluginByKey(e);this.pluginLoader.loadPlugin(t)}async unloadPlugin(e){this.storageManager.setPluginEnabled(e,!1),this.pluginLoader.unloadPlugin(e)}async turnOffSafeMode(){this.storageManager.setSafeModeEnabled(!1);const e=this.storageManager.getThirdPartyPlugins();return this.pluginLoader.loadEnabledPlugins(e)}async turnOnSafeMode(){this.storageManager.setSafeModeEnabled(!0);const e=this.storageManager.getThirdPartyPlugins();return this.pluginLoader.unloadThirdPartyPlugins(e)}};PluginSystem=__decorateClass$7([injectable(),__decorateParam$4(0,inject(TYPES.PluginLoader)),__decorateParam$4(1,inject(TYPES.SystemManager)),__decorateParam$4(2,inject(TYPES.StorageManager)),__decorateParam$4(3,inject(TYPES.CommandManager)),__decorateParam$4(4,inject(TYPES.Store))],PluginSystem);const migrate=async()=>{const e="plugin-system-bazzar",t="(async () => {\n        window.pluginSystemSource = 'bazzar';\n        const response = await fetch('/api/file/getFile', {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            body: JSON.stringify({ path: '/data/widgets/插件系统/plugin.js' }),\n        });\n        const js = await response.text();\n        eval(js);\n    })()",n=async(e,t)=>(await fetch(e,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(t)})).json(),r=(await n("/api/snippet/getSnippet",{enabled:2,type:"all"})).data.snippets;for(const i of r)if("js"===i.type&&(-1!==i.content.indexOf("https://gitee.com/zuoez02/siyuan-plugin-system/raw/main/main.js")&&(i.enabled=!1),i.name===e))return i.enabled=!0,i.content=t,void(await n("/api/snippet/setSnippet",{snippets:r}));r.splice(0,0,{id:"20230324100959-plugind",name:e,type:"js",enabled:!0,content:t}),await n("/api/snippet/setSnippet",{snippets:r}),setTimeout((()=>window.parent.location.reload()),1e3)};var __defProp$6=Object.defineProperty,__getOwnPropDesc$6=Object.getOwnPropertyDescriptor,__decorateClass$6=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$6(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$6(t,n,o),o},__decorateParam$3=(e,t)=>(n,r)=>t(n,r,e);const pluginScriptPosition=PLUGIN_SYS_ABS_PATH;let SystemManager=class{constructor(e){this.storageMangager=e}async saveToLocal(e,t){FileClient.getInstanceApi().fileApi.putFile(e,t)}async localCacheInit(){try{return void(null!==FileClient.getInstanceApi().fileApi.getFile(pluginScriptPosition)&&this.delayAutoUpgrade())}catch(e){log("Plugin system not found")}const t=window.siyuanPluginScript;t&&(await this.saveToLocal(pluginScriptPosition,t),this.delayAutoUpgrade())}delayAutoUpgrade(){return!1}async tryUpgrade(){if("bazzar"===window.pluginSystemSource)return log("Plugin installed from bazzar version, upgrade skip"),void this.compareWidgetVersion();log("Try getting online version");const e=await this.getOnlineVersion();e!==VERSION$1?(showInfoMessage(`插件系统获取到最新版本 ${e}，即将自动更新`),log("Online Version: "+e+", local version: "+VERSION$1),log("Downloading new version of Plugin System"),this.upgrade()):log("Version is "+VERSION$1+", OK")}async getOnlineVersion(){return fetch(VERSION_URL,{cache:"no-cache"}).then((e=>e.text()))}async upgrade(){const e=await fetch(SCRIPT_URL,{cache:"no-cache"}).then((e=>e.text()));e&&(migrate(),showInfoMessage("插件系统升级中，即将自动重载..."),await this.saveToLocal(pluginScriptPosition,e),log("Plugin system upgraded, reloading..."),setTimeout((()=>reloadWindow()),3e3))}async compareWidgetVersion(){const e=(await getBazzarWidget()).packages.find((e=>"插件系统"===e.name));if(!e)return;const t=e.version;new semver.SemVer(VERSION$1).compare(t)<0&&new Notification({message:_("new_version_widget"),type:"info"}).show()}};SystemManager=__decorateClass$6([injectable(),__decorateParam$3(0,inject(TYPES.StorageManager))],SystemManager);var __defProp$5=Object.defineProperty,__getOwnPropDesc$5=Object.getOwnPropertyDescriptor,__decorateClass$5=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$5(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$5(t,n,o),o},__decorateParam$2=(e,t)=>(n,r)=>t(n,r,e);let components,PluginLoader=class{constructor(e){this.pluginFileManager=e,this.loadedPlugins=new Map}async loadEnabledPlugins(e){if(e&&e.length)for(const t of e)t.enabled&&await this.loadPlugin(t)}async loadAllInternalPlugins(){internalPlugins.forEach((async e=>{const t=new e.plugin;if(!(t instanceof Plugin))throw new Error(`Failed to load plugin ${e.name}`);log(`Load internal plugin: ${e.key}(${e.name})`),this.addAdditionalMethod(t,e.key,e.name),await t.onload(),this.loadedPlugins.set(e.key,t)}))}async loadAllLocalPlugins(){const e=await this.pluginFileManager.getAllPlugins();if(e)for(const t of e)await this.loadPlugin(t)}async loadPlugin(plugin){if(components||this.generateRequiredModules(),!plugin.enabled||!plugin.plugin&&!plugin.script)return;if(plugin.plugin){const e=new plugin.plugin;if(!(e instanceof Plugin))throw new Error(`Failed to load plugin ${plugin.name}`);return log(`Load internal plugin: ${plugin.key}(${plugin.name})`),this.addAdditionalMethod(e,plugin.key,plugin.name),await e.onload(),void this.loadedPlugins.set(plugin.key,e)}const exports={},module={exports:exports};function run(script,name){return eval("(function anonymous(require,module,exports){".concat(script,"\n})\n//# sourceURL=").concat(name,"\n"))}const __require=e=>{if(components[e])return components[e];throw new Error(`module ${e} not found`)},pluginName=plugin.key;try{run(plugin.script,plugin.key)(__require,module,exports)}catch(e){return void error("Error plugin:"+plugin.key+" ->",e)}let pluginConstructor;if(!(pluginConstructor=(module.exports||exports).default||module.exports))throw new Error(`Failed to load plugin ${pluginName}. No exports detected.`);const plug=new pluginConstructor;if(!(plug instanceof Plugin))throw new Error(`Failed to load plugin ${pluginName}`);this.addAdditionalMethod(plug,plugin.key,pluginName);try{await plug.onload(),this.loadedPlugins.set(plugin.key,plug)}catch(e){error("Error plugin:"+plugin.key+" ->",e)}}async unloadPlugin(e){const t=this.loadedPlugins.get(e);t&&(t.onunload(),container.get(TYPES.CommandManager).unregisterCommandByPlugin(e),container.get(TYPES.SettingManager).unregisterSetting(e),this.loadedPlugins.delete(e))}async unloadThirdPartyPlugins(e){const t=e.filter((e=>e.enabled)).map((e=>e.key));for(const n of t)log(`unload third party plugin: ${n}`),await this.unloadPlugin(n)}async loadThirdPartyEnabledPlugins(e){return this.loadEnabledPlugins(e)}generateRequiredModules(){components={siyuan:api,axios:axios$1}}addAdditionalMethod(e,t,n){e.registerCommand=e=>{container.get(TYPES.CommandManager).registerCommand({...e,plugin:t,pluginName:n})};const r=container.get(TYPES.StorageManager);e.writeStorage=async(e,n)=>await r.setPluginStorage(t,e,n),e.loadStorage=async e=>await r.getPluginStorage(t,e),e.registerSettingRender=e=>{container.get(TYPES.SettingManager).registerSetting(t,e)}}};PluginLoader=__decorateClass$5([injectable(),__decorateParam$2(0,inject(TYPES.PluginFileManager))],PluginLoader);var __defProp$4=Object.defineProperty,__getOwnPropDesc$4=Object.getOwnPropertyDescriptor,__decorateClass$4=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$4(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$4(t,n,o),o};let PluginFileManager=class{async scanPlugins(e){const t=await FileClient.getInstanceApi().fileApi.readDir(e);if(!t)return[];const n=t,r=[];for(const i of n)i.name.startsWith(".")||i.isDir&&await isExists(`/data/plugins/${i.name}/manifest.json`)&&await isExists(`/data/plugins/${i.name}/main.js`)&&r.push(`/data/plugins/${i.name}`);return r}async getFileContent(e){return await FileClient.getInstanceApi().fileApi.getFile(e)||""}async getManifest(t){const n=await this.getFileContent(t);try{return JSON.parse(n)}catch(e){return error("loading manifest: "+t,e),null}}async getScript(e){return await this.getFileContent(e)}async getAllPlugins(){const e=await this.scanPlugins("/data/plugins");if(!e||!e.length)return log("No plugin found in /data/plugins"),[];const t=[];for(const n of e){log("Reading plugin from filesystem: "+n);const e=this.getFolderName(n),r=async()=>{const[t,r]=await Promise.all([this.getManifest(`${n}/manifest.json`),this.getScript(`${n}/main.js`)]);return{...t,script:r,enabled:!1,key:e}};t.push(r())}return await Promise.all(t)||[]}getFolderName(e){const t=e.split("/");for(let n=t.length-1;n>=0;n--)if(t[n])return t[n];return""}};PluginFileManager=__decorateClass$4([injectable()],PluginFileManager);var __defProp$3=Object.defineProperty,__getOwnPropDesc$3=Object.getOwnPropertyDescriptor,__decorateClass$3=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$3(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$3(t,n,o),o};let EventBus=class{constructor(){this.eventListeners={}}destroy(){delete this.eventListeners}on(e,t){return this.eventListeners[e]||(this.eventListeners[e]=[]),this.eventListeners[e].push(t),()=>this.off(e,t)}off(e,t){if(t){for(let n=0;n<this.eventListeners[e].length;n++)if(this.eventListeners[e][n]===t)return void this.eventListeners[e].splice(n,1)}else delete this.eventListeners[e]}emit(e,...t){this.eventListeners[e]&&this.eventListeners[e].forEach((e=>{e(...t)}))}};EventBus=__decorateClass$3([injectable()],EventBus);var __defProp$2=Object.defineProperty,__getOwnPropDesc$2=Object.getOwnPropertyDescriptor,__decorateClass$2=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$2(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$2(t,n,o),o},__decorateParam$1=(e,t)=>(n,r)=>t(n,r,e);let CommandManager=class{constructor(e){this.commandList=[],this.shortcut=e}registerCommand(e){return this.commandList.some((t=>{t.plugin===e.plugin&&(t.command,e.command)}))?new Error$1("Command is already registered, do not register command repeatly"):e.shortcut&&this.commandList.some((t=>{t.shortcut,e.shortcut}))?new Warning("shortcut has already registered"):(this.commandList.push(e),this.shortcut.registerKeyboardEventFromPlugin(e),void log(`Register plugin: ${e.plugin} command: ${e.command}`))}unregisterCommandByPlugin(e){for(let t=0;t<this.commandList.length;t++)if(e===this.commandList[t].plugin){const n=this.commandList[t];log(`Unregister plugin: ${e} command: ${n.command}`),this.commandList.splice(t,1),n.shortcut&&this.shortcut.unregisterKeyboardEvent(n.shortcut)}}unregisterCommand(e){for(let t=0;t<this.commandList.length;t++)if(e.command===this.commandList[t].command&&e.plugin===this.commandList[t].plugin){this.commandList.splice(t,1);break}this.shortcut.registerKeyboardEventFromPlugin(e)}getCommands(){return this.commandList}};CommandManager=__decorateClass$2([injectable(),__decorateParam$1(0,inject(TYPES.Shortcut))],CommandManager);var isff="undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().indexOf("firefox")>0;function addEvent(e,t,n,r){e.addEventListener?e.addEventListener(t,n,r):e.attachEvent&&e.attachEvent("on".concat(t),(function(){n(window.event)}))}function getMods(e,t){for(var n=t.slice(0,t.length-1),r=0;r<n.length;r++)n[r]=e[n[r].toLowerCase()];return n}function getKeys(e){"string"!=typeof e&&(e="");for(var t=(e=e.replace(/\s/g,"")).split(","),n=t.lastIndexOf("");n>=0;)t[n-1]+=",",t.splice(n,1),n=t.lastIndexOf("");return t}function compareArray(e,t){for(var n=e.length>=t.length?e:t,r=e.length>=t.length?t:e,i=!0,o=0;o<n.length;o++)-1===r.indexOf(n[o])&&(i=!1);return i}for(var _keyMap={backspace:8,"⌫":8,tab:9,clear:12,enter:13,"↩":13,return:13,esc:27,escape:27,space:32,left:37,up:38,right:39,down:40,del:46,delete:46,ins:45,insert:45,home:36,end:35,pageup:33,pagedown:34,capslock:20,num_0:96,num_1:97,num_2:98,num_3:99,num_4:100,num_5:101,num_6:102,num_7:103,num_8:104,num_9:105,num_multiply:106,num_add:107,num_enter:108,num_subtract:109,num_decimal:110,num_divide:111,"⇪":20,",":188,".":190,"/":191,"`":192,"-":isff?173:189,"=":isff?61:187,";":isff?59:186,"'":222,"[":219,"]":221,"\\":220},_modifier={"⇧":16,shift:16,"⌥":18,alt:18,option:18,"⌃":17,ctrl:17,control:17,"⌘":91,cmd:91,command:91},modifierMap={16:"shiftKey",18:"altKey",17:"ctrlKey",91:"metaKey",shiftKey:16,ctrlKey:17,altKey:18,metaKey:91},_mods={16:!1,18:!1,17:!1,91:!1},_handlers={},k=1;k<20;k++)_keyMap["f".concat(k)]=111+k;var _downKeys=[],winListendFocus=!1,_scope="all",elementHasBindEvent=[],code=function(e){return _keyMap[e.toLowerCase()]||_modifier[e.toLowerCase()]||e.toUpperCase().charCodeAt(0)},getKey=function(e){return Object.keys(_keyMap).find((function(t){return _keyMap[t]===e}))},getModifier=function(e){return Object.keys(_modifier).find((function(t){return _modifier[t]===e}))};function setScope(e){_scope=e||"all"}function getScope(){return _scope||"all"}function getPressedKeyCodes(){return _downKeys.slice(0)}function getPressedKeyString(){return _downKeys.map((function(e){return getKey(e)||getModifier(e)||String.fromCharCode(e)}))}function filter(e){var t=e.target||e.srcElement,n=t.tagName,r=!0;return!t.isContentEditable&&("INPUT"!==n&&"TEXTAREA"!==n&&"SELECT"!==n||t.readOnly)||(r=!1),r}function isPressed(e){return"string"==typeof e&&(e=code(e)),-1!==_downKeys.indexOf(e)}function deleteScope(e,t){var n,r;for(var i in e||(e=getScope()),_handlers)if(Object.prototype.hasOwnProperty.call(_handlers,i))for(n=_handlers[i],r=0;r<n.length;)n[r].scope===e?n.splice(r,1):r++;getScope()===e&&setScope(t||"all")}function clearModifier(e){var t=e.keyCode||e.which||e.charCode,n=_downKeys.indexOf(t);if(n>=0&&_downKeys.splice(n,1),e.key&&"meta"===e.key.toLowerCase()&&_downKeys.splice(0,_downKeys.length),93!==t&&224!==t||(t=91),t in _mods)for(var r in _mods[t]=!1,_modifier)_modifier[r]===t&&(hotkeys[r]=!1)}function unbind(e){if(void 0===e)Object.keys(_handlers).forEach((function(e){return delete _handlers[e]}));else if(Array.isArray(e))e.forEach((function(e){e.key&&eachUnbind(e)}));else if("object"==typeof e)e.key&&eachUnbind(e);else if("string"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=n[0],o=n[1];"function"==typeof i&&(o=i,i=""),eachUnbind({key:e,scope:i,method:o,splitKey:"+"})}}var eachUnbind=function(e){var t=e.key,n=e.scope,r=e.method,i=e.splitKey,o=void 0===i?"+":i;getKeys(t).forEach((function(e){var t=e.split(o),i=t.length,a=t[i-1],s="*"===a?"*":code(a);if(_handlers[s]){n||(n=getScope());var c=i>1?getMods(_modifier,t):[];_handlers[s]=_handlers[s].filter((function(e){return!((!r||e.method===r)&&e.scope===n&&compareArray(e.mods,c))}))}}))};function eventHandler(e,t,n,r){var i;if(t.element===r&&(t.scope===n||"all"===t.scope)){for(var o in i=t.mods.length>0,_mods)Object.prototype.hasOwnProperty.call(_mods,o)&&(!_mods[o]&&t.mods.indexOf(+o)>-1||_mods[o]&&-1===t.mods.indexOf(+o))&&(i=!1);(0!==t.mods.length||_mods[16]||_mods[18]||_mods[17]||_mods[91])&&!i&&"*"!==t.shortcut||!1===t.method(e,t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1,e.stopPropagation&&e.stopPropagation(),e.cancelBubble&&(e.cancelBubble=!0))}}function dispatch(e,t){var n=_handlers["*"],r=e.keyCode||e.which||e.charCode;if(hotkeys.filter.call(this,e)){if(93!==r&&224!==r||(r=91),-1===_downKeys.indexOf(r)&&229!==r&&_downKeys.push(r),["ctrlKey","altKey","shiftKey","metaKey"].forEach((function(t){var n=modifierMap[t];e[t]&&-1===_downKeys.indexOf(n)?_downKeys.push(n):!e[t]&&_downKeys.indexOf(n)>-1?_downKeys.splice(_downKeys.indexOf(n),1):"metaKey"===t&&e[t]&&3===_downKeys.length&&(e.ctrlKey||e.shiftKey||e.altKey||(_downKeys=_downKeys.slice(_downKeys.indexOf(n))))})),r in _mods){for(var i in _mods[r]=!0,_modifier)_modifier[i]===r&&(hotkeys[i]=!0);if(!n)return}for(var o in _mods)Object.prototype.hasOwnProperty.call(_mods,o)&&(_mods[o]=e[modifierMap[o]]);e.getModifierState&&(!e.altKey||e.ctrlKey)&&e.getModifierState("AltGraph")&&(-1===_downKeys.indexOf(17)&&_downKeys.push(17),-1===_downKeys.indexOf(18)&&_downKeys.push(18),_mods[17]=!0,_mods[18]=!0);var a=getScope();if(n)for(var s=0;s<n.length;s++)n[s].scope===a&&("keydown"===e.type&&n[s].keydown||"keyup"===e.type&&n[s].keyup)&&eventHandler(e,n[s],a,t);if(r in _handlers)for(var c=0;c<_handlers[r].length;c++)if(("keydown"===e.type&&_handlers[r][c].keydown||"keyup"===e.type&&_handlers[r][c].keyup)&&_handlers[r][c].key){for(var l=_handlers[r][c],u=l.splitKey,d=l.key.split(u),p=[],f=0;f<d.length;f++)p.push(code(d[f]));p.sort().join("")===_downKeys.sort().join("")&&eventHandler(e,l,a,t)}}}function isElementBind(e){return elementHasBindEvent.indexOf(e)>-1}function hotkeys(e,t,n){_downKeys=[];var r=getKeys(e),i=[],o="all",a=document,s=0,c=!1,l=!0,u="+",d=!1;for(void 0===n&&"function"==typeof t&&(n=t),"[object Object]"===Object.prototype.toString.call(t)&&(t.scope&&(o=t.scope),t.element&&(a=t.element),t.keyup&&(c=t.keyup),void 0!==t.keydown&&(l=t.keydown),void 0!==t.capture&&(d=t.capture),"string"==typeof t.splitKey&&(u=t.splitKey)),"string"==typeof t&&(o=t);s<r.length;s++)i=[],(e=r[s].split(u)).length>1&&(i=getMods(_modifier,e)),(e="*"===(e=e[e.length-1])?"*":code(e))in _handlers||(_handlers[e]=[]),_handlers[e].push({keyup:c,keydown:l,scope:o,mods:i,shortcut:r[s],method:n,key:r[s],splitKey:u,element:a});void 0!==a&&!isElementBind(a)&&window&&(elementHasBindEvent.push(a),addEvent(a,"keydown",(function(e){dispatch(e,a)}),d),winListendFocus||(winListendFocus=!0,addEvent(window,"focus",(function(){_downKeys=[]}),d)),addEvent(a,"keyup",(function(e){dispatch(e,a),clearModifier(e)}),d))}function trigger(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"all";Object.keys(_handlers).forEach((function(n){_handlers[n].filter((function(n){return n.scope===t&&n.shortcut===e})).forEach((function(e){e&&e.method&&e.method()}))}))}var _api={getPressedKeyString:getPressedKeyString,setScope:setScope,getScope:getScope,deleteScope:deleteScope,getPressedKeyCodes:getPressedKeyCodes,isPressed:isPressed,filter:filter,trigger:trigger,unbind:unbind,keyMap:_keyMap,modifier:_modifier,modifierMap:modifierMap};for(var a in _api)Object.prototype.hasOwnProperty.call(_api,a)&&(hotkeys[a]=_api[a]);if("undefined"!=typeof window){var _hotkeys=window.hotkeys;hotkeys.noConflict=function(e){return e&&window.hotkeys===hotkeys&&(window.hotkeys=_hotkeys),hotkeys},window.hotkeys=hotkeys}var __defProp$1=Object.defineProperty,__getOwnPropDesc$1=Object.getOwnPropertyDescriptor,__decorateClass$1=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc$1(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp$1(t,n,o),o},__decorateParam=(e,t)=>(n,r)=>t(n,r,e);hotkeys.filter=function(){return!0};let Shortcut=class{constructor(e){this.option={capture:!0},log("Initialize shortcut subsystem"),this.eventBus=e}registerKeyboardEvent(e,t){hotkeys(e,this.option,t),this.eventBus.on(e.toString(),t)}unregisterKeyboardEvent(e){hotkeys.unbind(e),this.eventBus.off(e.toString())}registerKeyboardEventFromPlugin(e){e.shortcut&&e.callback&&this.registerKeyboardEvent(e.shortcut,e.callback)}unregisterKeyboardEventFromPlugin(e){e.shortcut&&e.callback&&this.unregisterKeyboardEvent(e.shortcut)}};Shortcut=__decorateClass$1([injectable(),__decorateParam(0,inject(TYPES.EventBus))],Shortcut);var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__decorateClass=(e,t,n,r)=>{for(var i,o=r>1?void 0:r?__getOwnPropDesc(t,n):t,a=e.length-1;a>=0;a--)(i=e[a])&&(o=(r?i(t,n,o):i(o))||o);return r&&o&&__defProp(t,n,o),o};let SettingManager=class{constructor(){this.settingRenders=new Map}registerSetting(e,t){this.settingRenders.set(e,t)}unregisterSetting(e){this.settingRenders.delete(e)}getSettingRenders(){const e=[];return this.settingRenders.forEach(((t,n)=>{e.push({key:n,value:t})})),e}};SettingManager=__decorateClass([injectable()],SettingManager);const container=new Container;container.bind(TYPES.StorageManager).to(StorageManager).inSingletonScope(),container.bind(TYPES.SystemManager).to(SystemManager).inSingletonScope(),container.bind(TYPES.PluginSystem).to(PluginSystem).inSingletonScope(),container.bind(TYPES.PluginLoader).to(PluginLoader).inSingletonScope(),container.bind(TYPES.PluginFileManager).to(PluginFileManager).inSingletonScope(),container.bind(TYPES.EventBus).to(EventBus),container.bind(TYPES.Shortcut).to(Shortcut).inSingletonScope(),container.bind(TYPES.CommandManager).to(CommandManager).inSingletonScope(),container.bind(TYPES.Store).to(Store).inSingletonScope(),container.bind(TYPES.SettingManager).to(SettingManager).inSingletonScope(),window.pluginSystem||(log("Siyuan Plugin System loading..."),window.pluginSystemVersion=VERSION$1,window.pluginSystem=container.get(TYPES.PluginSystem).init(),window.pluginSystemIocContainer=container)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzLy5wbnBtL3JlZmxlY3QtbWV0YWRhdGFAMC4xLjEzL25vZGVfbW9kdWxlcy9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanMiLCJzcmMvY29uZmlnLnRzIiwic3JjL2FwaS9zZXJ2ZXItYXBpLnRzIiwic3JjL2ludGVybmFsL2NsYXNzZXMvbm90aWZpY2F0aW9uLnRzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3poaS1sb2dAMS42LjEvbm9kZV9tb2R1bGVzL3poaS1sb2cvbGliL2luZGV4LmpzIiwic3JjL2FwaS9jbGllbnQtYXBpLnRzIiwic3JjL2ludGVybmFsL2NsYXNzZXMvbWVudS50cyIsInNyYy9pbnRlcm5hbC9jbGFzc2VzL2RpYWxvZy50cyIsInNyYy9hcGkvcGx1Z2luLnRzIiwic3JjL2FwaS50cyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9jb25zdGFudHMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvZGVidWcuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvcmUuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvcGFyc2Utb3B0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9pZGVudGlmaWVycy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9jbGFzc2VzL3NlbXZlci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGFyc2UuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ZhbGlkLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jbGVhbi5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvaW5jLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9lcS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZGlmZi5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWFqb3IuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21pbm9yLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9wYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcHJlcmVsZWFzZS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcmNvbXBhcmUuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtbG9vc2UuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jzb3J0LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9ndC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL25lcS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3RlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9sdGUuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29lcmNlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3lhbGxpc3RANC4wLjAvbm9kZV9tb2R1bGVzL3lhbGxpc3QvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvLnBucG0veWFsbGlzdEA0LjAuMC9ub2RlX21vZHVsZXMveWFsbGlzdC95YWxsaXN0LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2xydS1jYWNoZUA2LjAuMC9ub2RlX21vZHVsZXMvbHJ1LWNhY2hlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvcmFuZ2UuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvY2xhc3Nlcy9jb21wYXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9zYXRpc2ZpZXMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3RvLWNvbXBhcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9tYXgtc2F0aXNmeWluZy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWluLXNhdGlzZnlpbmcuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi12ZXJzaW9uLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy92YWxpZC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvb3V0c2lkZS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjgvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvZ3RyLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9sdHIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2ludGVyc2VjdHMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3NpbXBsaWZ5LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuOC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9zdWJzZXQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy44L25vZGVfbW9kdWxlcy9zZW12ZXIvaW5kZXguanMiLCJzcmMvYXBpL2ZpbGUtYXBpLnRzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMS4zLjQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDEuMy40L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AxLjMuNC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwic3JjL3V0aWwvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvY29uc3RhbnRzL21ldGFkYXRhX2tleXMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvY29uc3RhbnRzL2xpdGVyYWxfdHlwZXMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvaWQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYmluZGluZ3MvYmluZGluZy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb25zdGFudHMvZXJyb3JfbXNncy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9tZXRhZGF0YV9yZWFkZXIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYmluZGluZ3MvYmluZGluZ19jb3VudC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy91dGlscy9leGNlcHRpb25zLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL3NlcmlhbGl6YXRpb24uanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvY29udGV4dC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9wbGFuLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2Fubm90YXRpb24vbGF6eV9zZXJ2aWNlX2lkZW50aWZpZXIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvcXVlcnlhYmxlX3N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy90YXJnZXQuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvcmVmbGVjdGlvbl91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9yZXF1ZXN0LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3BsYW5uaW5nL3BsYW5uZXIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvYXN5bmMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc2NvcGUvc2NvcGUuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvZmFjdG9yeV90eXBlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL2JpbmRpbmdfdXRpbHMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcmVzb2x1dGlvbi9pbnN0YW50aWF0aW9uLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3Jlc29sdXRpb24vcmVzb2x2ZXIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2NvbnN0cmFpbnRfaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9zeW50YXgvYmluZGluZ193aGVuX3N5bnRheC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9zeW50YXgvYmluZGluZ19vbl9zeW50YXguanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2JpbmRpbmdfd2hlbl9vbl9zeW50YXguanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2JpbmRpbmdfaW5fc3ludGF4LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3N5bnRheC9iaW5kaW5nX2luX3doZW5fb25fc3ludGF4LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3N5bnRheC9iaW5kaW5nX3RvX3N5bnRheC5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9pbnZlcnNpZnlANi4wLjEvbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb250YWluZXIvY29udGFpbmVyX3NuYXBzaG90LmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL2Nsb25hYmxlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2NvbnRhaW5lci9sb29rdXAuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvY29udGFpbmVyL21vZHVsZV9hY3RpdmF0aW9uX3N0b3JlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2NvbnRhaW5lci9jb250YWluZXIuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvanMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYW5ub3RhdGlvbi9kZWNvcmF0b3JfdXRpbHMuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYW5ub3RhdGlvbi9pbmplY3RhYmxlLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL2ludmVyc2lmeUA2LjAuMS9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2Fubm90YXRpb24vaW5qZWN0X2Jhc2UuanMiLCJub2RlX21vZHVsZXMvLnBucG0vaW52ZXJzaWZ5QDYuMC4xL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYW5ub3RhdGlvbi9pbmplY3QuanMiLCJzcmMvY29yZS9wbHVnaW4tY29uZmlnLnRzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUAzLjU1LjEvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9pbnRlcm5hbC9pbmRleC5tanMiLCJzcmMvaW50ZXJuYWwvcGx1Z2lucy9jb21tYW5kLXBhbmVsL2NvbW1hbmQtcGFuZWwuc3ZlbHRlIiwic3JjL2ludGVybmFsL3BsdWdpbnMvY29tbWFuZC1wYW5lbC9pbmRleC50cyIsInNyYy9pbnRlcm5hbC9wbHVnaW5zL3NldHRpbmcvc2V0dGluZy1jb21tb24uc3ZlbHRlIiwic3JjL2ludGVybmFsL3BsdWdpbnMvc2V0dGluZy9zZXR0aW5nLWxpc3Quc3ZlbHRlIiwic3JjL2NvcmUvc3RvcmUudHMiLCJzcmMvaW50ZXJuYWwvY29tcG9uZW50cy9CdXR0b24uc3ZlbHRlIiwic3JjL2ludGVybmFsL3BsdWdpbnMvc2V0dGluZy9zZXR0aW5nLXByZXZpZXcuc3ZlbHRlIiwic3JjL2ludGVybmFsL3BsdWdpbnMvc2V0dGluZy9zZXR0aW5nLXN0b3JlLnN2ZWx0ZSIsInNyYy9pbnRlcm5hbC9wbHVnaW5zL3NldHRpbmcvc2V0dGluZy1jdXN0b20uc3ZlbHRlIiwic3JjL2ludGVybmFsL3BsdWdpbnMvc2V0dGluZy9zZXR0aW5nLnN2ZWx0ZSIsInNyYy9pbnRlcm5hbC9wbHVnaW5zL3NldHRpbmcvaW5kZXgudHMiLCJzcmMvaW50ZXJuYWwvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvLnBucG0vdHJ1bmNhdGUtdXRmOC1ieXRlc0AxLjAuMi9ub2RlX21vZHVsZXMvdHJ1bmNhdGUtdXRmOC1ieXRlcy9saWIvdHJ1bmNhdGUuanMiLCJub2RlX21vZHVsZXMvLnBucG0vdXRmOC1ieXRlLWxlbmd0aEAxLjAuNC9ub2RlX21vZHVsZXMvdXRmOC1ieXRlLWxlbmd0aC9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzLy5wbnBtL3RydW5jYXRlLXV0ZjgtYnl0ZXNAMS4wLjIvbm9kZV9tb2R1bGVzL3RydW5jYXRlLXV0ZjgtYnl0ZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy8ucG5wbS9zYW5pdGl6ZS1maWxlbmFtZUAxLjYuMy9ub2RlX21vZHVsZXMvc2FuaXRpemUtZmlsZW5hbWUvaW5kZXguanMiLCJzcmMvY29yZS9zdG9yYWdlLW1hbmFnZXIudHMiLCJzcmMvY29yZS9pbmRleC50cyIsInNyYy91dGlsL21pZ3JhdGUudHMiLCJzcmMvY29yZS9zeXN0ZW0tbWFuYWdlci50cyIsInNyYy9jb3JlL2xvYWRlci50cyIsInNyYy9jb3JlL3BsdWdpbi1maWxlLW1hbmFnZXIudHMiLCJzcmMvY29yZS9ldmVudC1idXMudHMiLCJzcmMvY29yZS9jb21tYW5kLW1hbmFnZXIudHMiLCJub2RlX21vZHVsZXMvLnBucG0vaG90a2V5cy1qc0AzLjEwLjEvbm9kZV9tb2R1bGVzL2hvdGtleXMtanMvZGlzdC9ob3RrZXlzLmVzbS5qcyIsInNyYy9jb3JlL3Nob3J0Y3V0LnRzIiwic3JjL2NvcmUvc2V0dGluZy1tYW5hZ2VyLnRzIiwic3JjL2NvbnRhaW5lci50cyIsInNyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoQykgTWljcm9zb2Z0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXG5cblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbnZhciBSZWZsZWN0O1xuKGZ1bmN0aW9uIChSZWZsZWN0KSB7XG4gICAgLy8gTWV0YWRhdGEgUHJvcG9zYWxcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhL1xuICAgIChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICAgICAgICAgICAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDpcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiA/IHRoaXMgOlxuICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpO1xuICAgICAgICB2YXIgZXhwb3J0ZXIgPSBtYWtlRXhwb3J0ZXIoUmVmbGVjdCk7XG4gICAgICAgIGlmICh0eXBlb2Ygcm9vdC5SZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByb290LlJlZmxlY3QgPSBSZWZsZWN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0ZXIgPSBtYWtlRXhwb3J0ZXIocm9vdC5SZWZsZWN0LCBleHBvcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yeShleHBvcnRlcik7XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VFeHBvcnRlcih0YXJnZXQsIHByZXZpb3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzKVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyhrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KShmdW5jdGlvbiAoZXhwb3J0ZXIpIHtcbiAgICAgICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICAgIC8vIGZlYXR1cmUgdGVzdCBmb3IgU3ltYm9sIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB2YXIgdG9QcmltaXRpdmVTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLnRvUHJpbWl0aXZlIDogXCJAQHRvUHJpbWl0aXZlXCI7XG4gICAgICAgIHZhciBpdGVyYXRvclN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuaXRlcmF0b3IgOiBcIkBAaXRlcmF0b3JcIjtcbiAgICAgICAgdmFyIHN1cHBvcnRzQ3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIjsgLy8gZmVhdHVyZSB0ZXN0IGZvciBPYmplY3QuY3JlYXRlIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJvdG8gPSB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5OyAvLyBmZWF0dXJlIHRlc3QgZm9yIF9fcHJvdG9fXyBzdXBwb3J0XG4gICAgICAgIHZhciBkb3duTGV2ZWwgPSAhc3VwcG9ydHNDcmVhdGUgJiYgIXN1cHBvcnRzUHJvdG87XG4gICAgICAgIHZhciBIYXNoTWFwID0ge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuIG9iamVjdCBpbiBkaWN0aW9uYXJ5IG1vZGUgKGEuay5hLiBcInNsb3dcIiBtb2RlIGluIHY4KVxuICAgICAgICAgICAgY3JlYXRlOiBzdXBwb3J0c0NyZWF0ZVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoT2JqZWN0LmNyZWF0ZShudWxsKSk7IH1cbiAgICAgICAgICAgICAgICA6IHN1cHBvcnRzUHJvdG9cbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7IF9fcHJvdG9fXzogbnVsbCB9KTsgfVxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHt9KTsgfSxcbiAgICAgICAgICAgIGhhczogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KTsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBrZXkgaW4gbWFwOyB9LFxuICAgICAgICAgICAgZ2V0OiBkb3duTGV2ZWxcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpID8gbWFwW2tleV0gOiB1bmRlZmluZWQ7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gbWFwW2tleV07IH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIExvYWQgZ2xvYmFsIG9yIHNoaW0gdmVyc2lvbnMgb2YgTWFwLCBTZXQsIGFuZCBXZWFrTWFwXG4gICAgICAgIHZhciBmdW5jdGlvblByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihGdW5jdGlvbik7XG4gICAgICAgIHZhciB1c2VQb2x5ZmlsbCA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52W1wiUkVGTEVDVF9NRVRBREFUQV9VU0VfTUFQX1BPTFlGSUxMXCJdID09PSBcInRydWVcIjtcbiAgICAgICAgdmFyIF9NYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IE1hcCA6IENyZWF0ZU1hcFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciBfU2V0ID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBTZXQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU2V0LnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBTZXQgOiBDcmVhdGVTZXRQb2x5ZmlsbCgpO1xuICAgICAgICB2YXIgX1dlYWtNYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiA/IFdlYWtNYXAgOiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKTtcbiAgICAgICAgLy8gW1tNZXRhZGF0YV1dIGludGVybmFsIHNsb3RcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXG4gICAgICAgIHZhciBNZXRhZGF0YSA9IG5ldyBfV2Vha01hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbGllcyBhIHNldCBvZiBkZWNvcmF0b3JzIHRvIGEgcHJvcGVydHkgb2YgYSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gZGVjb3JhdG9ycyBBbiBhcnJheSBvZiBkZWNvcmF0b3JzLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IHRvIGRlY29yYXRlLlxuICAgICAgICAgKiBAcGFyYW0gYXR0cmlidXRlcyAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciB0aGUgdGFyZ2V0IGtleS5cbiAgICAgICAgICogQHJlbWFya3MgRGVjb3JhdG9ycyBhcmUgYXBwbGllZCBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBFeGFtcGxlID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpKSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcbiAgICAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpKSk7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgICAgIGlmICghSXNBcnJheShkZWNvcmF0b3JzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QoYXR0cmlidXRlcykgJiYgIUlzVW5kZWZpbmVkKGF0dHJpYnV0ZXMpICYmICFJc051bGwoYXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoSXNOdWxsKGF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29yYXRlUHJvcGVydHkoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWNvcmF0ZVwiLCBkZWNvcmF0ZSk7XG4gICAgICAgIC8vIDQuMS4yIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI3JlZmxlY3QubWV0YWRhdGFcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZGVmYXVsdCBtZXRhZGF0YSBkZWNvcmF0b3IgZmFjdG9yeSB0aGF0IGNhbiBiZSB1c2VkIG9uIGEgY2xhc3MsIGNsYXNzIG1lbWJlciwgb3IgcGFyYW1ldGVyLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgVGhlIGtleSBmb3IgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBUaGUgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cbiAgICAgICAgICogQHJldHVybnMgQSBkZWNvcmF0b3IgZnVuY3Rpb24uXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGBtZXRhZGF0YUtleWAgaXMgYWxyZWFkeSBkZWZpbmVkIGZvciB0aGUgdGFyZ2V0IGFuZCB0YXJnZXQga2V5LCB0aGVcbiAgICAgICAgICogbWV0YWRhdGFWYWx1ZSBmb3IgdGhhdCBrZXkgd2lsbCBiZSBvdmVyd3JpdHRlbi5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IsIFR5cGVTY3JpcHQgb25seSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSwgVHlwZVNjcmlwdCBvbmx5KVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBwcm9wZXJ0eTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QoKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBtZXRob2QoKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpICYmICFJc1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcIm1ldGFkYXRhXCIsIG1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZSBhIHVuaXF1ZSBtZXRhZGF0YSBlbnRyeSBvbiB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YVZhbHVlIEEgdmFsdWUgdGhhdCBjb250YWlucyBhdHRhY2hlZCBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0byBkZWZpbmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBkZWNvcmF0b3IgZmFjdG9yeSBhcyBtZXRhZGF0YS1wcm9kdWNpbmcgYW5ub3RhdGlvbi5cbiAgICAgICAgICogICAgIGZ1bmN0aW9uIE15QW5ub3RhdGlvbihvcHRpb25zKTogRGVjb3JhdG9yIHtcbiAgICAgICAgICogICAgICAgICByZXR1cm4gKHRhcmdldCwga2V5PykgPT4gUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIHRhcmdldCwga2V5KTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlZmluZU1ldGFkYXRhXCIsIGRlZmluZU1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbiBoYXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEga2V5IHdhcyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW47IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImhhc01ldGFkYXRhXCIsIGhhc01ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3QgaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdDsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiaGFzT3duTWV0YWRhdGFcIiwgaGFzT3duTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBrZXkgaWYgZm91bmQ7IG90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRNZXRhZGF0YVwiLCBnZXRNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBrZXkgaWYgZm91bmQ7IG90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRPd25NZXRhZGF0YVwiLCBnZXRPd25NZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0TWV0YWRhdGFLZXlzXCIsIGdldE1ldGFkYXRhS2V5cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSB1bmlxdWUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB1bmlxdWUgbWV0YWRhdGEga2V5cy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlPd25NZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRPd25NZXRhZGF0YUtleXNcIiwgZ2V0T3duTWV0YWRhdGFLZXlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGV0ZXMgdGhlIG1ldGFkYXRhIGVudHJ5IGZyb20gdGhlIHRhcmdldCBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQga2V5LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEgZW50cnkgd2FzIGZvdW5kIGFuZCBkZWxldGVkOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHByb3BlcnR5S2V5LCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFtZXRhZGF0YU1hcC5kZWxldGUobWV0YWRhdGFLZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YU1hcC5zaXplID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuZGVsZXRlKHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhZGF0YS5zaXplID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIE1ldGFkYXRhLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWxldGVNZXRhZGF0YVwiLCBkZWxldGVNZXRhZGF0YSk7XG4gICAgICAgIGZ1bmN0aW9uIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKGRlY29yYXRlZCkgJiYgIUlzTnVsbChkZWNvcmF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNDb25zdHJ1Y3RvcihkZWNvcmF0ZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBkZWNvcmF0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKGRlY29yYXRlZCkgJiYgIUlzTnVsbChkZWNvcmF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QoZGVjb3JhdGVkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IGRlY29yYXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIENyZWF0ZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldE1ldGFkYXRhID0gTWV0YWRhdGEuZ2V0KE8pO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKHRhcmdldE1ldGFkYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmICghQ3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICBNZXRhZGF0YS5zZXQoTywgdGFyZ2V0TWV0YWRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KFApO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSkge1xuICAgICAgICAgICAgICAgIGlmICghQ3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhTWFwID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YS5zZXQoUCwgbWV0YWRhdGFNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4xLjEgT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNtZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICBpZiAoaGFzT3duKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4yLjEgT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gVG9Cb29sZWFuKG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4zLjEgT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRtZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICBpZiAoaGFzT3duKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjQuMSBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWdldG93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNS4xIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5ZGVmaW5lb3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgbWV0YWRhdGFNYXAuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNi4xIE9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5bWV0YWRhdGFrZXlzXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApIHtcbiAgICAgICAgICAgIHZhciBvd25LZXlzID0gT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XG4gICAgICAgICAgICB2YXIgcGFyZW50S2V5cyA9IE9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gICAgICAgICAgICBpZiAocGFyZW50S2V5cy5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gb3duS2V5cztcbiAgICAgICAgICAgIGlmIChvd25LZXlzLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRLZXlzO1xuICAgICAgICAgICAgdmFyIHNldCA9IG5ldyBfU2V0KCk7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvd25LZXlzXzEgPSBvd25LZXlzOyBfaSA8IG93bktleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gb3duS2V5c18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzS2V5ID0gc2V0LmhhcyhrZXkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwYXJlbnRLZXlzXzEgPSBwYXJlbnRLZXlzOyBfYSA8IHBhcmVudEtleXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gcGFyZW50S2V5c18xW19hXTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzS2V5ID0gc2V0LmhhcyhrZXkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjcuMSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeW93bm1ldGFkYXRha2V5c1xuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgICB2YXIga2V5c09iaiA9IG1ldGFkYXRhTWFwLmtleXMoKTtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGtleXNPYmopO1xuICAgICAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMubGVuZ3RoID0gaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBJdGVyYXRvclZhbHVlKG5leHQpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXNba10gPSBuZXh0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDYgRUNNQVNjcmlwdCBEYXRhIFR5cDBlcyBhbmQgVmFsdWVzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtZGF0YS10eXBlcy1hbmQtdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIFR5cGUoeCkge1xuICAgICAgICAgICAgaWYgKHggPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogTnVsbCAqLztcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHJldHVybiAwIC8qIFVuZGVmaW5lZCAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOiByZXR1cm4gMiAvKiBCb29sZWFuICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIDMgLyogU3RyaW5nICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzeW1ib2xcIjogcmV0dXJuIDQgLyogU3ltYm9sICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIDUgLyogTnVtYmVyICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjogcmV0dXJuIHggPT09IG51bGwgPyAxIC8qIE51bGwgKi8gOiA2IC8qIE9iamVjdCAqLztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gNiAvKiBPYmplY3QgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjEgVGhlIFVuZGVmaW5lZCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtdW5kZWZpbmVkLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNVbmRlZmluZWQoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuMiBUaGUgTnVsbCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtbnVsbC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzTnVsbCh4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuNSBUaGUgU3ltYm9sIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1zeW1ib2wtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc1N5bWJvbCh4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjcgVGhlIE9iamVjdCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzT2JqZWN0KHgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiA/IHggIT09IG51bGwgOiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMSBUeXBlIENvbnZlcnNpb25cbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZS1jb252ZXJzaW9uXG4gICAgICAgIC8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuICAgICAgICBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCwgUHJlZmVycmVkVHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoIChUeXBlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMCAvKiBVbmRlZmluZWQgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDEgLyogTnVsbCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBCb29sZWFuICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDUgLyogTnVtYmVyICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGludCA9IFByZWZlcnJlZFR5cGUgPT09IDMgLyogU3RyaW5nICovID8gXCJzdHJpbmdcIiA6IFByZWZlcnJlZFR5cGUgPT09IDUgLyogTnVtYmVyICovID8gXCJudW1iZXJcIiA6IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgdmFyIGV4b3RpY1RvUHJpbSA9IEdldE1ldGhvZChpbnB1dCwgdG9QcmltaXRpdmVTeW1ib2wpO1xuICAgICAgICAgICAgaWYgKGV4b3RpY1RvUHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcbiAgICAgICAgICAgICAgICBpZiAoSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgaGludCA9PT0gXCJkZWZhdWx0XCIgPyBcIm51bWJlclwiIDogaGludCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjEuMSBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG4gICAgICAgICAgICBpZiAoaGludCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhciB0b1N0cmluZ18xID0gTy50b1N0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh0b1N0cmluZ18xKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdG9TdHJpbmdfMS5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9mID0gTy52YWx1ZU9mO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZU9mLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0b1N0cmluZ18yID0gTy50b1N0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh0b1N0cmluZ18yKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdG9TdHJpbmdfMi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMiBUb0Jvb2xlYW4oYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtdG9ib29sZWFuXG4gICAgICAgIGZ1bmN0aW9uIFRvQm9vbGVhbihhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuICEhYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjEyIFRvU3RyaW5nKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3N0cmluZ1xuICAgICAgICBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBhcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMTQgVG9Qcm9wZXJ0eUtleShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxuICAgICAgICBmdW5jdGlvbiBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gVG9QcmltaXRpdmUoYXJndW1lbnQsIDMgLyogU3RyaW5nICovKTtcbiAgICAgICAgICAgIGlmIChJc1N5bWJvbChrZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICByZXR1cm4gVG9TdHJpbmcoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIgVGVzdGluZyBhbmQgQ29tcGFyaXNvbiBPcGVyYXRpb25zXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRlc3RpbmctYW5kLWNvbXBhcmlzb24tb3BlcmF0aW9uc1xuICAgICAgICAvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4gICAgICAgIGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5XG4gICAgICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KGFyZ3VtZW50KVxuICAgICAgICAgICAgICAgIDogYXJndW1lbnQgaW5zdGFuY2VvZiBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgPyBhcmd1bWVudCBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi4zIElzQ2FsbGFibGUoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbiAgICAgICAgZnVuY3Rpb24gSXNDYWxsYWJsZShhcmd1bWVudCkge1xuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhbiBhcHByb3hpbWF0aW9uIGFzIHdlIGNhbm5vdCBjaGVjayBmb3IgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi40IElzQ29uc3RydWN0b3IoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3JcbiAgICAgICAgZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhbiBhcHByb3hpbWF0aW9uIGFzIHdlIGNhbm5vdCBjaGVjayBmb3IgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjcgSXNQcm9wZXJ0eUtleShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNwcm9wZXJ0eWtleVxuICAgICAgICBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFR5cGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDcuMyBPcGVyYXRpb25zIG9uIE9iamVjdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1vYmplY3RzXG4gICAgICAgIC8vIDcuMy45IEdldE1ldGhvZChWLCBQKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRtZXRob2RcbiAgICAgICAgZnVuY3Rpb24gR2V0TWV0aG9kKFYsIFApIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gVltQXTtcbiAgICAgICAgICAgIGlmIChmdW5jID09PSB1bmRlZmluZWQgfHwgZnVuYyA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNCBPcGVyYXRpb25zIG9uIEl0ZXJhdG9yIE9iamVjdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1pdGVyYXRvci1vYmplY3RzXG4gICAgICAgIGZ1bmN0aW9uIEdldEl0ZXJhdG9yKG9iaikge1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IEdldE1ldGhvZChvYmosIGl0ZXJhdG9yU3ltYm9sKTtcbiAgICAgICAgICAgIGlmICghSXNDYWxsYWJsZShtZXRob2QpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTsgLy8gZnJvbSBDYWxsXG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBtZXRob2QuY2FsbChvYmopO1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdChpdGVyYXRvcikpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC40IEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLzIwMTYvI3NlYy1pdGVyYXRvcnZhbHVlXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJSZXN1bHQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjUgSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pdGVyYXRvcnN0ZXBcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gZmFsc2UgOiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JjbG9zZVxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGl0ZXJhdG9yW1wicmV0dXJuXCJdO1xuICAgICAgICAgICAgaWYgKGYpXG4gICAgICAgICAgICAgICAgZi5jYWxsKGl0ZXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA5LjEgT3JkaW5hcnkgT2JqZWN0IEludGVybmFsIE1ldGhvZHMgYW5kIEludGVybmFsIFNsb3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xuICAgICAgICAvLyA5LjEuMS4xIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTylcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnlnZXRwcm90b3R5cGVvZlxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pIHtcbiAgICAgICAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgTyAhPT0gXCJmdW5jdGlvblwiIHx8IE8gPT09IGZ1bmN0aW9uUHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQgZG9lc24ndCBzZXQgX19wcm90b19fIGluIEVTNSwgYXMgaXQncyBub24tc3RhbmRhcmQuXG4gICAgICAgICAgICAvLyBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLiBDb21wYXRpYmxlIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAgICAgLy8gbXVzdCBlaXRoZXIgc2V0IF9fcHJvdG9fXyBvbiBhIHN1YmNsYXNzIGNvbnN0cnVjdG9yIHRvIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgLy8gb3IgZW5zdXJlIGVhY2ggY2xhc3MgaGFzIGEgdmFsaWQgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBvbiBpdHMgcHJvdG90eXBlIHRoYXRcbiAgICAgICAgICAgIC8vIHBvaW50cyBiYWNrIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIEZ1bmN0aW9uLltbUHJvdG90eXBlXV0sIHRoZW4gdGhpcyBpcyBkZWZpbmF0ZWx5IGluaGVyaXRlZC5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2Ugd2hlbiBpbiBFUzYgb3Igd2hlbiB1c2luZyBfX3Byb3RvX18gaW4gYSBjb21wYXRpYmxlIGJyb3dzZXIuXG4gICAgICAgICAgICBpZiAocHJvdG8gIT09IGZ1bmN0aW9uUHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHRoZSBzdXBlciBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZSwgbnVsbCwgb3IgdW5kZWZpbmVkLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IE8ucHJvdG90eXBlO1xuICAgICAgICAgICAgdmFyIHByb3RvdHlwZVByb3RvID0gcHJvdG90eXBlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpO1xuICAgICAgICAgICAgaWYgKHByb3RvdHlwZVByb3RvID09IG51bGwgfHwgcHJvdG90eXBlUHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnN0cnVjdG9yIHdhcyBub3QgYSBmdW5jdGlvbiwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb3RvdHlwZVByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgc29tZSBraW5kIG9mIHNlbGYtcmVmZXJlbmNlLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBPKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgYSBwcmV0dHkgZ29vZCBndWVzcyBhdCB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICByZXR1cm4gY29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmFpdmUgTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlTWFwUG9seWZpbGwoKSB7XG4gICAgICAgICAgICB2YXIgY2FjaGVTZW50aW5lbCA9IHt9O1xuICAgICAgICAgICAgdmFyIGFycmF5U2VudGluZWwgPSBbXTtcbiAgICAgICAgICAgIHZhciBNYXBJdGVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNYXBJdGVyYXRvcihrZXlzLCB2YWx1ZXMsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fc2VsZWN0b3IodGhpcy5fa2V5c1tpbmRleF0sIHRoaXMuX3ZhbHVlc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICsgMSA+PSB0aGlzLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0LCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwSXRlcmF0b3I7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDsgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSkgPj0gMDsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gMCA/IHRoaXMuX3ZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5kZXggKyAxOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5c1tpIC0gMV0gPSB0aGlzLl9rZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpIC0gMV0gPSB0aGlzLl92YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5fY2FjaGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRLZXkpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0VmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEVudHJ5KTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uIChrZXksIGluc2VydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVLZXkgIT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMuaW5kZXhPZih0aGlzLl9jYWNoZUtleSA9IGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlSW5kZXggPCAwICYmIGluc2VydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZUluZGV4O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hcDtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRLZXkoa2V5LCBfKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZhbHVlKF8sIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RW50cnkoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmFpdmUgU2V0IHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlU2V0UG9seWZpbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNldC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLnNpemU7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLnNldCh2YWx1ZSwgdmFsdWUpLCB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuZGVsZXRlKHZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9tYXAuY2xlYXIoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLnZhbHVlcygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBTZXQ7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIFdlYWtNYXAgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKSB7XG4gICAgICAgICAgICB2YXIgVVVJRF9TSVpFID0gMTY7XG4gICAgICAgICAgICB2YXIga2V5cyA9IEhhc2hNYXAuY3JlYXRlKCk7XG4gICAgICAgICAgICB2YXIgcm9vdEtleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuaGFzKHRhYmxlLCB0aGlzLl9rZXkpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gSGFzaE1hcC5nZXQodGFibGUsIHRoaXMuX2tleSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RoaXMuX2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gZGVsZXRlIHRhYmxlW3RoaXMuX2tleV0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBub3QgYSByZWFsIGNsZWFyLCBqdXN0IG1ha2VzIHRoZSBwcmV2aW91cyBkYXRhIHVucmVhY2hhYmxlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFdlYWtNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVW5pcXVlS2V5KCkge1xuICAgICAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgICAgICAga2V5ID0gXCJAQFdlYWtNYXBAQFwiICsgQ3JlYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChIYXNoTWFwLmhhcyhrZXlzLCBrZXkpKTtcbiAgICAgICAgICAgICAgICBrZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIGNyZWF0ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3duLmNhbGwodGFyZ2V0LCByb290S2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHJvb3RLZXksIHsgdmFsdWU6IEhhc2hNYXAuY3JlYXRlKCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcm9vdEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBGaWxsUmFuZG9tQnl0ZXMoYnVmZmVyLCBzaXplKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IE1hdGgucmFuZG9tKCkgKiAweGZmIHwgMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2VuUmFuZG9tQnl0ZXMoc2l6ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGaWxsUmFuZG9tQnl0ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSksIHNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBBcnJheShzaXplKSwgc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVVVUlEKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gR2VuUmFuZG9tQnl0ZXMoVVVJRF9TSVpFKTtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIHJhbmRvbSAtIFJGQyA0MTIyIMKnIDQuNFxuICAgICAgICAgICAgICAgIGRhdGFbNl0gPSBkYXRhWzZdICYgMHg0ZiB8IDB4NDA7XG4gICAgICAgICAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gJiAweGJmIHwgMHg4MDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBVVUlEX1NJWkU7ICsrb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlID0gZGF0YVtvZmZzZXRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSA0IHx8IG9mZnNldCA9PT0gNiB8fCBvZmZzZXQgPT09IDgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCItXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlIDwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBieXRlLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVzZXMgYSBoZXVyaXN0aWMgdXNlZCBieSB2OCBhbmQgY2hha3JhIHRvIGZvcmNlIGFuIG9iamVjdCBpbnRvIGRpY3Rpb25hcnkgbW9kZS5cbiAgICAgICAgZnVuY3Rpb24gTWFrZURpY3Rpb25hcnkob2JqKSB7XG4gICAgICAgICAgICBvYmouX18gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWxldGUgb2JqLl9fO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoUmVmbGVjdCB8fCAoUmVmbGVjdCA9IHt9KSk7XG4iLCJleHBvcnQgY29uc3QgUExVR0lOX0ZPTERFUiA9ICdwbHVnaW5zJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnX19WRVJTSU9OX18nO1xuXG5leHBvcnQgY29uc3QgVkVSU0lPTl9VUkwgPSAnaHR0cHM6Ly9naXRlZS5jb20venVvZXowMi9zaXl1YW4tcGx1Z2luLXN5c3RlbS9yYXcvbWFpbi9WRVJTSU9OJztcblxuZXhwb3J0IGNvbnN0IFNDUklQVF9VUkwgPSAnaHR0cHM6Ly9naXRlZS5jb20venVvZXowMi9zaXl1YW4tcGx1Z2luLXN5c3RlbS9yYXcvbWFpbi9tYWluLmpzJztcblxuZXhwb3J0IGNvbnN0IFBMVUdJTl9TWVNfQUJTX1BBVEggPSAnL2RhdGEvd2lkZ2V0cy/mj5Lku7bns7vnu58vcGx1Z2luLmpzJztcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9ICgpID0+ICh7IHRva2VuOiB3aW5kb3cuc2l5dWFuLmNvbmZpZy5hcGkudG9rZW4gfSk7XG5cbmV4cG9ydCBjb25zdCBUWVBFUyA9IHtcbiAgICBTdG9yYWdlTWFuYWdlcjogJ1N0b3JhZ2VNYW5hZ2VyJyxcbiAgICBQbHVnaW5TeXN0ZW06ICdQbHVnaW5TeXN0ZW0nLFxuICAgIFN5c3RlbU1hbmFnZXI6ICdQbHVnaW5TeXN0ZW1Mb2NhbE1hbmFnZXInLFxuICAgIFBsdWdpbkxvYWRlcjogJ1BsdWdpbkxvYWRlcicsXG4gICAgUGx1Z2luRmlsZU1hbmFnZXI6ICdQbHVnaW5GaWxlTWFuYWdlcicsXG4gICAgRXZlbnRCdXM6ICdFdmVudEJ1cycsXG4gICAgU2hvcnRjdXQ6ICdTaG9ydGN1dCcsXG4gICAgQ29tbWFuZE1hbmFnZXI6ICdDb21tYW5kTWFuYWdlcicsXG4gICAgU3RvcmU6ICdTdG9yZScsXG4gICAgU2V0dGluZ01hbmFnZXI6ICdTZXR0aW5nTWFuYWdlcicsXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBnZW5VVUlEIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KHVybCwgZGF0YSkge1xuICAgIGxldCByZXNEYXRhID0gbnVsbDtcbiAgICBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgVG9rZW4gJHtjb25maWcoKS50b2tlbn1gLFxuICAgICAgICB9LFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJlc0RhdGEgPSByZXNwb25zZS5qc29uKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc0RhdGE7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUJvZHkocmVzcG9uc2UpIHtcbiAgICBsZXQgciA9IGF3YWl0IHJlc3BvbnNlO1xuICAgIHJldHVybiByLmNvZGUgPT09IDAgPyByLmRhdGEgOiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHJhbnNhY3Rpb25zKHByb3R5bGUsIHRyYW5zYWN0aW9ucyA9IFtdKSB7XG4gICAgY29uc3QgdXJsID0gJy9hcGkvdHJhbnNhY3Rpb25zJztcbiAgICBjb25zdCB3c191cmwgPSBuZXcgVVJMKHByb3R5bGUud3Mud3MudXJsKTtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBhcHA6IHdzX3VybC5zZWFyY2hQYXJhbXMuZ2V0KCdhcHAnKSxcbiAgICAgICAgc2Vzc2lvbjogd3NfdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2lkJyksXG4gICAgICAgIHRyYW5zYWN0aW9uczogdHJhbnNhY3Rpb25zLFxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3FsKHNxbCkge1xuICAgIGxldCBzcWxkYXRhID0ge1xuICAgICAgICBzdG10OiBzcWwsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvcXVlcnkvc3FsJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBzcWxkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsc05vdGVib29rcyhzcWwpIHtcbiAgICBsZXQgc3FsZGF0YSA9IHsgc3RtdDogc3FsIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL25vdGVib29rL2xzTm90ZWJvb2tzJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBzcWxkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbmNob3IoYW5jaG9yVGV4dCwgbmFtZSkge1xuICAgIGFuY2hvclRleHQgPSBhbmNob3JUZXh0LnJlcGxhY2UoJygoJywgJycpLnJlcGxhY2UoJykpJywgJycpO1xuICAgIGxldCBzcWxTY3JpcHQgPSBgc2VsZWN0ICogZnJvbSBibG9ja3Mgd2hlcmUgaWQgPSAnJHthbmNob3JUZXh0fSdgO1xuICAgIGxldCBzcWxSZXMgPSBhd2FpdCBzcWwoc3FsU2NyaXB0KTtcbiAgICBsZXQgYW5jaG9yID0gJyc7XG4gICAgaWYgKHNxbFJlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNxbFJlc1swXVtuYW1lXSkge1xuICAgICAgICAgICAgICAgIGFuY2hvciA9IHNxbFJlc1swXVtuYW1lXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3FsUmVzWzBdWydjb250ZW50J10pIHtcbiAgICAgICAgICAgICAgICBhbmNob3IgPSBzcWxSZXNbMF1bJ2NvbnRlbnQnXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gYW5jaG9yVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYW5jaG9yID0gJ+ino+aekOmUmeivryc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2hvcjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5Ob3RlYm9vayhub3RlYm9va0lkKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIG5vdGVib29rOiBub3RlYm9va0lkLFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL25vdGVib29rL29wZW5Ob3RlYm9vayc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xuICAgIC8v6L+U5Zue56m65pWw5o2uXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbG9zZU5vdGVib29rKG5vdGVib29rSWQpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgbm90ZWJvb2s6IG5vdGVib29rSWQsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvbm90ZWJvb2svY2xvc2VOb3RlYm9vayc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xuICAgIC8v6L+U5Zue56m65pWw5o2uXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5hbWVOb3RlYm9vayhub3RlYm9va0lkLCBub3RlYm9va05ld05hbWUpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgbm90ZWJvb2s6IG5vdGVib29rSWQsXG4gICAgICAgIG5hbWU6IG5vdGVib29rTmV3TmFtZSxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9ub3RlYm9vay9yZW5hbWVOb3RlYm9vayc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xuICAgIC8v6L+U5Zue56m65pWw5o2uXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVOb3RlYm9vayhub3RlYm9va05hbWUpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgbmFtZTogbm90ZWJvb2tOYW1lLFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL25vdGVib29rL2NyZWF0ZU5vdGVib29rJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG4gICAgLy/ov5Tlm57nqbrmlbDmja5cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbW92ZU5vdGVib29rKG5vdGVib29rSWQpIHtcbiAgICBsZXQgZGF0YSA9IHsgbm90ZWJvb2s6IG5vdGVib29rSWQgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvbm90ZWJvb2svcmVtb3ZlTm90ZWJvb2snO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbiAgICAvL+i/lOWbnuepuuaVsOaNrlxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZWJvb2tDb25mKG5vdGVib29rSWQpIHtcbiAgICBsZXQgZGF0YSA9IHsgbm90ZWJvb2s6IG5vdGVib29rSWQgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvbm90ZWJvb2svZ2V0Tm90ZWJvb2tDb25mJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG4gICAgLy/ov5Tlm57nrJTorrDmnKzphY3nva5cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldE5vdGVib29rQ29uZihub3RlYm9va0lkKSB7XG4gICAgbGV0IGRhdGEgPSB7IG5vdGVib29rOiBub3RlYm9va0lkIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL25vdGVib29rL3NldE5vdGVib29rQ29uZic7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xuICAgIC8v6L+U5Zue56yU6K6w5pys6YWN572uXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5hbWVEb2Mobm90ZWJvb2tJZCwgcGF0aCwgdGl0bGUpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgbm90ZWJvb2s6IG5vdGVib29rSWQsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9maWxldHJlZS9yZW5hbWVEb2MnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbiAgICAvL+i/lOWbnuepuuaVsOaNrlxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlRG9jKG5vdGVib29rSWQsIHBhdGgpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgbm90ZWJvb2s6IG5vdGVib29rSWQsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZmlsZXRyZWUvcmVtb3ZlRG9jJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG4gICAgLy/ov5Tlm57nqbrmlbDmja5cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1vdmVEb2Moc3JjTm90ZWJvb2tJZCwgc3JjUGF0aCwgdGFyZ2V0Tm90ZWJvb2tJZCwgdGFyZ2V0UGF0aCkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBmcm9tTm90ZWJvb2s6IHNyY05vdGVib29rSWQsXG4gICAgICAgIGZyb21QYXRoOiBzcmNQYXRoLFxuICAgICAgICB0b05vdGVib29rOiB0YXJnZXROb3RlYm9va0lkLFxuICAgICAgICB0b1BhdGg6IHRhcmdldFBhdGgsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZmlsZXRyZWUvbW92ZURvYyc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xuICAgIC8v6L+U5Zue56m65pWw5o2uXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIUGF0aEJ5UGF0aChub3RlYm9va0lkLCBwYXRoKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIE5vdGVib29rOiBub3RlYm9va0lkLFxuICAgICAgICBQYXRoOiBwYXRoLFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL2ZpbGV0cmVlL2dldEhQYXRoQnlQYXRoJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG4gICAgLy/ov5Tlm57ot6/lvoRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEhQYXRoQnlJRChJRCkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBpZDogSUQsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZmlsZXRyZWUvZ2V0SFBhdGhCeUlEJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5cbi8v5pqC57y65LiK5Lyg5paH5Lu2XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRCbG9ja0F0dHJzKGJsb2NrSWQpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgaWQ6IGJsb2NrSWQsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvYXR0ci9nZXRCbG9ja0F0dHJzJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRCbG9ja0J5SUQoYmxvY2tJZCkge1xuICAgIGxldCBzcWxTY3JpcHQgPSBgc2VsZWN0ICogZnJvbSBibG9ja3Mgd2hlcmUgaWQgPScke2Jsb2NrSWR9J2A7XG4gICAgbGV0IGRhdGEgPSBhd2FpdCBzcWwoc3FsU2NyaXB0KTtcbiAgICByZXR1cm4gZGF0YVswXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEJsb2NrS3JhbWRvd24oYmxvY2tJZCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiBibG9ja0lkLFxuICAgIH07XG4gICAgY29uc3QgdXJsID0gJy9hcGkvYmxvY2svZ2V0QmxvY2tLcmFtZG93bic7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QmxvY2tCcmVhZGNydW1iKElEKSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6IElELFxuICAgIH07XG4gICAgY29uc3QgdXJsID0gJy9hcGkvYmxvY2svZ2V0QmxvY2tCcmVhZGNydW1iJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRCbG9ja0F0dHJzKGJsb2NrSWQsIGF0dHJzKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL2F0dHIvc2V0QmxvY2tBdHRycyc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShcbiAgICAgICAgcmVxdWVzdCh1cmwsIHtcbiAgICAgICAgICAgIGlkOiBibG9ja0lkLFxuICAgICAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICB9KVxuICAgICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHBvcnRNZENvbnRlbnQoZG9jSWQpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgaWQ6IGRvY0lkLFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL2V4cG9ydC9leHBvcnRNZENvbnRlbnQnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbiAgICAvL+aWh+aho2hlcGF0aOS4jk1hcmtkb3duIOWGheWuuVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RG9jT3V0bGluZShkb2NJZCkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBpZDogZG9jSWQsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvb3V0bGluZS9nZXREb2NPdXRsaW5lJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaXN0RG9jc0J5UGF0aChwYXRoKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZmlsZXRyZWUvbGlzdERvY3NCeVBhdGgnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbiAgICAvL+aWh+aho2hlcGF0aOS4jk1hcmtkb3duIOWGheWuuVxufVxuXG5mdW5jdGlvbiBodG1s6L2s5LmJKHRleHQpIHtcbiAgICB2YXIgdGVtcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGVtcEVsLmlubmVySFRNTCA9IHRleHQ7XG4gICAgdmFyIG91dHB1dCA9IHRlbXBFbC5pbm5lclRleHQgfHwgdGVtcEVsLnRleHRDb250ZW50O1xuICAgIHRlbXBFbCA9IG51bGw7XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEJhY2tsaW5rKGlkKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgYmVmb3JlTGVuOiAxMCxcbiAgICAgICAgazogJycsXG4gICAgICAgIG1rOiAnJyxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9yZWYvZ2V0QmFja2xpbmsnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaEVtYmVkQmxvY2soZXhjbHVkZUlkcywgc3FsKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHN0bXQ6IHNxbCxcbiAgICAgICAgZXhjbHVkZUlEczogZXhjbHVkZUlkcyxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9zZWFyY2gvc2VhcmNoRW1iZWRCbG9jayc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERvYyhpZCkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGs6ICcnLFxuICAgICAgICBtb2RlOiAyLFxuICAgICAgICBzaXplOiAzNixcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9maWxldHJlZS9nZXREb2MnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGb2N1c2VkRG9jKGlkKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgazogJycsXG4gICAgICAgIG1vZGU6IDAsXG4gICAgICAgIHNpemU6IDM2LFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL2ZpbGV0cmVlL2dldERvYyc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRhZygpIHtcbiAgICBsZXQgZGF0YSA9IHt9O1xuICAgIGxldCB1cmwgPSAnL2FwaS90YWcvZ2V0VGFnJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxHcmFwaChrLCBpZCwgY29uZiwgcmVxSWQpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBrOiBrLFxuICAgICAgICBjb25mOiBjb25mLFxuICAgICAgICByZXFJZDogcmVxSWQsXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZ3JhcGgvZ2V0TG9jYWxHcmFwaCc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEdyYXBoKGssIGNvbmYsIHJlcUlkKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGs6IGssXG4gICAgICAgIGNvbmY6IGNvbmYsXG4gICAgICAgIHJlcUlkOiByZXFJZCxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9ncmFwaC9nZXRHcmFwaCc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoRG9jcyhrKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGs6IGssXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvZmlsZXRyZWUvc2VhcmNoRG9jcyc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaEJsb2NrKHF1ZXJ5KSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICB9O1xuICAgIGxldCB1cmwgPSAnL2FwaS9zZWFyY2gvc2VhcmNoQmxvY2snO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hUZW1wbGF0ZShrKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGs6IGssXG4gICAgfTtcbiAgICBsZXQgdXJsID0gJy9hcGkvc2VhcmNoL3NlYXJjaFRlbXBsYXRlJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBkYXRhKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVEb2NXaXRoTWQobm90ZWJvb2ssIHBhdGgsIG1hcmtkb3duKSB7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIG5vdGVib29rOiBub3RlYm9vayxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgbWFya2Rvd246IG1hcmtkb3duLFxuICAgIH07XG4gICAgbGV0IHVybCA9ICcvYXBpL2ZpbGV0cmVlL2NyZWF0ZURvY1dpdGhNZCc7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9jU2F2ZUFzVGVtcGxhdGUoaWQsIG92ZXJ3cml0ZSA9IGZhbHNlKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL3RlbXBsYXRlL2RvY1NhdmVBc1RlbXBsYXRlJztcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBvdmVyd3JpdGU6IG92ZXJ3cml0ZSxcbiAgICB9O1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIGRhdGEpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlcihkYXRhKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL3RlbXBsYXRlL3JlbmRlcic7XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zZXJ0QmxvY2socHJldmlvdXNJRCwgZGF0YVR5cGUsIGRhdGEpIHtcbiAgICBsZXQgdXJsID0gJy9hcGkvYmxvY2svaW5zZXJ0QmxvY2snO1xuICAgIHJldHVybiBwYXJzZUJvZHkoXG4gICAgICAgIHJlcXVlc3QoXG4gICAgICAgICAgICAodXJsID0gdXJsKSxcbiAgICAgICAgICAgIChkYXRhID0ge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzSUQ6IHByZXZpb3VzSUQsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IGRhdGFUeXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBlbmRCbG9jayhwYXJlbnRJRCwgZGF0YVR5cGUsIGRhdGEpIHtcbiAgICBsZXQgdXJsID0gJy9hcGkvYmxvY2svcHJlcGVuZEJsb2NrJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KFxuICAgICAgICByZXF1ZXN0KFxuICAgICAgICAgICAgKHVybCA9IHVybCksXG4gICAgICAgICAgICAoZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IGRhdGFUeXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcHBlbmRCbG9jayhwYXJlbnRJRCwgZGF0YVR5cGUsIGRhdGEpIHtcbiAgICBsZXQgdXJsID0gJy9hcGkvYmxvY2svYXBwZW5kQmxvY2snO1xuICAgIHJldHVybiBwYXJzZUJvZHkoXG4gICAgICAgIHJlcXVlc3QoXG4gICAgICAgICAgICAodXJsID0gdXJsKSxcbiAgICAgICAgICAgIChkYXRhID0ge1xuICAgICAgICAgICAgICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogZGF0YVR5cGUsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQmxvY2soaWQsIGRhdGFUeXBlLCBkYXRhKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL2Jsb2NrL3VwZGF0ZUJsb2NrJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KFxuICAgICAgICByZXF1ZXN0KFxuICAgICAgICAgICAgKHVybCA9IHVybCksXG4gICAgICAgICAgICAoZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IGRhdGFUeXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrKGlkKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL2Jsb2NrL2RlbGV0ZUJsb2NrJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCB7IGlkIH0pKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1vdmVCbG9jayhpZDogc3RyaW5nLCBwcmV2aW91c0lEOiBzdHJpbmcsIHBhcmVudElEOiBzdHJpbmcpIHtcbiAgICBsZXQgdXJsID0gJy9hcGkvYmxvY2svbW92ZUJsb2NrJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KFxuICAgICAgICByZXF1ZXN0KHVybCwgeyBpZDogaWQsIHByZXZpb3VzSUQ6IHByZXZpb3VzSUQsIHBhcmVudElEOiBwYXJlbnRJRCB9KVxuICAgICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeXNGb250cygpIHtcbiAgICBsZXQgdXJsID0gJy9hcGkvc3lzdGVtL2dldFN5c0ZvbnRzJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBudWxsKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGaWxlKHBhdGg6IHN0cmluZywgdHlwZTogJ2pzb24nIHwgJ3RleHQnID0gJ3RleHQnKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9maWxlL2dldEZpbGUnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgVG9rZW4gJHtjb25maWcoKS50b2tlbn1gLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkuZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1dEZpbGUocGF0aCwgZmlsZWRhdGEsIGlzRGlyID0gZmFsc2UsIG1vZFRpbWUgPSBEYXRlLm5vdygpKSB7XG4gICAgbGV0IGJsb2IgPSBuZXcgQmxvYihbZmlsZWRhdGFdKTtcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgcGF0aC5zcGxpdCgnLycpLnBvcCgpKTtcbiAgICBsZXQgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtZGF0YS5hcHBlbmQoJ3BhdGgnLCBwYXRoKTtcbiAgICBmb3JtZGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICBmb3JtZGF0YS5hcHBlbmQoJ2lzRGlyJywgU3RyaW5nKGlzRGlyKSk7XG4gICAgZm9ybWRhdGEuYXBwZW5kKCdtb2RUaW1lJywgU3RyaW5nKG1vZFRpbWUpKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGUvcHV0RmlsZScsIHtcbiAgICAgICAgYm9keTogZm9ybWRhdGEsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgVG9rZW4gJHtjb25maWcoKS50b2tlbn1gLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBlbHNlIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZERpcihwYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGUvcmVhZERpcicsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBUb2tlbiAke2NvbmZpZygpLnRva2VufWAsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIH0pLFxuICAgIH0pO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICByZXR1cm4gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkuZGF0YTtcbiAgICB9O1xuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlRmlsZShwYXRoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9maWxlL3JlbW92ZUZpbGUnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgVG9rZW4gJHtjb25maWcoKS50b2tlbn1gLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHJldHVybjtcbiAgICBlbHNlIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBsYW5ndWFnZSA9IHdpbmRvdy50aGVtZT8ubGFuZ3VhZ2VNb2RlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVzaE1zZyhtZXNzYWdlID0gbnVsbCwgdGV4dCA9IG51bGwsIHRpbWVvdXQgPSA3MDAwKSB7XG4gICAgY29uc3QgdXJsID0gJy9hcGkvbm90aWZpY2F0aW9uL3B1c2hNc2cnO1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIG1zZzogbWVzc2FnZSA/IG1lc3NhZ2VbbGFuZ3VhZ2VdIHx8IG1lc3NhZ2Uub3RoZXIgOiB0ZXh0LFxuICAgICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVzaEVyck1zZyhtZXNzYWdlID0gbnVsbCwgdGV4dCA9IG51bGwsIHRpbWVvdXQgPSA3MDAwKSB7XG4gICAgY29uc3QgdXJsID0gJy9hcGkvbm90aWZpY2F0aW9uL3B1c2hFcnJNc2cnO1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIG1zZzogbWVzc2FnZSA/IG1lc3NhZ2VbbGFuZ3VhZ2VdIHx8IG1lc3NhZ2Uub3RoZXIgOiB0ZXh0LFxuICAgICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0U3RvcmFnZVZhbChrZXk6IHN0cmluZywgdmFsOiBhbnkpIHtcbiAgICBjb25zdCB1cmwgPSAnL2FwaS9zdG9yYWdlL3NldExvY2FsU3RvcmFnZVZhbCc7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgYXBwOiBnZW5VVUlEKCksXG4gICAgICAgIGtleSxcbiAgICAgICAgdmFsLFxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQm9keShyZXF1ZXN0KHVybCwgZGF0YSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIGNvbnN0IHVybCA9ICcvYXBpL3N0b3JhZ2UvZ2V0TG9jYWxTdG9yYWdlJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCBudWxsKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJTcHJpZyhzcHJpZzogc3RyaW5nKSB7XG4gICAgbGV0IHVybCA9ICcvYXBpL3RlbXBsYXRlL3JlbmRlclNwcmlnJztcbiAgICByZXR1cm4gcGFyc2VCb2R5KHJlcXVlc3QodXJsLCB7dGVtcGxhdGU6IHNwcmlnfSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QmF6emFyV2lkZ2V0KCkge1xuICAgIGNvbnN0IHVybCA9ICcvYXBpL2JhemFhci9nZXRCYXphYXJXaWRnZXQnO1xuICAgIHJldHVybiBwYXJzZUJvZHkocmVxdWVzdCh1cmwsIG51bGwpKTtcbn1cbiIsImltcG9ydCAqIGFzIHNlcnZlckFwaSBmcm9tICcuLi8uLi9hcGkvc2VydmVyLWFwaSc7XG5pbXBvcnQgeyBJTm90aWNhdGlvbk9wdGlvbiwgSU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbiBpbXBsZW1lbnRzIElOb3RpZmljYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uOiBJTm90aWNhdGlvbk9wdGlvbikge31cblxuICAgIHNob3coKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbi50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBzZXJ2ZXJBcGkucHVzaEVyck1zZyhudWxsLCB0aGlzLm9wdGlvbi5tZXNzYWdlLCB0aGlzLm9wdGlvbi50aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlcnZlckFwaS5wdXNoTXNnKG51bGwsIHRoaXMub3B0aW9uLm1lc3NhZ2UsIHRoaXMub3B0aW9uLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwidmFyIHogPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgRCA9IChpLCBlLCB0KSA9PiBlIGluIGkgPyB6KGksIGUsIHsgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCwgdmFsdWU6IHQgfSkgOiBpW2VdID0gdDtcbnZhciBfID0gKGksIGUsIHQpID0+IChEKGksIHR5cGVvZiBlICE9IFwic3ltYm9sXCIgPyBlICsgXCJcIiA6IGUsIHQpLCB0KTtcbnZhciBQID0gdHlwZW9mIGdsb2JhbFRoaXMgPCBcInVcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsIDwgXCJ1XCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA8IFwidVwiID8gc2VsZiA6IHt9LCBiID0ge30sIFcgPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBiO1xuICB9LFxuICBzZXQgZXhwb3J0cyhpKSB7XG4gICAgYiA9IGk7XG4gIH1cbn07XG4oZnVuY3Rpb24oaSkge1xuICAoZnVuY3Rpb24oZSwgdCkge1xuICAgIGkuZXhwb3J0cyA/IGkuZXhwb3J0cyA9IHQoKSA6IGUubG9nID0gdCgpO1xuICB9KShQLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IGZ1bmN0aW9uKCkge1xuICAgIH0sIHQgPSBcInVuZGVmaW5lZFwiLCBsID0gdHlwZW9mIHdpbmRvdyAhPT0gdCAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRvciAhPT0gdCAmJiAvVHJpZGVudFxcL3xNU0lFIC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCksIHAgPSBbXG4gICAgICBcInRyYWNlXCIsXG4gICAgICBcImRlYnVnXCIsXG4gICAgICBcImluZm9cIixcbiAgICAgIFwid2FyblwiLFxuICAgICAgXCJlcnJvclwiXG4gICAgXTtcbiAgICBmdW5jdGlvbiBjKGEsIHMpIHtcbiAgICAgIHZhciBmID0gYVtzXTtcbiAgICAgIGlmICh0eXBlb2YgZi5iaW5kID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGYuYmluZChhKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGYsIGEpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KGYsIFthLCBhcmd1bWVudHNdKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZygpIHtcbiAgICAgIGNvbnNvbGUubG9nICYmIChjb25zb2xlLmxvZy5hcHBseSA/IGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cykgOiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkoY29uc29sZS5sb2csIFtjb25zb2xlLCBhcmd1bWVudHNdKSksIGNvbnNvbGUudHJhY2UgJiYgY29uc29sZS50cmFjZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3KGEpIHtcbiAgICAgIHJldHVybiBhID09PSBcImRlYnVnXCIgJiYgKGEgPSBcImxvZ1wiKSwgdHlwZW9mIGNvbnNvbGUgPT09IHQgPyAhMSA6IGEgPT09IFwidHJhY2VcIiAmJiBsID8gZyA6IGNvbnNvbGVbYV0gIT09IHZvaWQgMCA/IGMoY29uc29sZSwgYSkgOiBjb25zb2xlLmxvZyAhPT0gdm9pZCAwID8gYyhjb25zb2xlLCBcImxvZ1wiKSA6IGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIEUoYSwgcykge1xuICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPCBwLmxlbmd0aDsgZisrKSB7XG4gICAgICAgIHZhciBvID0gcFtmXTtcbiAgICAgICAgdGhpc1tvXSA9IGYgPCBhID8gZSA6IHRoaXMubWV0aG9kRmFjdG9yeShvLCBhLCBzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nID0gdGhpcy5kZWJ1ZztcbiAgICB9XG4gICAgZnVuY3Rpb24gRihhLCBzLCBmKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSB0ICYmIChFLmNhbGwodGhpcywgcywgZiksIHRoaXNbYV0uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiByKGEsIHMsIGYpIHtcbiAgICAgIHJldHVybiB3KGEpIHx8IEYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdihhLCBzLCBmKSB7XG4gICAgICB2YXIgbyA9IHRoaXMsIE87XG4gICAgICBzID0gcyA/PyBcIldBUk5cIjtcbiAgICAgIHZhciB1ID0gXCJsb2dsZXZlbFwiO1xuICAgICAgdHlwZW9mIGEgPT0gXCJzdHJpbmdcIiA/IHUgKz0gXCI6XCIgKyBhIDogdHlwZW9mIGEgPT0gXCJzeW1ib2xcIiAmJiAodSA9IHZvaWQgMCk7XG4gICAgICBmdW5jdGlvbiBDKG4pIHtcbiAgICAgICAgdmFyIGQgPSAocFtuXSB8fCBcInNpbGVudFwiKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSB0IHx8ICF1KSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3VdID0gZDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPSBlbmNvZGVVUklDb21wb25lbnQodSkgKyBcIj1cIiArIGQgKyBcIjtcIjtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGsoKSB7XG4gICAgICAgIHZhciBuO1xuICAgICAgICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSB0IHx8ICF1KSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuID0gd2luZG93LmxvY2FsU3RvcmFnZVt1XTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBuID09PSB0KVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGQgPSB3aW5kb3cuZG9jdW1lbnQuY29va2llLCBtID0gZC5pbmRleE9mKFxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh1KSArIFwiPVwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG0gIT09IC0xICYmIChuID0gL14oW147XSspLy5leGVjKGQuc2xpY2UobSkpWzFdKTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvLmxldmVsc1tuXSA9PT0gdm9pZCAwICYmIChuID0gdm9pZCAwKSwgbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVigpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gdCB8fCAhdSkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9IGVuY29kZVVSSUNvbXBvbmVudCh1KSArIFwiPTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIFVUQ1wiO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgby5uYW1lID0gYSwgby5sZXZlbHMgPSB7XG4gICAgICAgIFRSQUNFOiAwLFxuICAgICAgICBERUJVRzogMSxcbiAgICAgICAgSU5GTzogMixcbiAgICAgICAgV0FSTjogMyxcbiAgICAgICAgRVJST1I6IDQsXG4gICAgICAgIFNJTEVOVDogNVxuICAgICAgfSwgby5tZXRob2RGYWN0b3J5ID0gZiB8fCByLCBvLmdldExldmVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfSwgby5zZXRMZXZlbCA9IGZ1bmN0aW9uKG4sIGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuID09IFwic3RyaW5nXCIgJiYgby5sZXZlbHNbbi50b1VwcGVyQ2FzZSgpXSAhPT0gdm9pZCAwICYmIChuID0gby5sZXZlbHNbbi50b1VwcGVyQ2FzZSgpXSksIHR5cGVvZiBuID09IFwibnVtYmVyXCIgJiYgbiA+PSAwICYmIG4gPD0gby5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgaWYgKE8gPSBuLCBkICE9PSAhMSAmJiBDKG4pLCBFLmNhbGwobywgbiwgYSksIHR5cGVvZiBjb25zb2xlID09PSB0ICYmIG4gPCBvLmxldmVscy5TSUxFTlQpXG4gICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICB0aHJvdyBcImxvZy5zZXRMZXZlbCgpIGNhbGxlZCB3aXRoIGludmFsaWQgbGV2ZWw6IFwiICsgbjtcbiAgICAgIH0sIG8uc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24obikge1xuICAgICAgICBzID0gbiwgaygpIHx8IG8uc2V0TGV2ZWwobiwgITEpO1xuICAgICAgfSwgby5yZXNldExldmVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG8uc2V0TGV2ZWwocywgITEpLCBWKCk7XG4gICAgICB9LCBvLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgby5zZXRMZXZlbChvLmxldmVscy5UUkFDRSwgbik7XG4gICAgICB9LCBvLmRpc2FibGVBbGwgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG8uc2V0TGV2ZWwoby5sZXZlbHMuU0lMRU5ULCBuKTtcbiAgICAgIH07XG4gICAgICB2YXIgeSA9IGsoKTtcbiAgICAgIHkgPT0gbnVsbCAmJiAoeSA9IHMpLCBvLnNldExldmVsKHksICExKTtcbiAgICB9XG4gICAgdmFyIEwgPSBuZXcgdigpLCBoID0ge307XG4gICAgTC5nZXRMb2dnZXIgPSBmdW5jdGlvbihzKSB7XG4gICAgICBpZiAodHlwZW9mIHMgIT0gXCJzeW1ib2xcIiAmJiB0eXBlb2YgcyAhPSBcInN0cmluZ1wiIHx8IHMgPT09IFwiXCIpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgdmFyIGYgPSBoW3NdO1xuICAgICAgcmV0dXJuIGYgfHwgKGYgPSBoW3NdID0gbmV3IHYoXG4gICAgICAgIHMsXG4gICAgICAgIEwuZ2V0TGV2ZWwoKSxcbiAgICAgICAgTC5tZXRob2RGYWN0b3J5XG4gICAgICApKSwgZjtcbiAgICB9O1xuICAgIHZhciBHID0gdHlwZW9mIHdpbmRvdyAhPT0gdCA/IHdpbmRvdy5sb2cgOiB2b2lkIDA7XG4gICAgcmV0dXJuIEwubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IHQgJiYgd2luZG93LmxvZyA9PT0gTCAmJiAod2luZG93LmxvZyA9IEcpLCBMO1xuICAgIH0sIEwuZ2V0TG9nZ2VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGg7XG4gICAgfSwgTC5kZWZhdWx0ID0gTCwgTDtcbiAgfSk7XG59KShXKTtcbnZhciBSID0ge30sIEIgPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBSO1xuICB9LFxuICBzZXQgZXhwb3J0cyhpKSB7XG4gICAgUiA9IGk7XG4gIH1cbn07XG4oZnVuY3Rpb24oaSkge1xuICAoZnVuY3Rpb24oZSwgdCkge1xuICAgIGkuZXhwb3J0cyA/IGkuZXhwb3J0cyA9IHQoKSA6IGUucHJlZml4ID0gdChlKTtcbiAgfSkoUCwgZnVuY3Rpb24oZSkge1xuICAgIHZhciB0ID0gZnVuY3Rpb24ocikge1xuICAgICAgZm9yICh2YXIgdiA9IDEsIEwgPSBhcmd1bWVudHMubGVuZ3RoLCBoOyB2IDwgTDsgdisrKVxuICAgICAgICBmb3IgKGggaW4gYXJndW1lbnRzW3ZdKVxuICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbdl0sIGgpICYmIChyW2hdID0gYXJndW1lbnRzW3ZdW2hdKTtcbiAgICAgIHJldHVybiByO1xuICAgIH0sIGwgPSB7XG4gICAgICB0ZW1wbGF0ZTogXCJbJXRdICVsOlwiLFxuICAgICAgbGV2ZWxGb3JtYXR0ZXI6IGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgcmV0dXJuIHIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0sXG4gICAgICBuYW1lRm9ybWF0dGVyOiBmdW5jdGlvbihyKSB7XG4gICAgICAgIHJldHVybiByIHx8IFwicm9vdFwiO1xuICAgICAgfSxcbiAgICAgIHRpbWVzdGFtcEZvcm1hdHRlcjogZnVuY3Rpb24ocikge1xuICAgICAgICByZXR1cm4gci50b1RpbWVTdHJpbmcoKS5yZXBsYWNlKC8uKihcXGR7Mn06XFxkezJ9OlxcZHsyfSkuKi8sIFwiJDFcIik7XG4gICAgICB9LFxuICAgICAgZm9ybWF0OiB2b2lkIDBcbiAgICB9LCBwLCBjID0ge30sIGcgPSBmdW5jdGlvbihyKSB7XG4gICAgICBpZiAoIXIgfHwgIXIuZ2V0TG9nZ2VyKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgcm9vdCBsb2dnZXJcIik7XG4gICAgICBwID0gcjtcbiAgICB9LCB3ID0gZnVuY3Rpb24ociwgdikge1xuICAgICAgaWYgKCFyIHx8ICFyLnNldExldmVsKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgbG9nZ2VyXCIpO1xuICAgICAgdmFyIEwgPSByLm1ldGhvZEZhY3RvcnksIGggPSByLm5hbWUgfHwgXCJcIiwgRyA9IGNbaF0gfHwgY1tcIlwiXSB8fCBsO1xuICAgICAgZnVuY3Rpb24gYShzLCBmLCBvKSB7XG4gICAgICAgIHZhciBPID0gTChzLCBmLCBvKSwgdSA9IGNbb10gfHwgY1tcIlwiXSwgQyA9IHUudGVtcGxhdGUuaW5kZXhPZihcIiV0XCIpICE9PSAtMSwgayA9IHUudGVtcGxhdGUuaW5kZXhPZihcIiVsXCIpICE9PSAtMSwgViA9IHUudGVtcGxhdGUuaW5kZXhPZihcIiVuXCIpICE9PSAtMTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAodmFyIHkgPSBcIlwiLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgZCA9IEFycmF5KG4pLCBtID0gMDsgbSA8IG47IG0rKylcbiAgICAgICAgICAgIGRbbV0gPSBhcmd1bWVudHNbbV07XG4gICAgICAgICAgaWYgKGggfHwgIWNbb10pIHtcbiAgICAgICAgICAgIHZhciB4ID0gdS50aW1lc3RhbXBGb3JtYXR0ZXIobmV3IERhdGUoKSksIFUgPSB1LmxldmVsRm9ybWF0dGVyKHMpLCBBID0gdS5uYW1lRm9ybWF0dGVyKG8pO1xuICAgICAgICAgICAgdS5mb3JtYXQgPyB5ICs9IHUuZm9ybWF0KFUsIEEsIHgpIDogKHkgKz0gdS50ZW1wbGF0ZSwgQyAmJiAoeSA9IHkucmVwbGFjZSgvJXQvLCB4KSksIGsgJiYgKHkgPSB5LnJlcGxhY2UoLyVsLywgVSkpLCBWICYmICh5ID0geS5yZXBsYWNlKC8lbi8sIEEpKSksIGQubGVuZ3RoICYmIHR5cGVvZiBkWzBdID09IFwic3RyaW5nXCIgPyBkWzBdID0geSArIFwiIFwiICsgZFswXSA6IGQudW5zaGlmdCh5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgTy5hcHBseSh2b2lkIDAsIGQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNbaF0gfHwgKHIubWV0aG9kRmFjdG9yeSA9IGEpLCB2ID0gdiB8fCB7fSwgdi50ZW1wbGF0ZSAmJiAodi5mb3JtYXQgPSB2b2lkIDApLCBjW2hdID0gdCh7fSwgRywgdiksIHIuc2V0TGV2ZWwoci5nZXRMZXZlbCgpKSwgcCB8fCByLndhcm4oXG4gICAgICAgIFwiSXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHJlZygpIG9mIGxvZ2xldmVsLXBsdWdpbi1wcmVmaXggYmVmb3JlIGNhbGxpbmcgYXBwbHkuIEZyb20gdGhlIG5leHQgcmVsZWFzZSwgaXQgd2lsbCB0aHJvdyBhbiBlcnJvci4gU2VlIG1vcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9rdXR1bHVrL2xvZ2xldmVsLXBsdWdpbi1wcmVmaXgvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kXCJcbiAgICAgICksIHI7XG4gICAgfSwgRSA9IHtcbiAgICAgIHJlZzogZyxcbiAgICAgIGFwcGx5OiB3XG4gICAgfSwgRjtcbiAgICByZXR1cm4gZSAmJiAoRiA9IGUucHJlZml4LCBFLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlLnByZWZpeCA9PT0gRSAmJiAoZS5wcmVmaXggPSBGKSwgRTtcbiAgICB9KSwgRTtcbiAgfSk7XG59KShCKTtcbmNsYXNzIFQge1xufVxuXyhULCBcIkxPR19MRVZFTF9LRVlcIiwgXCJWSVRFX0xPR19MRVZFTFwiKSwgXyhULCBcIkxPR19QUkVGSVhfS0VZXCIsIFwiVklURV9MT0dfUFJFRklYXCIpO1xudmFyIFMgPSAvKiBAX19QVVJFX18gKi8gKChpKSA9PiAoaS5MT0dfTEVWRUxfREVCVUcgPSBcIkRFQlVHXCIsIGkuTE9HX0xFVkVMX0lORk8gPSBcIklORk9cIiwgaS5MT0dfTEVWRUxfV0FSTiA9IFwiV0FSTlwiLCBpLkxPR19MRVZFTF9FUlJPUiA9IFwiRVJST1JcIiwgaSkpKFMgfHwge30pO1xuZnVuY3Rpb24gSygpIHtcbiAgY29uc3QgaSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9ICh0LCBsKSA9PiBsO1xuICBjb25zdCBlID0gbmV3IEVycm9yKCkuc3RhY2suc2xpY2UoMSk7XG4gIHJldHVybiBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IGksIGU7XG59XG5jbGFzcyBJIHtcbiAgLyoqXG4gICAqIOino+aekOaXpeW/l+e6p+WIq+S4uuaemuS4vlxuICAgKlxuICAgKiBAcGFyYW0gZW51bU9iaiDmnprkuL7lr7nosaFcbiAgICogQHBhcmFtIHZhbHVlIOmFjee9rueahOWAvFxuICAgKi9cbiAgc3RhdGljIHN0cmluZ1RvRW51bVZhbHVlKGUsIHQpIHtcbiAgICByZXR1cm4gZVtPYmplY3Qua2V5cyhlKS5maWx0ZXIoXG4gICAgICAobCkgPT4gZVtsXS50b1N0cmluZygpID09PSB0XG4gICAgKVswXV07XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPlumFjee9rueahOaXpeW/l+e6p+WIq1xuICAgKi9cbiAgc3RhdGljIGdldEVudkxldmVsKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgdCA9IGUuZ2V0RW52T3JEZWZhdWx0KFxuICAgICAgVC5MT0dfTEVWRUxfS0VZLFxuICAgICAgUy5MT0dfTEVWRUxfSU5GT1xuICAgICksIGwgPSBJLnN0cmluZ1RvRW51bVZhbHVlKFxuICAgICAgUyxcbiAgICAgIHQudG9VcHBlckNhc2UoKVxuICAgICk7XG4gICAgcmV0dXJuIGwgfHwgY29uc29sZS53YXJuKFxuICAgICAgXCJbemhpLWxvZ10gTE9HX0xFVkVMIGlzIGludmFsaWQgaW4geW91IC5lbnYgZmlsZS5NdXN0IGJlIGVpdGhlciBkZWJ1ZywgaW5mbywgd2FybiBvciBlcnJvciwgZmFsbGJhY2sgdG8gZGVmYXVsdCBpbmZvIGxldmVsXCJcbiAgICApLCBsO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5bpu5jorqTml6Xlv5dcbiAgICovXG4gIHN0YXRpYyBnZXRFbnZMb2dnZXIoZSkge1xuICAgIGlmIChlKVxuICAgICAgcmV0dXJuIGUuZ2V0RW52KFQuTE9HX1BSRUZJWF9LRVkpO1xuICB9XG59XG5jbGFzcyBZIHtcbiAgY29uc3RydWN0b3IoZSwgdCwgbCkge1xuICAgIF8odGhpcywgXCJjb25zb2xlTG9nZ2VyXCIsIFwiY29uc29sZVwiKTtcbiAgICBfKHRoaXMsIFwic3RhY2tTaXplXCIsIDEpO1xuICAgIC8qKlxuICAgICAqIOiOt+WPluaXpeW/l+iusOW9leWZqFxuICAgICAqXG4gICAgICogQHBhcmFtIGxvZ2dlck5hbWUgLSDml6Xlv5forrDlvZXlmajvvIzpu5jorqTkuLogY29uc29sZVxuICAgICAqIEBhdXRob3IgdGVyd2VyXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgXyh0aGlzLCBcImdldExvZ2dlclwiLCAoZSkgPT4ge1xuICAgICAgbGV0IHQ7XG4gICAgICBpZiAoZSlcbiAgICAgICAgdCA9IGU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuZ2V0Q2FsbFN0YWNrKCksIHAgPSBbXSwgYyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBnID0gMDsgZyA8IGwubGVuZ3RoOyBnKyspIHtcbiAgICAgICAgICBjb25zdCB3ID0gbFtnXSwgRSA9IHcuZ2V0RmlsZU5hbWUoKSA/PyBcIm5vbmVcIjtcbiAgICAgICAgICBpZiAoZyA+IHRoaXMuc3RhY2tTaXplIC0gMSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNvbnN0IEYgPSBFICsgXCItXCIgKyB3LmdldExpbmVOdW1iZXIoKSArIFwiOlwiICsgdy5nZXRDb2x1bW5OdW1iZXIoKTtcbiAgICAgICAgICBwLnB1c2goRik7XG4gICAgICAgIH1cbiAgICAgICAgYy5sZW5ndGggPiAwICYmICh0ID0gcC5qb2luKFwiIC0+IFwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKCF0IHx8IHQudHJpbSgpLmxlbmd0aCA9PT0gMCkgJiYgKHQgPSB0aGlzLmNvbnNvbGVMb2dnZXIpLCBiLmdldExvZ2dlcih0KTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YWNrU2l6ZSA9IDE7XG4gICAgbGV0IHA7XG4gICAgZSA/IHAgPSBlIDogcCA9IEkuZ2V0RW52TGV2ZWwobCksIHAgPSBwID8/IFMuTE9HX0xFVkVMX0lORk8sIGIuc2V0TGV2ZWwocCk7XG4gICAgY29uc3QgYyA9IHtcbiAgICAgIGdyYXk6IChnKSA9PiBnLnRvU3RyaW5nKCksXG4gICAgICBncmVlbjogKGcpID0+IGcudG9TdHJpbmcoKSxcbiAgICAgIHllbGxvdzogKGcpID0+IGcudG9TdHJpbmcoKSxcbiAgICAgIHJlZDogKGcpID0+IGcudG9TdHJpbmcoKVxuICAgIH07XG4gICAgUi5yZWcoYiksIFIuYXBwbHkoYiwge1xuICAgICAgZm9ybWF0KGcsIHcsIEUpIHtcbiAgICAgICAgY29uc3QgciA9IFtcIltcIiArICh0ID8/IEkuZ2V0RW52TG9nZ2VyKGwpID8/IFwiemhpXCIpICsgXCJdXCJdO1xuICAgICAgICBzd2l0Y2ggKHIucHVzaChcbiAgICAgICAgICBjLmdyYXkoXCJbXCIpICsgYy5ncmVlbihFKS50b1N0cmluZygpICsgYy5ncmF5KFwiXVwiKVxuICAgICAgICApLCBnKSB7XG4gICAgICAgICAgY2FzZSBTLkxPR19MRVZFTF9ERUJVRzpcbiAgICAgICAgICAgIHIucHVzaChjLmdyYXkoZy50b1VwcGVyQ2FzZSgpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUy5MT0dfTEVWRUxfSU5GTzpcbiAgICAgICAgICAgIHIucHVzaChjLmdyZWVuKGcudG9VcHBlckNhc2UoKS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFMuTE9HX0xFVkVMX1dBUk46XG4gICAgICAgICAgICByLnB1c2goYy55ZWxsb3coZy50b1VwcGVyQ2FzZSgpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUy5MT0dfTEVWRUxfRVJST1I6XG4gICAgICAgICAgICByLnB1c2goYy5yZWQoZy50b1VwcGVyQ2FzZSgpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByLnB1c2goYy5ncmVlbih3KS50b1N0cmluZygpKSwgci5wdXNoKGMuZ3JheShcIjpcIikpLCByLmpvaW4oXCIgXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiDorr7nva7ovpPlh7rmoIjnmoTmt7HluqbvvIzpu5jorqQxXG4gICAqXG4gICAqIEBwYXJhbSBzdGFja1NpemUgLSDmoIjnmoTmt7HluqZcbiAgICovXG4gIHNldFN0YWNrU2l6ZShlKSB7XG4gICAgdGhpcy5zdGFja1NpemUgPSBlID8/IDE7XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPluiwg+eUqOWghuagiO+8jOiLpeacquiOt+WPluWIsOebtOaOpei/lOWbnuepuuaVsOe7hFxuICAgKlxuICAgKiBAYXV0aG9yIHRlcndlclxuICAgKiBAc2luY2UgMS42LjBcbiAgICovXG4gIGdldENhbGxTdGFjaygpIHtcbiAgICBsZXQgZTtcbiAgICB0cnkge1xuICAgICAgZSA9IEsoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGUgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cbmNsYXNzIFgge1xuICAvKipcbiAgICog6buY6K6k5pel5b+X57qn5YirXG4gICAqXG4gICAqIEBwYXJhbSBsZXZlbCAtIOWPr+mAie+8jOacquiuvue9rum7mOiupElORk9cbiAgICogQHBhcmFtIHNpZ24gLSDlj6/pgInliY3nvIDvvIzpu5jorqR6aGlcbiAgICogQHBhcmFtIGVudiAtIOWPr+mAieeOr+Wig+WPmOmHj+WunuS+i1xuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCwgbCkge1xuICAgIF8odGhpcywgXCJsb2dnZXJcIik7XG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgWShlLCB0LCBsKTtcbiAgfVxuICAvKipcbiAgICog6I635Y+W5pel5b+X6K6w5b2V5ZmoXG4gICAqXG4gICAqIEBwYXJhbSBsb2dnZXJOYW1lIC0g5pel5b+X6K6w5b2V5Zmo5ZCN56ewXG4gICAqIEBwYXJhbSBzdGFja1NpemUgLSDmiZPljbDmoIjnmoTmt7HluqZcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZ2V0TG9nZ2VyKGUsIHQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dnZXIuc2V0U3RhY2tTaXplKHQpLCB0aGlzLmxvZ2dlci5nZXRMb2dnZXIoZSk7XG4gIH1cbn1cbmNsYXNzIE4gZXh0ZW5kcyBYIHtcbiAgY29uc3RydWN0b3IoZSwgdCwgbCkge1xuICAgIHN1cGVyKGUsIHQsIGwpO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5bpu5jorqTnmoTml6Xlv5forrDlvZXlmahcbiAgICpcbiAgICogQHBhcmFtIGxvZ2dlck5hbWUgLSDml6Xlv5forrDlvZXlmajlkI3np7BcbiAgICogQHBhcmFtIHN0YWNrU2l6ZSAtIOaJk+WNsOagiOeahOa3seW6plxuICAgKi9cbiAgZ2V0TG9nZ2VyKGUsIHQpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0TG9nZ2VyKGUsIHQpO1xuICB9XG59XG5jbGFzcyBNIHtcbiAgLyoqXG4gICAqIOm7mOiupOaXpeW/l+iusOW9leWZqFxuICAgKlxuICAgKiBAcGFyYW0gc3RhY2tTaXplIC0g5qCI55qE5rex5bqmXG4gICAqIEBwYXJhbSBlbnYgLSDnjq/looPlj5jph4/lrp7kvotcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0TG9nZ2VyKGUsIHQpIHtcbiAgICByZXR1cm4gTS5jdXN0b21Mb2dGYWN0b3J5KHZvaWQgMCwgdm9pZCAwLCBlKS5nZXRMb2dnZXIoXG4gICAgICB2b2lkIDAsXG4gICAgICB0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICog6Ieq5a6a5LmJ5pel5b+X5bel5Y6CXG4gICAqL1xuICBzdGF0aWMgY3VzdG9tTG9nRmFjdG9yeShlLCB0LCBsKSB7XG4gICAgcmV0dXJuIG5ldyBOKGUsIHQsIGwpO1xuICB9XG4gIC8qKlxuICAgKiDoh6rlrprkuYnml6Xlv5flt6XljoLvvIzoh6rlrprkuYnliY3nvIBcbiAgICovXG4gIHN0YXRpYyBjdXN0b21TaWduTG9nRmFjdG9yeShlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBOKHZvaWQgMCwgZSwgdCk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIFggYXMgQWJzdHJhY3RMb2dGYWN0b3J5LFxuICBOIGFzIEN1c3RvbUxvZ0ZhY3RvcnksXG4gIFMgYXMgTG9nTGV2ZWxFbnVtLFxuICBNIGFzIGRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICcuLi91dGlsJztcblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHBvc2l0aW9uRWw6IEVsZW1lbnQsIGVsOiBFbGVtZW50KSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uRWwuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGVsKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIocG9zaXRpb25FbDogRWxlbWVudCwgZWw6IEVsZW1lbnQpIHtcbiAgICByZXR1cm4gcG9zaXRpb25FbC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9vbGJhckxlZnQoZWw6IEVsZW1lbnQpIHtcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b29sYmFyJyk/LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZuX19lbGxpcHNpcycpO1xuICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnNlcnRCZWZvcmUodGl0bGVbMF0sIGVsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvb2xiYXJSaWdodChlbDogRWxlbWVudCkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rvb2xiYXInKT8uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZm5fX2VsbGlwc2lzJyk7XG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGluc2VydEFmdGVyKHRpdGxlWzBdLCBlbCk7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2dnZXIgPSAobmFtZTogc3RyaW5nKSA9PiBnZXRMb2dnZXIobmFtZSk7XG4iLCJleHBvcnQgaW50ZXJmYWNlIElNZW51SXRlbU9wdGlvbiB7XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgY2xpY2s/OiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XG4gICAgdHlwZT86ICdzZXBhcmF0b3InIHwgJ3N1Ym1lbnUnIHwgJ3JlYWRvbmx5JztcbiAgICBhY2NlbGVyYXRvcj86IHN0cmluZztcbiAgICBhY3Rpb24/OiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgc3VibWVudT86IElNZW51SXRlbU9wdGlvbltdO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBpY29uPzogc3RyaW5nO1xuICAgIGljb25IVE1MPzogc3RyaW5nO1xuICAgIGN1cnJlbnQ/OiBib29sZWFuO1xuICAgIGJpbmQ/OiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBNZW51IHtcbiAgICBtZW51OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1lbnUgPSB3aW5kb3cuc2l5dWFuPy5tZW51cz8ubWVudTtcbiAgICAgICAgaWYgKCFtZW51KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignU2l5dWFuIGludGVybmFsIG1lbnUgbm90IGZvdW5kIScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVudSA9IG1lbnU7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNZW51IG11c3QgaGFzIGFuIGlkLCBnb3QgZW1wdHkgb3IgdW5kZWZpbmVkIScpO1xuICAgICAgICB9XG4gICAgICAgIG1lbnUucmVtb3ZlKCk7XG4gICAgICAgIG1lbnUuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIGlkKTtcbiAgICB9XG5cbiAgICBhZGRJdGVtKGl0ZW06IE1lbnVJdGVtKSB7XG4gICAgICAgIHRoaXMubWVudS5hcHBlbmQoaXRlbS5lbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkU2VwYXJhdG9yKCkge1xuICAgICAgICB0aGlzLmFkZEl0ZW0obmV3IE1lbnVJdGVtKHsgdHlwZTogJ3NlcGFyYXRvcicgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzaG93QXRNb3VzZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMubWVudS5wb3B1cCh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNob3dBdFBvc2l0aW9uKHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0pIHtcbiAgICAgICAgdGhpcy5tZW51LnBvcHVwKHsgeDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueSB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMubWVudS5yZW1vdmUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29weSBmcm9tIHNpeXVhbiBzb3VyY2UgY29kZVxuICovXG5leHBvcnQgY2xhc3MgTWVudUl0ZW0ge1xuICAgIHB1YmxpYyBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElNZW51SXRlbU9wdGlvbikge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3NlcGFyYXRvcicpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdiMy1tZW51X19zZXBhcmF0b3InKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtbWVudV9faXRlbScpO1xuICAgICAgICBpZiAob3B0aW9ucy5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtbWVudV9faXRlbS0tc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jbGljaykge1xuICAgICAgICAgICAgLy8g6ZyA5L2/55SoIGNsaWNr77yM5ZCm5YiZ56e75Yqo56uv5peg5rOV5rua5YqoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY2xpY2sodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zaXl1YW4ubWVudXMubWVudS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBodG1sID0gYDxzcGFuIGNsYXNzPVwiYjMtbWVudV9fbGFiZWxcIj4ke29wdGlvbnMubGFiZWx9PC9zcGFuPmA7XG4gICAgICAgIGlmIChvcHRpb25zLmljb25IVE1MKSB7XG4gICAgICAgICAgICBodG1sID0gb3B0aW9ucy5pY29uSFRNTCArIGh0bWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodG1sID0gYDxzdmcgY2xhc3M9XCJiMy1tZW51X19pY29uJHtcbiAgICAgICAgICAgICAgICBbJ0hUTUwgKFNpWXVhbiknLCB3aW5kb3cuc2l5dWFuLmxhbmd1YWdlcy50ZW1wbGF0ZV0uaW5jbHVkZXMob3B0aW9ucy5sYWJlbCkgPyAnIGZ0X19lcnJvcicgOiAnJ1xuICAgICAgICAgICAgfVwiIHN0eWxlPVwiJHtvcHRpb25zLmljb24gPT09ICdpY29uQ2xvc2UnID8gJ2hlaWdodDoxMHB4OycgOiAnJ31cIj48dXNlIHhsaW5rOmhyZWY9XCIjJHtvcHRpb25zLmljb24gfHwgJyd9XCI+PC91c2U+PC9zdmc+JHtodG1sfWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKG9wdGlvbnMuYWNjZWxlcmF0b3IpIHtcbiAgICAgICAgLy8gICAgIGh0bWwgKz0gYDxzcGFuIGNsYXNzPVwiYjMtbWVudV9fYWNjZWxlcmF0b3JcIj4ke3VwZGF0ZUhvdGtleVRpcChvcHRpb25zLmFjY2VsZXJhdG9yKX08L3NwYW4+YDtcbiAgICAgICAgLy8gfVxuICAgICAgICBpZiAob3B0aW9ucy5hY3Rpb24pIHtcbiAgICAgICAgICAgIGh0bWwgKz0gYDxzdmcgY2xhc3M9XCJiMy1tZW51X19hY3Rpb25cIj48dXNlIHhsaW5rOmhyZWY9XCIjJHtvcHRpb25zLmFjdGlvbn1cIj48L3VzZT48L3N2Zz5gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgb3B0aW9ucy5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3JlYWRvbmx5Jykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2IzLW1lbnVfX2l0ZW0tLXJlYWRvbmx5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIGlmIChvcHRpb25zLmJpbmQpIHtcbiAgICAgICAgICAgIC8vIOS4u+mimCByZW0gY3JhZnQg6ZyA6KaB5L2/55SoIGIzLW1lbnVfX2l0ZW0tLWN1c3RvbSDmnaXljLrliIboh6rlrprkuYnoj5zljZUgYnkgMjgxMjYxMzYxXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtbWVudV9faXRlbS0tY3VzdG9tJyk7XG4gICAgICAgICAgICBvcHRpb25zLmJpbmQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zdWJtZW51KSB7XG4gICAgICAgICAgICBjb25zdCBzdWJtZW51RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgc3VibWVudUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtbWVudV9fc3VibWVudScpO1xuICAgICAgICAgICAgb3B0aW9ucy5zdWJtZW51LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBzdWJtZW51RWxlbWVudC5hcHBlbmQobmV3IE1lbnVJdGVtKGl0ZW0pLmVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPHN2ZyBjbGFzcz1cImIzLW1lbnVfX2ljb24gYjMtbWVudV9faWNvbi0tYXJyb3dcIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvblJpZ2h0XCI+PC91c2U+PC9zdmc+Jyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKHN1Ym1lbnVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lbnVTZXBhcmF0b3Ige31cbiIsIi8qKlxuICogQ29weSBmcm9tIHNpeXVhbiBzb3VyY2UgY29kZVxuICovXG5pbXBvcnQgeyBnZW5VVUlEIH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBEaWFsb2cge1xuICAgIHByaXZhdGUgZGVzdHJveUNhbGxiYWNrOiAoKSA9PiB2b2lkO1xuICAgIHB1YmxpYyBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkaXNhYmxlQ2xvc2U6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7XG4gICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICB0cmFuc3BhcmVudD86IGJvb2xlYW47XG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgd2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIGhlaWdodD86IHN0cmluZztcbiAgICAgICAgZGVzdHJveUNhbGxiYWNrPzogKCkgPT4gdm9pZDtcbiAgICAgICAgZGlzYWJsZUNsb3NlPzogYm9vbGVhbjtcbiAgICAgICAgZGlzYWJsZUFuaW1hdGlvbj86IGJvb2xlYW47XG4gICAgfSkge1xuICAgICAgICB0aGlzLmRpc2FibGVDbG9zZSA9IG9wdGlvbnMuZGlzYWJsZUNsb3NlO1xuICAgICAgICB0aGlzLmlkID0gZ2VuVVVJRCgpO1xuICAgICAgICB3aW5kb3cuc2l5dWFuLmRpYWxvZ3MucHVzaCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXN0cm95Q2FsbGJhY2sgPSBvcHRpb25zLmRlc3Ryb3lDYWxsYmFjaztcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwiYjMtZGlhbG9nXCI+XG48ZGl2IGNsYXNzPVwiYjMtZGlhbG9nX19zY3JpbVwiJHtvcHRpb25zLnRyYW5zcGFyZW50ID8gJ3N0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudFwiJyA6ICcnfT48L2Rpdj5cbjxkaXYgY2xhc3M9XCJiMy1kaWFsb2dfX2NvbnRhaW5lclwiIHN0eWxlPVwid2lkdGg6JHtvcHRpb25zLndpZHRoIHx8ICdhdXRvJ31cIj5cbiAgPHN2ZyBjbGFzcz1cImIzLWRpYWxvZ19fY2xvc2UgZm5fX2Eke3RoaXMuZGlzYWJsZUNsb3NlID8gJyBmbl9fbm9uZScgOiAnJ31cIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbkNsb3NlXCI+PC91c2U+PC9zdmc+XG4gIDxkaXYgY2xhc3M9XCJiMy1kaWFsb2dfX2hlYWRlciR7b3B0aW9ucy50aXRsZSA/ICcnIDogJyBmbl9fbm9uZSd9XCIgb25zZWxlY3RzdGFydD1cInJldHVybiBmYWxzZTtcIj4ke29wdGlvbnMudGl0bGUgfHwgJyd9PC9kaXY+XG4gIDxkaXYgc3R5bGU9XCJoZWlnaHQ6JHtvcHRpb25zLmhlaWdodCB8fCAnYXV0byd9XCI+JHtvcHRpb25zLmNvbnRlbnR9PC9kaXY+XG48L2Rpdj48L2Rpdj5gO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYjMtZGlhbG9nX19zY3JpbScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZUNsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAvLyBodHRwczovL2xkMjQ2LmNvbS9hcnRpY2xlLzE2NTc5NjkyOTI3MDAvY29tbWVudC8xNjU4MTQ3MDA2NjY5I2NvbW1lbnRzXG4gICAgICAgICAgICB3aW5kb3cuc2l5dWFuLm1lbnVzLm1lbnUucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZUNsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLmIzLWRpYWxvZ19fY2xvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICBpZiAob3B0aW9ucy5kaXNhYmxlQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtZGlhbG9nLS1vcGVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYjMtZGlhbG9nLS1vcGVuJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc2l5dWFuLW5vdGUvc2l5dWFuL2lzc3Vlcy82NzgzXG4gICAgICAgIHdpbmRvdy5zaXl1YW4ubWVudXMubWVudS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVzdHJveUFsbCgpIHtcbiAgICAgICAgd2luZG93LnNpeXVhbi5kaWFsb2dzLmZvckVhY2goKHApID0+IHAuZGVzdHJveSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc2l5dWFuLW5vdGUvc2l5dWFuL2lzc3Vlcy82NzgzXG4gICAgICAgIHdpbmRvdy5zaXl1YW4ubWVudXMubWVudS5yZW1vdmUoKTtcbiAgICAgICAgaWYgKHRoaXMuZGVzdHJveUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5zaXl1YW4uZGlhbG9ncy5maW5kKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2l5dWFuLmRpYWxvZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGJpbmRJbnB1dChpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50LCBlbnRlckV2ZW50PzogKCkgPT4gdm9pZCkge1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5pc0NvbXBvc2luZykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgJiYgZW50ZXJFdmVudCkge1xuICAgICAgICAgICAgICAgIGVudGVyRXZlbnQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgSVBsdWdpbiwgSVBsdWdpbkNvbW1hbmQsIFNldHRpbmdSZW5kZXIgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW4gaW1wbGVtZW50cyBJUGx1Z2luIHtcbiAgICBfaWQ6IHN0cmluZztcbiAgICBvbmxvYWQoKSB7fVxuICAgIG9udW5sb2FkKCkge31cbiAgICByZWdpc3RlckNvbW1hbmQoY29tbWFuZDogSVBsdWdpbkNvbW1hbmQpIHt9XG4gICAgcmVnaXN0ZXJTZXR0aW5nUmVuZGVyKHNldHRpbmdSZW5kZXI6IFNldHRpbmdSZW5kZXIpIHt9XG4gICAgYXN5bmMgbG9hZFN0b3JhZ2UoZmlsZW5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgd3JpdGVTdG9yYWdlKGZpbGVuYW1lOiBzdHJpbmcsIGNvbnRlbnQ6IGFueSkge31cbn1cbiIsImltcG9ydCAqIGFzIHNlcnZlckFwaSBmcm9tICcuL2FwaS9zZXJ2ZXItYXBpJztcbmltcG9ydCAqIGFzIGNsaWVudEFwaSBmcm9tICcuL2FwaS9jbGllbnQtYXBpJztcbmltcG9ydCB7IE1lbnUsIE1lbnVJdGVtLCBNZW51U2VwYXJhdG9yIH0gZnJvbSAnLi9pbnRlcm5hbC9jbGFzc2VzL21lbnUnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi9pbnRlcm5hbC9jbGFzc2VzL2RpYWxvZyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuL2ludGVybmFsL2NsYXNzZXMvbm90aWZpY2F0aW9uJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJy4vYXBpL3BsdWdpbic7XG5cbmV4cG9ydCB7IGNsaWVudEFwaSwgc2VydmVyQXBpLCBNZW51LCBNZW51SXRlbSwgTWVudVNlcGFyYXRvciwgTm90aWZpY2F0aW9uLCBEaWFsb2csIFBsdWdpbiB9O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY2xpZW50QXBpLFxuICAgIHNlcnZlckFwaSxcbiAgICBQbHVnaW4sXG4gICAgTWVudSxcbiAgICBNZW51SXRlbSxcbiAgICBNZW51U2VwYXJhdG9yLFxuICAgIE5vdGlmaWNhdGlvbixcbiAgICBEaWFsb2csXG59O1xuIiwiLy8gTm90ZTogdGhpcyBpcyB0aGUgc2VtdmVyLm9yZyB2ZXJzaW9uIG9mIHRoZSBzcGVjIHRoYXQgaXQgaW1wbGVtZW50c1xuLy8gTm90IG5lY2Vzc2FyaWx5IHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgdGhpcyBjb2RlLlxuY29uc3QgU0VNVkVSX1NQRUNfVkVSU0lPTiA9ICcyLjAuMCdcblxuY29uc3QgTUFYX0xFTkdUSCA9IDI1NlxuY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA5MDA3MTk5MjU0NzQwOTkxXG5cbi8vIE1heCBzYWZlIHNlZ21lbnQgbGVuZ3RoIGZvciBjb2VyY2lvbi5cbmNvbnN0IE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggPSAxNlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU0VNVkVSX1NQRUNfVkVSU0lPTixcbiAgTUFYX0xFTkdUSCxcbiAgTUFYX1NBRkVfSU5URUdFUixcbiAgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCxcbn1cbiIsImNvbnN0IGRlYnVnID0gKFxuICB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiZcbiAgcHJvY2Vzcy5lbnYgJiZcbiAgcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyAmJlxuICAvXFxic2VtdmVyXFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKVxuKSA/ICguLi5hcmdzKSA9PiBjb25zb2xlLmVycm9yKCdTRU1WRVInLCAuLi5hcmdzKVxuICA6ICgpID0+IHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidWdcbiIsImNvbnN0IHsgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJylcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9XG5cbi8vIFRoZSBhY3R1YWwgcmVnZXhwcyBnbyBvbiBleHBvcnRzLnJlXG5jb25zdCByZSA9IGV4cG9ydHMucmUgPSBbXVxuY29uc3Qgc3JjID0gZXhwb3J0cy5zcmMgPSBbXVxuY29uc3QgdCA9IGV4cG9ydHMudCA9IHt9XG5sZXQgUiA9IDBcblxuY29uc3QgY3JlYXRlVG9rZW4gPSAobmFtZSwgdmFsdWUsIGlzR2xvYmFsKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gUisrXG4gIGRlYnVnKG5hbWUsIGluZGV4LCB2YWx1ZSlcbiAgdFtuYW1lXSA9IGluZGV4XG4gIHNyY1tpbmRleF0gPSB2YWx1ZVxuICByZVtpbmRleF0gPSBuZXcgUmVnRXhwKHZhbHVlLCBpc0dsb2JhbCA/ICdnJyA6IHVuZGVmaW5lZClcbn1cblxuLy8gVGhlIGZvbGxvd2luZyBSZWd1bGFyIEV4cHJlc3Npb25zIGNhbiBiZSB1c2VkIGZvciB0b2tlbml6aW5nLFxuLy8gdmFsaWRhdGluZywgYW5kIHBhcnNpbmcgU2VtVmVyIHZlcnNpb24gc3RyaW5ncy5cblxuLy8gIyMgTnVtZXJpYyBJZGVudGlmaWVyXG4vLyBBIHNpbmdsZSBgMGAsIG9yIGEgbm9uLXplcm8gZGlnaXQgZm9sbG93ZWQgYnkgemVybyBvciBtb3JlIGRpZ2l0cy5cblxuY3JlYXRlVG9rZW4oJ05VTUVSSUNJREVOVElGSUVSJywgJzB8WzEtOV1cXFxcZConKVxuY3JlYXRlVG9rZW4oJ05VTUVSSUNJREVOVElGSUVSTE9PU0UnLCAnWzAtOV0rJylcblxuLy8gIyMgTm9uLW51bWVyaWMgSWRlbnRpZmllclxuLy8gWmVybyBvciBtb3JlIGRpZ2l0cywgZm9sbG93ZWQgYnkgYSBsZXR0ZXIgb3IgaHlwaGVuLCBhbmQgdGhlbiB6ZXJvIG9yXG4vLyBtb3JlIGxldHRlcnMsIGRpZ2l0cywgb3IgaHlwaGVucy5cblxuY3JlYXRlVG9rZW4oJ05PTk5VTUVSSUNJREVOVElGSUVSJywgJ1xcXFxkKlthLXpBLVotXVthLXpBLVowLTktXSonKVxuXG4vLyAjIyBNYWluIFZlcnNpb25cbi8vIFRocmVlIGRvdC1zZXBhcmF0ZWQgbnVtZXJpYyBpZGVudGlmaWVycy5cblxuY3JlYXRlVG9rZW4oJ01BSU5WRVJTSU9OJywgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXX0pXFxcXC5gICtcbiAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19KWApXG5cbmNyZWF0ZVRva2VuKCdNQUlOVkVSU0lPTkxPT1NFJywgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlgKVxuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uIElkZW50aWZpZXJcbi8vIEEgbnVtZXJpYyBpZGVudGlmaWVyLCBvciBhIG5vbi1udW1lcmljIGlkZW50aWZpZXIuXG5cbmNyZWF0ZVRva2VuKCdQUkVSRUxFQVNFSURFTlRJRklFUicsIGAoPzoke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXVxufXwke3NyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VJREVOVElGSUVSTE9PU0UnLCBgKD86JHtzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXVxufXwke3NyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuLy8gIyMgUHJlLXJlbGVhc2UgVmVyc2lvblxuLy8gSHlwaGVuLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBkb3Qtc2VwYXJhdGVkIHByZS1yZWxlYXNlIHZlcnNpb25cbi8vIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRScsIGAoPzotKCR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdXG59KD86XFxcXC4ke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSXX0pKikpYClcblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VMT09TRScsIGAoPzotPygke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0VdXG59KD86XFxcXC4ke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0VdfSkqKSlgKVxuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YSBJZGVudGlmaWVyXG4vLyBBbnkgY29tYmluYXRpb24gb2YgZGlnaXRzLCBsZXR0ZXJzLCBvciBoeXBoZW5zLlxuXG5jcmVhdGVUb2tlbignQlVJTERJREVOVElGSUVSJywgJ1swLTlBLVphLXotXSsnKVxuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YVxuLy8gUGx1cyBzaWduLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBwZXJpb2Qtc2VwYXJhdGVkIGJ1aWxkIG1ldGFkYXRhXG4vLyBpZGVudGlmaWVycy5cblxuY3JlYXRlVG9rZW4oJ0JVSUxEJywgYCg/OlxcXFwrKCR7c3JjW3QuQlVJTERJREVOVElGSUVSXVxufSg/OlxcXFwuJHtzcmNbdC5CVUlMRElERU5USUZJRVJdfSkqKSlgKVxuXG4vLyAjIyBGdWxsIFZlcnNpb24gU3RyaW5nXG4vLyBBIG1haW4gdmVyc2lvbiwgZm9sbG93ZWQgb3B0aW9uYWxseSBieSBhIHByZS1yZWxlYXNlIHZlcnNpb24gYW5kXG4vLyBidWlsZCBtZXRhZGF0YS5cblxuLy8gTm90ZSB0aGF0IHRoZSBvbmx5IG1ham9yLCBtaW5vciwgcGF0Y2gsIGFuZCBwcmUtcmVsZWFzZSBzZWN0aW9ucyBvZlxuLy8gdGhlIHZlcnNpb24gc3RyaW5nIGFyZSBjYXB0dXJpbmcgZ3JvdXBzLiAgVGhlIGJ1aWxkIG1ldGFkYXRhIGlzIG5vdCBhXG4vLyBjYXB0dXJpbmcgZ3JvdXAsIGJlY2F1c2UgaXQgc2hvdWxkIG5vdCBldmVyIGJlIHVzZWQgaW4gdmVyc2lvblxuLy8gY29tcGFyaXNvbi5cblxuY3JlYXRlVG9rZW4oJ0ZVTExQTEFJTicsIGB2PyR7c3JjW3QuTUFJTlZFUlNJT05dXG59JHtzcmNbdC5QUkVSRUxFQVNFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignRlVMTCcsIGBeJHtzcmNbdC5GVUxMUExBSU5dfSRgKVxuXG4vLyBsaWtlIGZ1bGwsIGJ1dCBhbGxvd3MgdjEuMi4zIGFuZCA9MS4yLjMsIHdoaWNoIHBlb3BsZSBkbyBzb21ldGltZXMuXG4vLyBhbHNvLCAxLjAuMGFscGhhMSAocHJlcmVsZWFzZSB3aXRob3V0IHRoZSBoeXBoZW4pIHdoaWNoIGlzIHByZXR0eVxuLy8gY29tbW9uIGluIHRoZSBucG0gcmVnaXN0cnkuXG5jcmVhdGVUb2tlbignTE9PU0VQTEFJTicsIGBbdj1cXFxcc10qJHtzcmNbdC5NQUlOVkVSU0lPTkxPT1NFXVxufSR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignTE9PU0UnLCBgXiR7c3JjW3QuTE9PU0VQTEFJTl19JGApXG5cbmNyZWF0ZVRva2VuKCdHVExUJywgJygoPzo8fD4pPz0/KScpXG5cbi8vIFNvbWV0aGluZyBsaWtlIFwiMi4qXCIgb3IgXCIxLjIueFwiLlxuLy8gTm90ZSB0aGF0IFwieC54XCIgaXMgYSB2YWxpZCB4UmFuZ2UgaWRlbnRpZmVyLCBtZWFuaW5nIFwiYW55IHZlcnNpb25cIlxuLy8gT25seSB0aGUgZmlyc3QgaXRlbSBpcyBzdHJpY3RseSByZXF1aXJlZC5cbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSTE9PU0UnLCBgJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXX18eHxYfFxcXFwqYClcbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSJywgYCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfXx4fFh8XFxcXCpgKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU4nLCBgW3Y9XFxcXHNdKigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJdfSlgICtcbiAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYCg/OlxcXFwuKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGAoPzoke3NyY1t0LlBSRVJFTEVBU0VdfSk/JHtcbiAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgYCk/KT9gKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU5MT09TRScsIGBbdj1cXFxcc10qKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0pPyR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKT8pP2ApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignWFJBTkdFTE9PU0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ29lcmNpb24uXG4vLyBFeHRyYWN0IGFueXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgYmUgYSBwYXJ0IG9mIGEgdmFsaWQgc2VtdmVyXG5jcmVhdGVUb2tlbignQ09FUkNFJywgYCR7JyhefFteXFxcXGRdKScgK1xuICAgICAgICAgICAgICAnKFxcXFxkezEsJ30ke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSlgICtcbiAgICAgICAgICAgICAgYCg/OlxcXFwuKFxcXFxkezEsJHtNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIfX0pKT9gICtcbiAgICAgICAgICAgICAgYCg/OlxcXFwuKFxcXFxkezEsJHtNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIfX0pKT9gICtcbiAgICAgICAgICAgICAgYCg/OiR8W15cXFxcZF0pYClcbmNyZWF0ZVRva2VuKCdDT0VSQ0VSVEwnLCBzcmNbdC5DT0VSQ0VdLCB0cnVlKVxuXG4vLyBUaWxkZSByYW5nZXMuXG4vLyBNZWFuaW5nIGlzIFwicmVhc29uYWJseSBhdCBvciBncmVhdGVyIHRoYW5cIlxuY3JlYXRlVG9rZW4oJ0xPTkVUSUxERScsICcoPzp+Pj8pJylcblxuY3JlYXRlVG9rZW4oJ1RJTERFVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuTE9ORVRJTERFXX1cXFxccytgLCB0cnVlKVxuZXhwb3J0cy50aWxkZVRyaW1SZXBsYWNlID0gJyQxfidcblxuY3JlYXRlVG9rZW4oJ1RJTERFJywgYF4ke3NyY1t0LkxPTkVUSUxERV19JHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignVElMREVMT09TRScsIGBeJHtzcmNbdC5MT05FVElMREVdfSR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19JGApXG5cbi8vIENhcmV0IHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJhdCBsZWFzdCBhbmQgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aFwiXG5jcmVhdGVUb2tlbignTE9ORUNBUkVUJywgJyg/OlxcXFxeKScpXG5cbmNyZWF0ZVRva2VuKCdDQVJFVFRSSU0nLCBgKFxcXFxzKikke3NyY1t0LkxPTkVDQVJFVF19XFxcXHMrYCwgdHJ1ZSlcbmV4cG9ydHMuY2FyZXRUcmltUmVwbGFjZSA9ICckMV4nXG5cbmNyZWF0ZVRva2VuKCdDQVJFVCcsIGBeJHtzcmNbdC5MT05FQ0FSRVRdfSR7c3JjW3QuWFJBTkdFUExBSU5dfSRgKVxuY3JlYXRlVG9rZW4oJ0NBUkVUTE9PU0UnLCBgXiR7c3JjW3QuTE9ORUNBUkVUXX0ke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSRgKVxuXG4vLyBBIHNpbXBsZSBndC9sdC9lcSB0aGluZywgb3IganVzdCBcIlwiIHRvIGluZGljYXRlIFwiYW55IHZlcnNpb25cIlxuY3JlYXRlVG9rZW4oJ0NPTVBBUkFUT1JMT09TRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyooJHtzcmNbdC5MT09TRVBMQUlOXX0pJHxeJGApXG5jcmVhdGVUb2tlbignQ09NUEFSQVRPUicsIGBeJHtzcmNbdC5HVExUXX1cXFxccyooJHtzcmNbdC5GVUxMUExBSU5dfSkkfF4kYClcblxuLy8gQW4gZXhwcmVzc2lvbiB0byBzdHJpcCBhbnkgd2hpdGVzcGFjZSBiZXR3ZWVuIHRoZSBndGx0IGFuZCB0aGUgdGhpbmdcbi8vIGl0IG1vZGlmaWVzLCBzbyB0aGF0IGA+IDEuMi4zYCA9PT4gYD4xLjIuM2BcbmNyZWF0ZVRva2VuKCdDT01QQVJBVE9SVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuR1RMVF1cbn1cXFxccyooJHtzcmNbdC5MT09TRVBMQUlOXX18JHtzcmNbdC5YUkFOR0VQTEFJTl19KWAsIHRydWUpXG5leHBvcnRzLmNvbXBhcmF0b3JUcmltUmVwbGFjZSA9ICckMSQyJDMnXG5cbi8vIFNvbWV0aGluZyBsaWtlIGAxLjIuMyAtIDEuMi40YFxuLy8gTm90ZSB0aGF0IHRoZXNlIGFsbCB1c2UgdGhlIGxvb3NlIGZvcm0sIGJlY2F1c2UgdGhleSdsbCBiZVxuLy8gY2hlY2tlZCBhZ2FpbnN0IGVpdGhlciB0aGUgc3RyaWN0IG9yIGxvb3NlIGNvbXBhcmF0b3IgZm9ybVxuLy8gbGF0ZXIuXG5jcmVhdGVUb2tlbignSFlQSEVOUkFOR0UnLCBgXlxcXFxzKigke3NyY1t0LlhSQU5HRVBMQUlOXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYFxcXFxzKy1cXFxccytgICtcbiAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuWFJBTkdFUExBSU5dfSlgICtcbiAgICAgICAgICAgICAgICAgICBgXFxcXHMqJGApXG5cbmNyZWF0ZVRva2VuKCdIWVBIRU5SQU5HRUxPT1NFJywgYF5cXFxccyooJHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgXFxcXHMrLVxcXFxzK2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcXFxccyokYClcblxuLy8gU3RhciByYW5nZXMgYmFzaWNhbGx5IGp1c3QgYWxsb3cgYW55dGhpbmcgYXQgYWxsLlxuY3JlYXRlVG9rZW4oJ1NUQVInLCAnKDx8Pik/PT9cXFxccypcXFxcKicpXG4vLyA+PTAuMC4wIGlzIGxpa2UgYSBzdGFyXG5jcmVhdGVUb2tlbignR1RFMCcsICdeXFxcXHMqPj1cXFxccyowXFxcXC4wXFxcXC4wXFxcXHMqJCcpXG5jcmVhdGVUb2tlbignR1RFMFBSRScsICdeXFxcXHMqPj1cXFxccyowXFxcXC4wXFxcXC4wLTBcXFxccyokJylcbiIsIi8vIHBhcnNlIG91dCBqdXN0IHRoZSBvcHRpb25zIHdlIGNhcmUgYWJvdXQgc28gd2UgYWx3YXlzIGdldCBhIGNvbnNpc3RlbnRcbi8vIG9iaiB3aXRoIGtleXMgaW4gYSBjb25zaXN0ZW50IG9yZGVyLlxuY29uc3Qgb3B0cyA9IFsnaW5jbHVkZVByZXJlbGVhc2UnLCAnbG9vc2UnLCAncnRsJ11cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IG9wdGlvbnMgPT5cbiAgIW9wdGlvbnMgPyB7fVxuICA6IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyA/IHsgbG9vc2U6IHRydWUgfVxuICA6IG9wdHMuZmlsdGVyKGsgPT4gb3B0aW9uc1trXSkucmVkdWNlKChvLCBrKSA9PiB7XG4gICAgb1trXSA9IHRydWVcbiAgICByZXR1cm4gb1xuICB9LCB7fSlcbm1vZHVsZS5leHBvcnRzID0gcGFyc2VPcHRpb25zXG4iLCJjb25zdCBudW1lcmljID0gL15bMC05XSskL1xuY29uc3QgY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IHtcbiAgY29uc3QgYW51bSA9IG51bWVyaWMudGVzdChhKVxuICBjb25zdCBibnVtID0gbnVtZXJpYy50ZXN0KGIpXG5cbiAgaWYgKGFudW0gJiYgYm51bSkge1xuICAgIGEgPSArYVxuICAgIGIgPSArYlxuICB9XG5cbiAgcmV0dXJuIGEgPT09IGIgPyAwXG4gICAgOiAoYW51bSAmJiAhYm51bSkgPyAtMVxuICAgIDogKGJudW0gJiYgIWFudW0pID8gMVxuICAgIDogYSA8IGIgPyAtMVxuICAgIDogMVxufVxuXG5jb25zdCByY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IGNvbXBhcmVJZGVudGlmaWVycyhiLCBhKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGFyZUlkZW50aWZpZXJzLFxuICByY29tcGFyZUlkZW50aWZpZXJzLFxufVxuIiwiY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCB7IE1BWF9MRU5HVEgsIE1BWF9TQUZFX0lOVEVHRVIgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2NvbnN0YW50cycpXG5jb25zdCB7IHJlLCB0IH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3BhcnNlLW9wdGlvbnMnKVxuY29uc3QgeyBjb21wYXJlSWRlbnRpZmllcnMgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lkZW50aWZpZXJzJylcbmNsYXNzIFNlbVZlciB7XG4gIGNvbnN0cnVjdG9yICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gICAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICAgIGlmICh2ZXJzaW9uLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UgJiZcbiAgICAgICAgICB2ZXJzaW9uLmluY2x1ZGVQcmVyZWxlYXNlID09PSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uLnZlcnNpb25cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBWZXJzaW9uOiAke3ZlcnNpb259YClcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgdmVyc2lvbiBpcyBsb25nZXIgdGhhbiAke01BWF9MRU5HVEh9IGNoYXJhY3RlcnNgXG4gICAgICApXG4gICAgfVxuXG4gICAgZGVidWcoJ1NlbVZlcicsIHZlcnNpb24sIG9wdGlvbnMpXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMubG9vc2UgPSAhIW9wdGlvbnMubG9vc2VcbiAgICAvLyB0aGlzIGlzbid0IGFjdHVhbGx5IHJlbGV2YW50IGZvciB2ZXJzaW9ucywgYnV0IGtlZXAgaXQgc28gdGhhdCB3ZVxuICAgIC8vIGRvbid0IHJ1biBpbnRvIHRyb3VibGUgcGFzc2luZyB0aGlzLm9wdGlvbnMgYXJvdW5kLlxuICAgIHRoaXMuaW5jbHVkZVByZXJlbGVhc2UgPSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcblxuICAgIGNvbnN0IG0gPSB2ZXJzaW9uLnRyaW0oKS5tYXRjaChvcHRpb25zLmxvb3NlID8gcmVbdC5MT09TRV0gOiByZVt0LkZVTExdKVxuXG4gICAgaWYgKCFtKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFZlcnNpb246ICR7dmVyc2lvbn1gKVxuICAgIH1cblxuICAgIHRoaXMucmF3ID0gdmVyc2lvblxuXG4gICAgLy8gdGhlc2UgYXJlIGFjdHVhbGx5IG51bWJlcnNcbiAgICB0aGlzLm1ham9yID0gK21bMV1cbiAgICB0aGlzLm1pbm9yID0gK21bMl1cbiAgICB0aGlzLnBhdGNoID0gK21bM11cblxuICAgIGlmICh0aGlzLm1ham9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1ham9yIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtYWpvciB2ZXJzaW9uJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5taW5vciA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5taW5vciA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbWlub3IgdmVyc2lvbicpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGF0Y2ggPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMucGF0Y2ggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHBhdGNoIHZlcnNpb24nKVxuICAgIH1cblxuICAgIC8vIG51bWJlcmlmeSBhbnkgcHJlcmVsZWFzZSBudW1lcmljIGlkc1xuICAgIGlmICghbVs0XSkge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gbVs0XS5zcGxpdCgnLicpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgaWYgKC9eWzAtOV0rJC8udGVzdChpZCkpIHtcbiAgICAgICAgICBjb25zdCBudW0gPSAraWRcbiAgICAgICAgICBpZiAobnVtID49IDAgJiYgbnVtIDwgTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgcmV0dXJuIG51bVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCA9IG1bNV0gPyBtWzVdLnNwbGl0KCcuJykgOiBbXVxuICAgIHRoaXMuZm9ybWF0KClcbiAgfVxuXG4gIGZvcm1hdCAoKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gYCR7dGhpcy5tYWpvcn0uJHt0aGlzLm1pbm9yfS4ke3RoaXMucGF0Y2h9YFxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICB0aGlzLnZlcnNpb24gKz0gYC0ke3RoaXMucHJlcmVsZWFzZS5qb2luKCcuJyl9YFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvblxuICB9XG5cbiAgY29tcGFyZSAob3RoZXIpIHtcbiAgICBkZWJ1ZygnU2VtVmVyLmNvbXBhcmUnLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucywgb3RoZXIpXG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTZW1WZXIpKSB7XG4gICAgICBpZiAodHlwZW9mIG90aGVyID09PSAnc3RyaW5nJyAmJiBvdGhlciA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAob3RoZXIudmVyc2lvbiA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVNYWluKG90aGVyKSB8fCB0aGlzLmNvbXBhcmVQcmUob3RoZXIpXG4gIH1cblxuICBjb21wYXJlTWFpbiAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5tYWpvciwgb3RoZXIubWFqb3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5taW5vciwgb3RoZXIubWlub3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5wYXRjaCwgb3RoZXIucGF0Y2gpXG4gICAgKVxuICB9XG5cbiAgY29tcGFyZVByZSAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIC8vIE5PVCBoYXZpbmcgYSBwcmVyZWxlYXNlIGlzID4gaGF2aW5nIG9uZVxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfSBlbHNlIGlmICghdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiBvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICBsZXQgaSA9IDBcbiAgICBkbyB7XG4gICAgICBjb25zdCBhID0gdGhpcy5wcmVyZWxlYXNlW2ldXG4gICAgICBjb25zdCBiID0gb3RoZXIucHJlcmVsZWFzZVtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgY29tcGFyZUJ1aWxkIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgICAgb3RoZXIgPSBuZXcgU2VtVmVyKG90aGVyLCB0aGlzLm9wdGlvbnMpXG4gICAgfVxuXG4gICAgbGV0IGkgPSAwXG4gICAgZG8ge1xuICAgICAgY29uc3QgYSA9IHRoaXMuYnVpbGRbaV1cbiAgICAgIGNvbnN0IGIgPSBvdGhlci5idWlsZFtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgLy8gcHJlbWlub3Igd2lsbCBidW1wIHRoZSB2ZXJzaW9uIHVwIHRvIHRoZSBuZXh0IG1pbm9yIHJlbGVhc2UsIGFuZCBpbW1lZGlhdGVseVxuICAvLyBkb3duIHRvIHByZS1yZWxlYXNlLiBwcmVtYWpvciBhbmQgcHJlcGF0Y2ggd29yayB0aGUgc2FtZSB3YXkuXG4gIGluYyAocmVsZWFzZSwgaWRlbnRpZmllcikge1xuICAgIHN3aXRjaCAocmVsZWFzZSkge1xuICAgICAgY2FzZSAncHJlbWFqb3InOlxuICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID0gMFxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLm1pbm9yID0gMFxuICAgICAgICB0aGlzLm1ham9yKytcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwcmVtaW5vcic6XG4gICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMubWlub3IrK1xuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ByZXBhdGNoJzpcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IGEgcHJlcmVsZWFzZSwgaXQgd2lsbCBidW1wIHRvIHRoZSBuZXh0IHZlcnNpb25cbiAgICAgICAgLy8gZHJvcCBhbnkgcHJlcmVsZWFzZXMgdGhhdCBtaWdodCBhbHJlYWR5IGV4aXN0LCBzaW5jZSB0aGV5IGFyZSBub3RcbiAgICAgICAgLy8gcmVsZXZhbnQgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICAvLyBJZiB0aGUgaW5wdXQgaXMgYSBub24tcHJlcmVsZWFzZSB2ZXJzaW9uLCB0aGlzIGFjdHMgdGhlIHNhbWUgYXNcbiAgICAgIC8vIHByZXBhdGNoLlxuICAgICAgY2FzZSAncHJlcmVsZWFzZSc6XG4gICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbWFqb3InOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgcHJlLW1ham9yIHZlcnNpb24sIGJ1bXAgdXAgdG8gdGhlIHNhbWUgbWFqb3IgdmVyc2lvbi5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGluY3JlbWVudCBtYWpvci5cbiAgICAgICAgLy8gMS4wLjAtNSBidW1wcyB0byAxLjAuMFxuICAgICAgICAvLyAxLjEuMCBidW1wcyB0byAyLjAuMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5taW5vciAhPT0gMCB8fFxuICAgICAgICAgIHRoaXMucGF0Y2ggIT09IDAgfHxcbiAgICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMubWFqb3IrK1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWlub3IgPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtaW5vcic6XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmUtbWlub3IgdmVyc2lvbiwgYnVtcCB1cCB0byB0aGUgc2FtZSBtaW5vciB2ZXJzaW9uLlxuICAgICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1pbm9yLlxuICAgICAgICAvLyAxLjIuMC01IGJ1bXBzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4xIGJ1bXBzIHRvIDEuMy4wXG4gICAgICAgIGlmICh0aGlzLnBhdGNoICE9PSAwIHx8IHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLm1pbm9yKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncGF0Y2gnOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCBhIHByZS1yZWxlYXNlIHZlcnNpb24sIGl0IHdpbGwgaW5jcmVtZW50IHRoZSBwYXRjaC5cbiAgICAgICAgLy8gSWYgaXQgaXMgYSBwcmUtcmVsZWFzZSBpdCB3aWxsIGJ1bXAgdXAgdG8gdGhlIHNhbWUgcGF0Y2ggdmVyc2lvbi5cbiAgICAgICAgLy8gMS4yLjAtNSBwYXRjaGVzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4wIHBhdGNoZXMgdG8gMS4yLjFcbiAgICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnBhdGNoKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgLy8gVGhpcyBwcm9iYWJseSBzaG91bGRuJ3QgYmUgdXNlZCBwdWJsaWNseS5cbiAgICAgIC8vIDEuMC4wICdwcmUnIHdvdWxkIGJlY29tZSAxLjAuMC0wIHdoaWNoIGlzIHRoZSB3cm9uZyBkaXJlY3Rpb24uXG4gICAgICBjYXNlICdwcmUnOlxuICAgICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFswXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpID0gdGhpcy5wcmVyZWxlYXNlLmxlbmd0aFxuICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZXJlbGVhc2VbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZVtpXSsrXG4gICAgICAgICAgICAgIGkgPSAtMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGRpZG4ndCBpbmNyZW1lbnQgYW55dGhpbmdcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgLy8gMS4yLjAtYmV0YS4xIGJ1bXBzIHRvIDEuMi4wLWJldGEuMixcbiAgICAgICAgICAvLyAxLjIuMC1iZXRhLmZvb2JseiBvciAxLjIuMC1iZXRhIGJ1bXBzIHRvIDEuMi4wLWJldGEuMFxuICAgICAgICAgIGlmIChjb21wYXJlSWRlbnRpZmllcnModGhpcy5wcmVyZWxlYXNlWzBdLCBpZGVudGlmaWVyKSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKHRoaXMucHJlcmVsZWFzZVsxXSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW2lkZW50aWZpZXIsIDBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5jcmVtZW50IGFyZ3VtZW50OiAke3JlbGVhc2V9YClcbiAgICB9XG4gICAgdGhpcy5mb3JtYXQoKVxuICAgIHRoaXMucmF3ID0gdGhpcy52ZXJzaW9uXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbVZlclxuIiwiY29uc3QgeyBNQVhfTEVOR1RIIH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9jb25zdGFudHMnKVxuY29uc3QgeyByZSwgdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuXG5jb25zdCBwYXJzZU9wdGlvbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9wYXJzZS1vcHRpb25zJylcbmNvbnN0IHBhcnNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgaWYgKHZlcnNpb24ubGVuZ3RoID4gTUFYX0xFTkdUSCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCByID0gb3B0aW9ucy5sb29zZSA/IHJlW3QuTE9PU0VdIDogcmVbdC5GVUxMXVxuICBpZiAoIXIudGVzdCh2ZXJzaW9uKSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlXG4iLCJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgdmFsaWQgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB2ID0gcGFyc2UodmVyc2lvbiwgb3B0aW9ucylcbiAgcmV0dXJuIHYgPyB2LnZlcnNpb24gOiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkXG4iLCJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgY2xlYW4gPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBzID0gcGFyc2UodmVyc2lvbi50cmltKCkucmVwbGFjZSgvXls9dl0rLywgJycpLCBvcHRpb25zKVxuICByZXR1cm4gcyA/IHMudmVyc2lvbiA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5cbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcblxuY29uc3QgaW5jID0gKHZlcnNpb24sIHJlbGVhc2UsIG9wdGlvbnMsIGlkZW50aWZpZXIpID0+IHtcbiAgaWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKSB7XG4gICAgaWRlbnRpZmllciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKFxuICAgICAgdmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlciA/IHZlcnNpb24udmVyc2lvbiA6IHZlcnNpb24sXG4gICAgICBvcHRpb25zXG4gICAgKS5pbmMocmVsZWFzZSwgaWRlbnRpZmllcikudmVyc2lvblxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaW5jXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlID0gKGEsIGIsIGxvb3NlKSA9PlxuICBuZXcgU2VtVmVyKGEsIGxvb3NlKS5jb21wYXJlKG5ldyBTZW1WZXIoYiwgbG9vc2UpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVcbiIsImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgZXEgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID09PSAwXG5tb2R1bGUuZXhwb3J0cyA9IGVxXG4iLCJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgZXEgPSByZXF1aXJlKCcuL2VxJylcblxuY29uc3QgZGlmZiA9ICh2ZXJzaW9uMSwgdmVyc2lvbjIpID0+IHtcbiAgaWYgKGVxKHZlcnNpb24xLCB2ZXJzaW9uMikpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHYxID0gcGFyc2UodmVyc2lvbjEpXG4gICAgY29uc3QgdjIgPSBwYXJzZSh2ZXJzaW9uMilcbiAgICBjb25zdCBoYXNQcmUgPSB2MS5wcmVyZWxlYXNlLmxlbmd0aCB8fCB2Mi5wcmVyZWxlYXNlLmxlbmd0aFxuICAgIGNvbnN0IHByZWZpeCA9IGhhc1ByZSA/ICdwcmUnIDogJydcbiAgICBjb25zdCBkZWZhdWx0UmVzdWx0ID0gaGFzUHJlID8gJ3ByZXJlbGVhc2UnIDogJydcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2MSkge1xuICAgICAgaWYgKGtleSA9PT0gJ21ham9yJyB8fCBrZXkgPT09ICdtaW5vcicgfHwga2V5ID09PSAncGF0Y2gnKSB7XG4gICAgICAgIGlmICh2MVtrZXldICE9PSB2MltrZXldKSB7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIGtleVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0UmVzdWx0IC8vIG1heSBiZSB1bmRlZmluZWRcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBkaWZmXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtYWpvciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWFqb3Jcbm1vZHVsZS5leHBvcnRzID0gbWFqb3JcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IG1pbm9yID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5taW5vclxubW9kdWxlLmV4cG9ydHMgPSBtaW5vclxuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgcGF0Y2ggPSAoYSwgbG9vc2UpID0+IG5ldyBTZW1WZXIoYSwgbG9vc2UpLnBhdGNoXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoXG4iLCJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgcHJlcmVsZWFzZSA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiAocGFyc2VkICYmIHBhcnNlZC5wcmVyZWxlYXNlLmxlbmd0aCkgPyBwYXJzZWQucHJlcmVsZWFzZSA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gcHJlcmVsZWFzZVxuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCByY29tcGFyZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShiLCBhLCBsb29zZSlcbm1vZHVsZS5leHBvcnRzID0gcmNvbXBhcmVcbiIsImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgY29tcGFyZUxvb3NlID0gKGEsIGIpID0+IGNvbXBhcmUoYSwgYiwgdHJ1ZSlcbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUxvb3NlXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlQnVpbGQgPSAoYSwgYiwgbG9vc2UpID0+IHtcbiAgY29uc3QgdmVyc2lvbkEgPSBuZXcgU2VtVmVyKGEsIGxvb3NlKVxuICBjb25zdCB2ZXJzaW9uQiA9IG5ldyBTZW1WZXIoYiwgbG9vc2UpXG4gIHJldHVybiB2ZXJzaW9uQS5jb21wYXJlKHZlcnNpb25CKSB8fCB2ZXJzaW9uQS5jb21wYXJlQnVpbGQodmVyc2lvbkIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVCdWlsZFxuIiwiY29uc3QgY29tcGFyZUJ1aWxkID0gcmVxdWlyZSgnLi9jb21wYXJlLWJ1aWxkJylcbmNvbnN0IHNvcnQgPSAobGlzdCwgbG9vc2UpID0+IGxpc3Quc29ydCgoYSwgYikgPT4gY29tcGFyZUJ1aWxkKGEsIGIsIGxvb3NlKSlcbm1vZHVsZS5leHBvcnRzID0gc29ydFxuIiwiY29uc3QgY29tcGFyZUJ1aWxkID0gcmVxdWlyZSgnLi9jb21wYXJlLWJ1aWxkJylcbmNvbnN0IHJzb3J0ID0gKGxpc3QsIGxvb3NlKSA9PiBsaXN0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVCdWlsZChiLCBhLCBsb29zZSkpXG5tb2R1bGUuZXhwb3J0cyA9IHJzb3J0XG4iLCJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGd0ID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RcbiIsImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbHQgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpIDwgMFxubW9kdWxlLmV4cG9ydHMgPSBsdFxuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBuZXEgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpICE9PSAwXG5tb2R1bGUuZXhwb3J0cyA9IG5lcVxuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBndGUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID49IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RlXG4iLCJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPD0gMFxubW9kdWxlLmV4cG9ydHMgPSBsdGVcbiIsImNvbnN0IGVxID0gcmVxdWlyZSgnLi9lcScpXG5jb25zdCBuZXEgPSByZXF1aXJlKCcuL25lcScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4vZ3QnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi9ndGUnKVxuY29uc3QgbHQgPSByZXF1aXJlKCcuL2x0JylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4vbHRlJylcblxuY29uc3QgY21wID0gKGEsIG9wLCBiLCBsb29zZSkgPT4ge1xuICBzd2l0Y2ggKG9wKSB7XG4gICAgY2FzZSAnPT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSA9PT0gYlxuXG4gICAgY2FzZSAnIT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgb3BlcmF0b3I6ICR7b3B9YClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjbXBcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB7IHJlLCB0IH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbmNvbnN0IGNvZXJjZSA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpIHtcbiAgICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgbGV0IG1hdGNoID0gbnVsbFxuICBpZiAoIW9wdGlvbnMucnRsKSB7XG4gICAgbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKHJlW3QuQ09FUkNFXSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGaW5kIHRoZSByaWdodC1tb3N0IGNvZXJjaWJsZSBzdHJpbmcgdGhhdCBkb2VzIG5vdCBzaGFyZVxuICAgIC8vIGEgdGVybWludXMgd2l0aCBhIG1vcmUgbGVmdC13YXJkIGNvZXJjaWJsZSBzdHJpbmcuXG4gICAgLy8gRWcsICcxLjIuMy40JyB3YW50cyB0byBjb2VyY2UgJzIuMy40Jywgbm90ICczLjQnIG9yICc0J1xuICAgIC8vXG4gICAgLy8gV2FsayB0aHJvdWdoIHRoZSBzdHJpbmcgY2hlY2tpbmcgd2l0aCBhIC9nIHJlZ2V4cFxuICAgIC8vIE1hbnVhbGx5IHNldCB0aGUgaW5kZXggc28gYXMgdG8gcGljayB1cCBvdmVybGFwcGluZyBtYXRjaGVzLlxuICAgIC8vIFN0b3Agd2hlbiB3ZSBnZXQgYSBtYXRjaCB0aGF0IGVuZHMgYXQgdGhlIHN0cmluZyBlbmQsIHNpbmNlIG5vXG4gICAgLy8gY29lcmNpYmxlIHN0cmluZyBjYW4gYmUgbW9yZSByaWdodC13YXJkIHdpdGhvdXQgdGhlIHNhbWUgdGVybWludXMuXG4gICAgbGV0IG5leHRcbiAgICB3aGlsZSAoKG5leHQgPSByZVt0LkNPRVJDRVJUTF0uZXhlYyh2ZXJzaW9uKSkgJiZcbiAgICAgICAgKCFtYXRjaCB8fCBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCAhPT0gdmVyc2lvbi5sZW5ndGgpXG4gICAgKSB7XG4gICAgICBpZiAoIW1hdGNoIHx8XG4gICAgICAgICAgICBuZXh0LmluZGV4ICsgbmV4dFswXS5sZW5ndGggIT09IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKSB7XG4gICAgICAgIG1hdGNoID0gbmV4dFxuICAgICAgfVxuICAgICAgcmVbdC5DT0VSQ0VSVExdLmxhc3RJbmRleCA9IG5leHQuaW5kZXggKyBuZXh0WzFdLmxlbmd0aCArIG5leHRbMl0ubGVuZ3RoXG4gICAgfVxuICAgIC8vIGxlYXZlIGl0IGluIGEgY2xlYW4gc3RhdGVcbiAgICByZVt0LkNPRVJDRVJUTF0ubGFzdEluZGV4ID0gLTFcbiAgfVxuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gcGFyc2UoYCR7bWF0Y2hbMl19LiR7bWF0Y2hbM10gfHwgJzAnfS4ke21hdGNoWzRdIHx8ICcwJ31gLCBvcHRpb25zKVxufVxubW9kdWxlLmV4cG9ydHMgPSBjb2VyY2VcbiIsIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoWWFsbGlzdCkge1xuICBZYWxsaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24qICgpIHtcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlcjsgd2Fsa2VyID0gd2Fsa2VyLm5leHQpIHtcbiAgICAgIHlpZWxkIHdhbGtlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5tb2R1bGUuZXhwb3J0cyA9IFlhbGxpc3RcblxuWWFsbGlzdC5Ob2RlID0gTm9kZVxuWWFsbGlzdC5jcmVhdGUgPSBZYWxsaXN0XG5cbmZ1bmN0aW9uIFlhbGxpc3QgKGxpc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghKHNlbGYgaW5zdGFuY2VvZiBZYWxsaXN0KSkge1xuICAgIHNlbGYgPSBuZXcgWWFsbGlzdCgpXG4gIH1cblxuICBzZWxmLnRhaWwgPSBudWxsXG4gIHNlbGYuaGVhZCA9IG51bGxcbiAgc2VsZi5sZW5ndGggPSAwXG5cbiAgaWYgKGxpc3QgJiYgdHlwZW9mIGxpc3QuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgc2VsZi5wdXNoKGl0ZW0pXG4gICAgfSlcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgc2VsZi5wdXNoKGFyZ3VtZW50c1tpXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VsZlxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5yZW1vdmVOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUubGlzdCAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVtb3Zpbmcgbm9kZSB3aGljaCBkb2VzIG5vdCBiZWxvbmcgdG8gdGhpcyBsaXN0JylcbiAgfVxuXG4gIHZhciBuZXh0ID0gbm9kZS5uZXh0XG4gIHZhciBwcmV2ID0gbm9kZS5wcmV2XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0LnByZXYgPSBwcmV2XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIHByZXYubmV4dCA9IG5leHRcbiAgfVxuXG4gIGlmIChub2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQgPSBuZXh0XG4gIH1cbiAgaWYgKG5vZGUgPT09IHRoaXMudGFpbCkge1xuICAgIHRoaXMudGFpbCA9IHByZXZcbiAgfVxuXG4gIG5vZGUubGlzdC5sZW5ndGgtLVxuICBub2RlLm5leHQgPSBudWxsXG4gIG5vZGUucHJldiA9IG51bGxcbiAgbm9kZS5saXN0ID0gbnVsbFxuXG4gIHJldHVybiBuZXh0XG59XG5cbllhbGxpc3QucHJvdG90eXBlLnVuc2hpZnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKG5vZGUubGlzdCkge1xuICAgIG5vZGUubGlzdC5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cblxuICB2YXIgaGVhZCA9IHRoaXMuaGVhZFxuICBub2RlLmxpc3QgPSB0aGlzXG4gIG5vZGUubmV4dCA9IGhlYWRcbiAgaWYgKGhlYWQpIHtcbiAgICBoZWFkLnByZXYgPSBub2RlXG4gIH1cblxuICB0aGlzLmhlYWQgPSBub2RlXG4gIGlmICghdGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsID0gbm9kZVxuICB9XG4gIHRoaXMubGVuZ3RoKytcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucHVzaE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobm9kZS5saXN0KSB7XG4gICAgbm9kZS5saXN0LnJlbW92ZU5vZGUobm9kZSlcbiAgfVxuXG4gIHZhciB0YWlsID0gdGhpcy50YWlsXG4gIG5vZGUubGlzdCA9IHRoaXNcbiAgbm9kZS5wcmV2ID0gdGFpbFxuICBpZiAodGFpbCkge1xuICAgIHRhaWwubmV4dCA9IG5vZGVcbiAgfVxuXG4gIHRoaXMudGFpbCA9IG5vZGVcbiAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQgPSBub2RlXG4gIH1cbiAgdGhpcy5sZW5ndGgrK1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwdXNoKHRoaXMsIGFyZ3VtZW50c1tpXSlcbiAgfVxuICByZXR1cm4gdGhpcy5sZW5ndGhcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdW5zaGlmdCh0aGlzLCBhcmd1bWVudHNbaV0pXG4gIH1cbiAgcmV0dXJuIHRoaXMubGVuZ3RoXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnRhaWwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgcmVzID0gdGhpcy50YWlsLnZhbHVlXG4gIHRoaXMudGFpbCA9IHRoaXMudGFpbC5wcmV2XG4gIGlmICh0aGlzLnRhaWwpIHtcbiAgICB0aGlzLnRhaWwubmV4dCA9IG51bGxcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhlYWQgPSBudWxsXG4gIH1cbiAgdGhpcy5sZW5ndGgtLVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaGVhZCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciByZXMgPSB0aGlzLmhlYWQudmFsdWVcbiAgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHRcbiAgaWYgKHRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZC5wcmV2ID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIHRoaXMudGFpbCA9IG51bGxcbiAgfVxuICB0aGlzLmxlbmd0aC0tXG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMuaGVhZCwgaSA9IDA7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCBpLCB0aGlzKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZm9yRWFjaFJldmVyc2UgPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLnRhaWwsIGkgPSB0aGlzLmxlbmd0aCAtIDE7IHdhbGtlciAhPT0gbnVsbDsgaS0tKSB7XG4gICAgZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCBpLCB0aGlzKVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG4pIHtcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBuOyBpKyspIHtcbiAgICAvLyBhYm9ydCBvdXQgb2YgdGhlIGxpc3QgZWFybHkgaWYgd2UgaGl0IGEgY3ljbGVcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIGlmIChpID09PSBuICYmIHdhbGtlciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB3YWxrZXIudmFsdWVcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5nZXRSZXZlcnNlID0gZnVuY3Rpb24gKG4pIHtcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBuOyBpKyspIHtcbiAgICAvLyBhYm9ydCBvdXQgb2YgdGhlIGxpc3QgZWFybHkgaWYgd2UgaGl0IGEgY3ljbGVcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIGlmIChpID09PSBuICYmIHdhbGtlciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB3YWxrZXIudmFsdWVcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICB2YXIgcmVzID0gbmV3IFlhbGxpc3QoKVxuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICByZXMucHVzaChmbi5jYWxsKHRoaXNwLCB3YWxrZXIudmFsdWUsIHRoaXMpKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5tYXBSZXZlcnNlID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgdmFyIHJlcyA9IG5ldyBZYWxsaXN0KClcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgcmVzLnB1c2goZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCB0aGlzKSlcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGZuLCBpbml0aWFsKSB7XG4gIHZhciBhY2NcbiAgdmFyIHdhbGtlciA9IHRoaXMuaGVhZFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBhY2MgPSBpbml0aWFsXG4gIH0gZWxzZSBpZiAodGhpcy5oZWFkKSB7XG4gICAgd2Fsa2VyID0gdGhpcy5oZWFkLm5leHRcbiAgICBhY2MgPSB0aGlzLmhlYWQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgbGlzdCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYWNjID0gZm4oYWNjLCB3YWxrZXIudmFsdWUsIGkpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuXG4gIHJldHVybiBhY2Ncbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmVkdWNlUmV2ZXJzZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbCkge1xuICB2YXIgYWNjXG4gIHZhciB3YWxrZXIgPSB0aGlzLnRhaWxcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgYWNjID0gaW5pdGlhbFxuICB9IGVsc2UgaWYgKHRoaXMudGFpbCkge1xuICAgIHdhbGtlciA9IHRoaXMudGFpbC5wcmV2XG4gICAgYWNjID0gdGhpcy50YWlsLnZhbHVlXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlJylcbiAgfVxuXG4gIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IHdhbGtlciAhPT0gbnVsbDsgaS0tKSB7XG4gICAgYWNjID0gZm4oYWNjLCB3YWxrZXIudmFsdWUsIGkpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuXG4gIHJldHVybiBhY2Ncbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyciA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsOyBpKyspIHtcbiAgICBhcnJbaV0gPSB3YWxrZXIudmFsdWVcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIHJldHVybiBhcnJcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudG9BcnJheVJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYXJyW2ldID0gd2Fsa2VyLnZhbHVlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICByZXR1cm4gYXJyXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gIHRvID0gdG8gfHwgdGhpcy5sZW5ndGhcbiAgaWYgKHRvIDwgMCkge1xuICAgIHRvICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZnJvbSA9IGZyb20gfHwgMFxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgdmFyIHJldCA9IG5ldyBZYWxsaXN0KClcbiAgaWYgKHRvIDwgZnJvbSB8fCB0byA8IDApIHtcbiAgICByZXR1cm4gcmV0XG4gIH1cbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSA9IDBcbiAgfVxuICBpZiAodG8gPiB0aGlzLmxlbmd0aCkge1xuICAgIHRvID0gdGhpcy5sZW5ndGhcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IGZyb207IGkrKykge1xuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgZm9yICg7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgdG87IGkrKywgd2Fsa2VyID0gd2Fsa2VyLm5leHQpIHtcbiAgICByZXQucHVzaCh3YWxrZXIudmFsdWUpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zbGljZVJldmVyc2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgdG8gPSB0byB8fCB0aGlzLmxlbmd0aFxuICBpZiAodG8gPCAwKSB7XG4gICAgdG8gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICBmcm9tID0gZnJvbSB8fCAwXG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICB2YXIgcmV0ID0gbmV3IFlhbGxpc3QoKVxuICBpZiAodG8gPCBmcm9tIHx8IHRvIDwgMCkge1xuICAgIHJldHVybiByZXRcbiAgfVxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tID0gMFxuICB9XG4gIGlmICh0byA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdG8gPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCwgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGwgJiYgaSA+IHRvOyBpLS0pIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIGZvciAoOyB3YWxrZXIgIT09IG51bGwgJiYgaSA+IGZyb207IGktLSwgd2Fsa2VyID0gd2Fsa2VyLnByZXYpIHtcbiAgICByZXQucHVzaCh3YWxrZXIudmFsdWUpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zcGxpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5ub2Rlcykge1xuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHN0YXJ0ID0gdGhpcy5sZW5ndGggLSAxXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgc3RhcnQ7IGkrKykge1xuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cblxuICB2YXIgcmV0ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IHdhbGtlciAmJiBpIDwgZGVsZXRlQ291bnQ7IGkrKykge1xuICAgIHJldC5wdXNoKHdhbGtlci52YWx1ZSlcbiAgICB3YWxrZXIgPSB0aGlzLnJlbW92ZU5vZGUod2Fsa2VyKVxuICB9XG4gIGlmICh3YWxrZXIgPT09IG51bGwpIHtcbiAgICB3YWxrZXIgPSB0aGlzLnRhaWxcbiAgfVxuXG4gIGlmICh3YWxrZXIgIT09IHRoaXMuaGVhZCAmJiB3YWxrZXIgIT09IHRoaXMudGFpbCkge1xuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgd2Fsa2VyID0gaW5zZXJ0KHRoaXMsIHdhbGtlciwgbm9kZXNbaV0pXG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQgPSB0aGlzLmhlYWRcbiAgdmFyIHRhaWwgPSB0aGlzLnRhaWxcbiAgZm9yICh2YXIgd2Fsa2VyID0gaGVhZDsgd2Fsa2VyICE9PSBudWxsOyB3YWxrZXIgPSB3YWxrZXIucHJldikge1xuICAgIHZhciBwID0gd2Fsa2VyLnByZXZcbiAgICB3YWxrZXIucHJldiA9IHdhbGtlci5uZXh0XG4gICAgd2Fsa2VyLm5leHQgPSBwXG4gIH1cbiAgdGhpcy5oZWFkID0gdGFpbFxuICB0aGlzLnRhaWwgPSBoZWFkXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGluc2VydCAoc2VsZiwgbm9kZSwgdmFsdWUpIHtcbiAgdmFyIGluc2VydGVkID0gbm9kZSA9PT0gc2VsZi5oZWFkID9cbiAgICBuZXcgTm9kZSh2YWx1ZSwgbnVsbCwgbm9kZSwgc2VsZikgOlxuICAgIG5ldyBOb2RlKHZhbHVlLCBub2RlLCBub2RlLm5leHQsIHNlbGYpXG5cbiAgaWYgKGluc2VydGVkLm5leHQgPT09IG51bGwpIHtcbiAgICBzZWxmLnRhaWwgPSBpbnNlcnRlZFxuICB9XG4gIGlmIChpbnNlcnRlZC5wcmV2ID09PSBudWxsKSB7XG4gICAgc2VsZi5oZWFkID0gaW5zZXJ0ZWRcbiAgfVxuXG4gIHNlbGYubGVuZ3RoKytcblxuICByZXR1cm4gaW5zZXJ0ZWRcbn1cblxuZnVuY3Rpb24gcHVzaCAoc2VsZiwgaXRlbSkge1xuICBzZWxmLnRhaWwgPSBuZXcgTm9kZShpdGVtLCBzZWxmLnRhaWwsIG51bGwsIHNlbGYpXG4gIGlmICghc2VsZi5oZWFkKSB7XG4gICAgc2VsZi5oZWFkID0gc2VsZi50YWlsXG4gIH1cbiAgc2VsZi5sZW5ndGgrK1xufVxuXG5mdW5jdGlvbiB1bnNoaWZ0IChzZWxmLCBpdGVtKSB7XG4gIHNlbGYuaGVhZCA9IG5ldyBOb2RlKGl0ZW0sIG51bGwsIHNlbGYuaGVhZCwgc2VsZilcbiAgaWYgKCFzZWxmLnRhaWwpIHtcbiAgICBzZWxmLnRhaWwgPSBzZWxmLmhlYWRcbiAgfVxuICBzZWxmLmxlbmd0aCsrXG59XG5cbmZ1bmN0aW9uIE5vZGUgKHZhbHVlLCBwcmV2LCBuZXh0LCBsaXN0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOb2RlKSkge1xuICAgIHJldHVybiBuZXcgTm9kZSh2YWx1ZSwgcHJldiwgbmV4dCwgbGlzdClcbiAgfVxuXG4gIHRoaXMubGlzdCA9IGxpc3RcbiAgdGhpcy52YWx1ZSA9IHZhbHVlXG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Lm5leHQgPSB0aGlzXG4gICAgdGhpcy5wcmV2ID0gcHJldlxuICB9IGVsc2Uge1xuICAgIHRoaXMucHJldiA9IG51bGxcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5wcmV2ID0gdGhpc1xuICAgIHRoaXMubmV4dCA9IG5leHRcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm5leHQgPSBudWxsXG4gIH1cbn1cblxudHJ5IHtcbiAgLy8gYWRkIGlmIHN1cHBvcnQgZm9yIFN5bWJvbC5pdGVyYXRvciBpcyBwcmVzZW50XG4gIHJlcXVpcmUoJy4vaXRlcmF0b3IuanMnKShZYWxsaXN0KVxufSBjYXRjaCAoZXIpIHt9XG4iLCIndXNlIHN0cmljdCdcblxuLy8gQSBsaW5rZWQgbGlzdCB0byBrZWVwIHRyYWNrIG9mIHJlY2VudGx5LXVzZWQtbmVzc1xuY29uc3QgWWFsbGlzdCA9IHJlcXVpcmUoJ3lhbGxpc3QnKVxuXG5jb25zdCBNQVggPSBTeW1ib2woJ21heCcpXG5jb25zdCBMRU5HVEggPSBTeW1ib2woJ2xlbmd0aCcpXG5jb25zdCBMRU5HVEhfQ0FMQ1VMQVRPUiA9IFN5bWJvbCgnbGVuZ3RoQ2FsY3VsYXRvcicpXG5jb25zdCBBTExPV19TVEFMRSA9IFN5bWJvbCgnYWxsb3dTdGFsZScpXG5jb25zdCBNQVhfQUdFID0gU3ltYm9sKCdtYXhBZ2UnKVxuY29uc3QgRElTUE9TRSA9IFN5bWJvbCgnZGlzcG9zZScpXG5jb25zdCBOT19ESVNQT1NFX09OX1NFVCA9IFN5bWJvbCgnbm9EaXNwb3NlT25TZXQnKVxuY29uc3QgTFJVX0xJU1QgPSBTeW1ib2woJ2xydUxpc3QnKVxuY29uc3QgQ0FDSEUgPSBTeW1ib2woJ2NhY2hlJylcbmNvbnN0IFVQREFURV9BR0VfT05fR0VUID0gU3ltYm9sKCd1cGRhdGVBZ2VPbkdldCcpXG5cbmNvbnN0IG5haXZlTGVuZ3RoID0gKCkgPT4gMVxuXG4vLyBscnVMaXN0IGlzIGEgeWFsbGlzdCB3aGVyZSB0aGUgaGVhZCBpcyB0aGUgeW91bmdlc3Rcbi8vIGl0ZW0sIGFuZCB0aGUgdGFpbCBpcyB0aGUgb2xkZXN0LiAgdGhlIGxpc3QgY29udGFpbnMgdGhlIEhpdFxuLy8gb2JqZWN0cyBhcyB0aGUgZW50cmllcy5cbi8vIEVhY2ggSGl0IG9iamVjdCBoYXMgYSByZWZlcmVuY2UgdG8gaXRzIFlhbGxpc3QuTm9kZS4gIFRoaXNcbi8vIG5ldmVyIGNoYW5nZXMuXG4vL1xuLy8gY2FjaGUgaXMgYSBNYXAgKG9yIFBzZXVkb01hcCkgdGhhdCBtYXRjaGVzIHRoZSBrZXlzIHRvXG4vLyB0aGUgWWFsbGlzdC5Ob2RlIG9iamVjdC5cbmNsYXNzIExSVUNhY2hlIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKVxuICAgICAgb3B0aW9ucyA9IHsgbWF4OiBvcHRpb25zIH1cblxuICAgIGlmICghb3B0aW9ucylcbiAgICAgIG9wdGlvbnMgPSB7fVxuXG4gICAgaWYgKG9wdGlvbnMubWF4ICYmICh0eXBlb2Ygb3B0aW9ucy5tYXggIT09ICdudW1iZXInIHx8IG9wdGlvbnMubWF4IDwgMCkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuICAgIC8vIEtpbmQgb2Ygd2VpcmQgdG8gaGF2ZSBhIGRlZmF1bHQgbWF4IG9mIEluZmluaXR5LCBidXQgb2ggd2VsbC5cbiAgICBjb25zdCBtYXggPSB0aGlzW01BWF0gPSBvcHRpb25zLm1heCB8fCBJbmZpbml0eVxuXG4gICAgY29uc3QgbGMgPSBvcHRpb25zLmxlbmd0aCB8fCBuYWl2ZUxlbmd0aFxuICAgIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdID0gKHR5cGVvZiBsYyAhPT0gJ2Z1bmN0aW9uJykgPyBuYWl2ZUxlbmd0aCA6IGxjXG4gICAgdGhpc1tBTExPV19TVEFMRV0gPSBvcHRpb25zLnN0YWxlIHx8IGZhbHNlXG4gICAgaWYgKG9wdGlvbnMubWF4QWdlICYmIHR5cGVvZiBvcHRpb25zLm1heEFnZSAhPT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhBZ2UgbXVzdCBiZSBhIG51bWJlcicpXG4gICAgdGhpc1tNQVhfQUdFXSA9IG9wdGlvbnMubWF4QWdlIHx8IDBcbiAgICB0aGlzW0RJU1BPU0VdID0gb3B0aW9ucy5kaXNwb3NlXG4gICAgdGhpc1tOT19ESVNQT1NFX09OX1NFVF0gPSBvcHRpb25zLm5vRGlzcG9zZU9uU2V0IHx8IGZhbHNlXG4gICAgdGhpc1tVUERBVEVfQUdFX09OX0dFVF0gPSBvcHRpb25zLnVwZGF0ZUFnZU9uR2V0IHx8IGZhbHNlXG4gICAgdGhpcy5yZXNldCgpXG4gIH1cblxuICAvLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIG1heCBjaGFuZ2VzLlxuICBzZXQgbWF4IChtTCkge1xuICAgIGlmICh0eXBlb2YgbUwgIT09ICdudW1iZXInIHx8IG1MIDwgMClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF0gPSBtTCB8fCBJbmZpbml0eVxuICAgIHRyaW0odGhpcylcbiAgfVxuICBnZXQgbWF4ICgpIHtcbiAgICByZXR1cm4gdGhpc1tNQVhdXG4gIH1cblxuICBzZXQgYWxsb3dTdGFsZSAoYWxsb3dTdGFsZSkge1xuICAgIHRoaXNbQUxMT1dfU1RBTEVdID0gISFhbGxvd1N0YWxlXG4gIH1cbiAgZ2V0IGFsbG93U3RhbGUgKCkge1xuICAgIHJldHVybiB0aGlzW0FMTE9XX1NUQUxFXVxuICB9XG5cbiAgc2V0IG1heEFnZSAobUEpIHtcbiAgICBpZiAodHlwZW9mIG1BICE9PSAnbnVtYmVyJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heEFnZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF9BR0VdID0gbUFcbiAgICB0cmltKHRoaXMpXG4gIH1cbiAgZ2V0IG1heEFnZSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUFYX0FHRV1cbiAgfVxuXG4gIC8vIHJlc2l6ZSB0aGUgY2FjaGUgd2hlbiB0aGUgbGVuZ3RoQ2FsY3VsYXRvciBjaGFuZ2VzLlxuICBzZXQgbGVuZ3RoQ2FsY3VsYXRvciAobEMpIHtcbiAgICBpZiAodHlwZW9mIGxDICE9PSAnZnVuY3Rpb24nKVxuICAgICAgbEMgPSBuYWl2ZUxlbmd0aFxuXG4gICAgaWYgKGxDICE9PSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSkge1xuICAgICAgdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0gPSBsQ1xuICAgICAgdGhpc1tMRU5HVEhdID0gMFxuICAgICAgdGhpc1tMUlVfTElTVF0uZm9yRWFjaChoaXQgPT4ge1xuICAgICAgICBoaXQubGVuZ3RoID0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0oaGl0LnZhbHVlLCBoaXQua2V5KVxuICAgICAgICB0aGlzW0xFTkdUSF0gKz0gaGl0Lmxlbmd0aFxuICAgICAgfSlcbiAgICB9XG4gICAgdHJpbSh0aGlzKVxuICB9XG4gIGdldCBsZW5ndGhDYWxjdWxhdG9yICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdIH1cblxuICBnZXQgbGVuZ3RoICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIXSB9XG4gIGdldCBpdGVtQ291bnQgKCkgeyByZXR1cm4gdGhpc1tMUlVfTElTVF0ubGVuZ3RoIH1cblxuICByZm9yRWFjaCAoZm4sIHRoaXNwKSB7XG4gICAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpc1tMUlVfTElTVF0udGFpbDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgY29uc3QgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgICBmb3JFYWNoU3RlcCh0aGlzLCBmbiwgd2Fsa2VyLCB0aGlzcClcbiAgICAgIHdhbGtlciA9IHByZXZcbiAgICB9XG4gIH1cblxuICBmb3JFYWNoIChmbiwgdGhpc3ApIHtcbiAgICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzW0xSVV9MSVNUXS5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgICBjb25zdCBuZXh0ID0gd2Fsa2VyLm5leHRcbiAgICAgIGZvckVhY2hTdGVwKHRoaXMsIGZuLCB3YWxrZXIsIHRoaXNwKVxuICAgICAgd2Fsa2VyID0gbmV4dFxuICAgIH1cbiAgfVxuXG4gIGtleXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay5rZXkpXG4gIH1cblxuICB2YWx1ZXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay52YWx1ZSlcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICBpZiAodGhpc1tESVNQT1NFXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXS5sZW5ndGgpIHtcbiAgICAgIHRoaXNbTFJVX0xJU1RdLmZvckVhY2goaGl0ID0+IHRoaXNbRElTUE9TRV0oaGl0LmtleSwgaGl0LnZhbHVlKSlcbiAgICB9XG5cbiAgICB0aGlzW0NBQ0hFXSA9IG5ldyBNYXAoKSAvLyBoYXNoIG9mIGl0ZW1zIGJ5IGtleVxuICAgIHRoaXNbTFJVX0xJU1RdID0gbmV3IFlhbGxpc3QoKSAvLyBsaXN0IG9mIGl0ZW1zIGluIG9yZGVyIG9mIHVzZSByZWNlbmN5XG4gICAgdGhpc1tMRU5HVEhdID0gMCAvLyBsZW5ndGggb2YgaXRlbXMgaW4gdGhlIGxpc3RcbiAgfVxuXG4gIGR1bXAgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS5tYXAoaGl0ID0+XG4gICAgICBpc1N0YWxlKHRoaXMsIGhpdCkgPyBmYWxzZSA6IHtcbiAgICAgICAgazogaGl0LmtleSxcbiAgICAgICAgdjogaGl0LnZhbHVlLFxuICAgICAgICBlOiBoaXQubm93ICsgKGhpdC5tYXhBZ2UgfHwgMClcbiAgICAgIH0pLnRvQXJyYXkoKS5maWx0ZXIoaCA9PiBoKVxuICB9XG5cbiAgZHVtcExydSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTFJVX0xJU1RdXG4gIH1cblxuICBzZXQgKGtleSwgdmFsdWUsIG1heEFnZSkge1xuICAgIG1heEFnZSA9IG1heEFnZSB8fCB0aGlzW01BWF9BR0VdXG5cbiAgICBpZiAobWF4QWdlICYmIHR5cGVvZiBtYXhBZ2UgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4QWdlIG11c3QgYmUgYSBudW1iZXInKVxuXG4gICAgY29uc3Qgbm93ID0gbWF4QWdlID8gRGF0ZS5ub3coKSA6IDBcbiAgICBjb25zdCBsZW4gPSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSh2YWx1ZSwga2V5KVxuXG4gICAgaWYgKHRoaXNbQ0FDSEVdLmhhcyhrZXkpKSB7XG4gICAgICBpZiAobGVuID4gdGhpc1tNQVhdKSB7XG4gICAgICAgIGRlbCh0aGlzLCB0aGlzW0NBQ0hFXS5nZXQoa2V5KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KVxuICAgICAgY29uc3QgaXRlbSA9IG5vZGUudmFsdWVcblxuICAgICAgLy8gZGlzcG9zZSBvZiB0aGUgb2xkIG9uZSBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgICAgIC8vIHNwbGl0IG91dCBpbnRvIDIgaWZzIGZvciBiZXR0ZXIgY292ZXJhZ2UgdHJhY2tpbmdcbiAgICAgIGlmICh0aGlzW0RJU1BPU0VdKSB7XG4gICAgICAgIGlmICghdGhpc1tOT19ESVNQT1NFX09OX1NFVF0pXG4gICAgICAgICAgdGhpc1tESVNQT1NFXShrZXksIGl0ZW0udmFsdWUpXG4gICAgICB9XG5cbiAgICAgIGl0ZW0ubm93ID0gbm93XG4gICAgICBpdGVtLm1heEFnZSA9IG1heEFnZVxuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlXG4gICAgICB0aGlzW0xFTkdUSF0gKz0gbGVuIC0gaXRlbS5sZW5ndGhcbiAgICAgIGl0ZW0ubGVuZ3RoID0gbGVuXG4gICAgICB0aGlzLmdldChrZXkpXG4gICAgICB0cmltKHRoaXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGhpdCA9IG5ldyBFbnRyeShrZXksIHZhbHVlLCBsZW4sIG5vdywgbWF4QWdlKVxuXG4gICAgLy8gb3ZlcnNpemVkIG9iamVjdHMgZmFsbCBvdXQgb2YgY2FjaGUgYXV0b21hdGljYWxseS5cbiAgICBpZiAoaGl0Lmxlbmd0aCA+IHRoaXNbTUFYXSkge1xuICAgICAgaWYgKHRoaXNbRElTUE9TRV0pXG4gICAgICAgIHRoaXNbRElTUE9TRV0oa2V5LCB2YWx1ZSlcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpc1tMRU5HVEhdICs9IGhpdC5sZW5ndGhcbiAgICB0aGlzW0xSVV9MSVNUXS51bnNoaWZ0KGhpdClcbiAgICB0aGlzW0NBQ0hFXS5zZXQoa2V5LCB0aGlzW0xSVV9MSVNUXS5oZWFkKVxuICAgIHRyaW0odGhpcylcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaGFzIChrZXkpIHtcbiAgICBpZiAoIXRoaXNbQ0FDSEVdLmhhcyhrZXkpKSByZXR1cm4gZmFsc2VcbiAgICBjb25zdCBoaXQgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KS52YWx1ZVxuICAgIHJldHVybiAhaXNTdGFsZSh0aGlzLCBoaXQpXG4gIH1cblxuICBnZXQgKGtleSkge1xuICAgIHJldHVybiBnZXQodGhpcywga2V5LCB0cnVlKVxuICB9XG5cbiAgcGVlayAoa2V5KSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIGZhbHNlKVxuICB9XG5cbiAgcG9wICgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpc1tMUlVfTElTVF0udGFpbFxuICAgIGlmICghbm9kZSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICBkZWwodGhpcywgbm9kZSlcbiAgICByZXR1cm4gbm9kZS52YWx1ZVxuICB9XG5cbiAgZGVsIChrZXkpIHtcbiAgICBkZWwodGhpcywgdGhpc1tDQUNIRV0uZ2V0KGtleSkpXG4gIH1cblxuICBsb2FkIChhcnIpIHtcbiAgICAvLyByZXNldCB0aGUgY2FjaGVcbiAgICB0aGlzLnJlc2V0KClcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgICAvLyBBIHByZXZpb3VzIHNlcmlhbGl6ZWQgY2FjaGUgaGFzIHRoZSBtb3N0IHJlY2VudCBpdGVtcyBmaXJzdFxuICAgIGZvciAobGV0IGwgPSBhcnIubGVuZ3RoIC0gMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgIGNvbnN0IGhpdCA9IGFycltsXVxuICAgICAgY29uc3QgZXhwaXJlc0F0ID0gaGl0LmUgfHwgMFxuICAgICAgaWYgKGV4cGlyZXNBdCA9PT0gMClcbiAgICAgICAgLy8gdGhlIGl0ZW0gd2FzIGNyZWF0ZWQgd2l0aG91dCBleHBpcmF0aW9uIGluIGEgbm9uIGFnZWQgY2FjaGVcbiAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52KVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1heEFnZSA9IGV4cGlyZXNBdCAtIG5vd1xuICAgICAgICAvLyBkb250IGFkZCBhbHJlYWR5IGV4cGlyZWQgaXRlbXNcbiAgICAgICAgaWYgKG1heEFnZSA+IDApIHtcbiAgICAgICAgICB0aGlzLnNldChoaXQuaywgaGl0LnYsIG1heEFnZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBydW5lICgpIHtcbiAgICB0aGlzW0NBQ0hFXS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBnZXQodGhpcywga2V5LCBmYWxzZSkpXG4gIH1cbn1cblxuY29uc3QgZ2V0ID0gKHNlbGYsIGtleSwgZG9Vc2UpID0+IHtcbiAgY29uc3Qgbm9kZSA9IHNlbGZbQ0FDSEVdLmdldChrZXkpXG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChpc1N0YWxlKHNlbGYsIGhpdCkpIHtcbiAgICAgIGRlbChzZWxmLCBub2RlKVxuICAgICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZG9Vc2UpIHtcbiAgICAgICAgaWYgKHNlbGZbVVBEQVRFX0FHRV9PTl9HRVRdKVxuICAgICAgICAgIG5vZGUudmFsdWUubm93ID0gRGF0ZS5ub3coKVxuICAgICAgICBzZWxmW0xSVV9MSVNUXS51bnNoaWZ0Tm9kZShub2RlKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGl0LnZhbHVlXG4gIH1cbn1cblxuY29uc3QgaXNTdGFsZSA9IChzZWxmLCBoaXQpID0+IHtcbiAgaWYgKCFoaXQgfHwgKCFoaXQubWF4QWdlICYmICFzZWxmW01BWF9BR0VdKSlcbiAgICByZXR1cm4gZmFsc2VcblxuICBjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIGhpdC5ub3dcbiAgcmV0dXJuIGhpdC5tYXhBZ2UgPyBkaWZmID4gaGl0Lm1heEFnZVxuICAgIDogc2VsZltNQVhfQUdFXSAmJiAoZGlmZiA+IHNlbGZbTUFYX0FHRV0pXG59XG5cbmNvbnN0IHRyaW0gPSBzZWxmID0+IHtcbiAgaWYgKHNlbGZbTEVOR1RIXSA+IHNlbGZbTUFYXSkge1xuICAgIGZvciAobGV0IHdhbGtlciA9IHNlbGZbTFJVX0xJU1RdLnRhaWw7XG4gICAgICBzZWxmW0xFTkdUSF0gPiBzZWxmW01BWF0gJiYgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgLy8gV2Uga25vdyB0aGF0IHdlJ3JlIGFib3V0IHRvIGRlbGV0ZSB0aGlzIG9uZSwgYW5kIGFsc29cbiAgICAgIC8vIHdoYXQgdGhlIG5leHQgbGVhc3QgcmVjZW50bHkgdXNlZCBrZXkgd2lsbCBiZSwgc28ganVzdFxuICAgICAgLy8gZ28gYWhlYWQgYW5kIHNldCBpdCBub3cuXG4gICAgICBjb25zdCBwcmV2ID0gd2Fsa2VyLnByZXZcbiAgICAgIGRlbChzZWxmLCB3YWxrZXIpXG4gICAgICB3YWxrZXIgPSBwcmV2XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGRlbCA9IChzZWxmLCBub2RlKSA9PiB7XG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChzZWxmW0RJU1BPU0VdKVxuICAgICAgc2VsZltESVNQT1NFXShoaXQua2V5LCBoaXQudmFsdWUpXG5cbiAgICBzZWxmW0xFTkdUSF0gLT0gaGl0Lmxlbmd0aFxuICAgIHNlbGZbQ0FDSEVdLmRlbGV0ZShoaXQua2V5KVxuICAgIHNlbGZbTFJVX0xJU1RdLnJlbW92ZU5vZGUobm9kZSlcbiAgfVxufVxuXG5jbGFzcyBFbnRyeSB7XG4gIGNvbnN0cnVjdG9yIChrZXksIHZhbHVlLCBsZW5ndGgsIG5vdywgbWF4QWdlKSB7XG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgIHRoaXMubm93ID0gbm93XG4gICAgdGhpcy5tYXhBZ2UgPSBtYXhBZ2UgfHwgMFxuICB9XG59XG5cbmNvbnN0IGZvckVhY2hTdGVwID0gKHNlbGYsIGZuLCBub2RlLCB0aGlzcCkgPT4ge1xuICBsZXQgaGl0ID0gbm9kZS52YWx1ZVxuICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgZGVsKHNlbGYsIG5vZGUpXG4gICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgIGhpdCA9IHVuZGVmaW5lZFxuICB9XG4gIGlmIChoaXQpXG4gICAgZm4uY2FsbCh0aGlzcCwgaGl0LnZhbHVlLCBoaXQua2V5LCBzZWxmKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExSVUNhY2hlXG4iLCIvLyBob2lzdGVkIGNsYXNzIGZvciBjeWNsaWMgZGVwZW5kZW5jeVxuY2xhc3MgUmFuZ2Uge1xuICBjb25zdHJ1Y3RvciAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpXG5cbiAgICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBSYW5nZSkge1xuICAgICAgaWYgKFxuICAgICAgICByYW5nZS5sb29zZSA9PT0gISFvcHRpb25zLmxvb3NlICYmXG4gICAgICAgIHJhbmdlLmluY2x1ZGVQcmVyZWxlYXNlID09PSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gcmFuZ2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UucmF3LCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIENvbXBhcmF0b3IpIHtcbiAgICAgIC8vIGp1c3QgcHV0IGl0IGluIHRoZSBzZXQgYW5kIHJldHVyblxuICAgICAgdGhpcy5yYXcgPSByYW5nZS52YWx1ZVxuICAgICAgdGhpcy5zZXQgPSBbW3JhbmdlXV1cbiAgICAgIHRoaXMuZm9ybWF0KClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMubG9vc2UgPSAhIW9wdGlvbnMubG9vc2VcbiAgICB0aGlzLmluY2x1ZGVQcmVyZWxlYXNlID0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlXG5cbiAgICAvLyBGaXJzdCwgc3BsaXQgYmFzZWQgb24gYm9vbGVhbiBvciB8fFxuICAgIHRoaXMucmF3ID0gcmFuZ2VcbiAgICB0aGlzLnNldCA9IHJhbmdlXG4gICAgICAuc3BsaXQoJ3x8JylcbiAgICAgIC8vIG1hcCB0aGUgcmFuZ2UgdG8gYSAyZCBhcnJheSBvZiBjb21wYXJhdG9yc1xuICAgICAgLm1hcChyID0+IHRoaXMucGFyc2VSYW5nZShyLnRyaW0oKSkpXG4gICAgICAvLyB0aHJvdyBvdXQgYW55IGNvbXBhcmF0b3IgbGlzdHMgdGhhdCBhcmUgZW1wdHlcbiAgICAgIC8vIHRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgaXQgd2FzIG5vdCBhIHZhbGlkIHJhbmdlLCB3aGljaCBpcyBhbGxvd2VkXG4gICAgICAvLyBpbiBsb29zZSBtb2RlLCBidXQgd2lsbCBzdGlsbCB0aHJvdyBpZiB0aGUgV0hPTEUgcmFuZ2UgaXMgaW52YWxpZC5cbiAgICAgIC5maWx0ZXIoYyA9PiBjLmxlbmd0aClcblxuICAgIGlmICghdGhpcy5zZXQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFNlbVZlciBSYW5nZTogJHtyYW5nZX1gKVxuICAgIH1cblxuICAgIC8vIGlmIHdlIGhhdmUgYW55IHRoYXQgYXJlIG5vdCB0aGUgbnVsbCBzZXQsIHRocm93IG91dCBudWxsIHNldHMuXG4gICAgaWYgKHRoaXMuc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIGtlZXAgdGhlIGZpcnN0IG9uZSwgaW4gY2FzZSB0aGV5J3JlIGFsbCBudWxsIHNldHNcbiAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5zZXRbMF1cbiAgICAgIHRoaXMuc2V0ID0gdGhpcy5zZXQuZmlsdGVyKGMgPT4gIWlzTnVsbFNldChjWzBdKSlcbiAgICAgIGlmICh0aGlzLnNldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXQgPSBbZmlyc3RdXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbnkgdGhhdCBhcmUgKiwgdGhlbiB0aGUgcmFuZ2UgaXMganVzdCAqXG4gICAgICAgIGZvciAoY29uc3QgYyBvZiB0aGlzLnNldCkge1xuICAgICAgICAgIGlmIChjLmxlbmd0aCA9PT0gMSAmJiBpc0FueShjWzBdKSkge1xuICAgICAgICAgICAgdGhpcy5zZXQgPSBbY11cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtYXQoKVxuICB9XG5cbiAgZm9ybWF0ICgpIHtcbiAgICB0aGlzLnJhbmdlID0gdGhpcy5zZXRcbiAgICAgIC5tYXAoKGNvbXBzKSA9PiB7XG4gICAgICAgIHJldHVybiBjb21wcy5qb2luKCcgJykudHJpbSgpXG4gICAgICB9KVxuICAgICAgLmpvaW4oJ3x8JylcbiAgICAgIC50cmltKClcbiAgICByZXR1cm4gdGhpcy5yYW5nZVxuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLnJhbmdlXG4gIH1cblxuICBwYXJzZVJhbmdlIChyYW5nZSkge1xuICAgIHJhbmdlID0gcmFuZ2UudHJpbSgpXG5cbiAgICAvLyBtZW1vaXplIHJhbmdlIHBhcnNpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgIC8vIHRoaXMgaXMgYSB2ZXJ5IGhvdCBwYXRoLCBhbmQgZnVsbHkgZGV0ZXJtaW5pc3RpYy5cbiAgICBjb25zdCBtZW1vT3B0cyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykuam9pbignLCcpXG4gICAgY29uc3QgbWVtb0tleSA9IGBwYXJzZVJhbmdlOiR7bWVtb09wdHN9OiR7cmFuZ2V9YFxuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChtZW1vS2V5KVxuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWRcbiAgICB9XG5cbiAgICBjb25zdCBsb29zZSA9IHRoaXMub3B0aW9ucy5sb29zZVxuICAgIC8vIGAxLjIuMyAtIDEuMi40YCA9PiBgPj0xLjIuMyA8PTEuMi40YFxuICAgIGNvbnN0IGhyID0gbG9vc2UgPyByZVt0LkhZUEhFTlJBTkdFTE9PU0VdIDogcmVbdC5IWVBIRU5SQU5HRV1cbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UoaHIsIGh5cGhlblJlcGxhY2UodGhpcy5vcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSlcbiAgICBkZWJ1ZygnaHlwaGVuIHJlcGxhY2UnLCByYW5nZSlcbiAgICAvLyBgPiAxLjIuMyA8IDEuMi41YCA9PiBgPjEuMi4zIDwxLjIuNWBcbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UocmVbdC5DT01QQVJBVE9SVFJJTV0sIGNvbXBhcmF0b3JUcmltUmVwbGFjZSlcbiAgICBkZWJ1ZygnY29tcGFyYXRvciB0cmltJywgcmFuZ2UpXG5cbiAgICAvLyBgfiAxLjIuM2AgPT4gYH4xLjIuM2BcbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UocmVbdC5USUxERVRSSU1dLCB0aWxkZVRyaW1SZXBsYWNlKVxuXG4gICAgLy8gYF4gMS4yLjNgID0+IGBeMS4yLjNgXG4gICAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW3QuQ0FSRVRUUklNXSwgY2FyZXRUcmltUmVwbGFjZSlcblxuICAgIC8vIG5vcm1hbGl6ZSBzcGFjZXNcbiAgICByYW5nZSA9IHJhbmdlLnNwbGl0KC9cXHMrLykuam9pbignICcpXG5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgcmFuZ2UgaXMgY29tcGxldGVseSB0cmltbWVkIGFuZFxuICAgIC8vIHJlYWR5IHRvIGJlIHNwbGl0IGludG8gY29tcGFyYXRvcnMuXG5cbiAgICBsZXQgcmFuZ2VMaXN0ID0gcmFuZ2VcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKGNvbXAgPT4gcGFyc2VDb21wYXJhdG9yKGNvbXAsIHRoaXMub3B0aW9ucykpXG4gICAgICAuam9pbignICcpXG4gICAgICAuc3BsaXQoL1xccysvKVxuICAgICAgLy8gPj0wLjAuMCBpcyBlcXVpdmFsZW50IHRvICpcbiAgICAgIC5tYXAoY29tcCA9PiByZXBsYWNlR1RFMChjb21wLCB0aGlzLm9wdGlvbnMpKVxuXG4gICAgaWYgKGxvb3NlKSB7XG4gICAgICAvLyBpbiBsb29zZSBtb2RlLCB0aHJvdyBvdXQgYW55IHRoYXQgYXJlIG5vdCB2YWxpZCBjb21wYXJhdG9yc1xuICAgICAgcmFuZ2VMaXN0ID0gcmFuZ2VMaXN0LmZpbHRlcihjb21wID0+IHtcbiAgICAgICAgZGVidWcoJ2xvb3NlIGludmFsaWQgZmlsdGVyJywgY29tcCwgdGhpcy5vcHRpb25zKVxuICAgICAgICByZXR1cm4gISFjb21wLm1hdGNoKHJlW3QuQ09NUEFSQVRPUkxPT1NFXSlcbiAgICAgIH0pXG4gICAgfVxuICAgIGRlYnVnKCdyYW5nZSBsaXN0JywgcmFuZ2VMaXN0KVxuXG4gICAgLy8gaWYgYW55IGNvbXBhcmF0b3JzIGFyZSB0aGUgbnVsbCBzZXQsIHRoZW4gcmVwbGFjZSB3aXRoIEpVU1QgbnVsbCBzZXRcbiAgICAvLyBpZiBtb3JlIHRoYW4gb25lIGNvbXBhcmF0b3IsIHJlbW92ZSBhbnkgKiBjb21wYXJhdG9yc1xuICAgIC8vIGFsc28sIGRvbid0IGluY2x1ZGUgdGhlIHNhbWUgY29tcGFyYXRvciBtb3JlIHRoYW4gb25jZVxuICAgIGNvbnN0IHJhbmdlTWFwID0gbmV3IE1hcCgpXG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZUxpc3QubWFwKGNvbXAgPT4gbmV3IENvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKSlcbiAgICBmb3IgKGNvbnN0IGNvbXAgb2YgY29tcGFyYXRvcnMpIHtcbiAgICAgIGlmIChpc051bGxTZXQoY29tcCkpIHtcbiAgICAgICAgcmV0dXJuIFtjb21wXVxuICAgICAgfVxuICAgICAgcmFuZ2VNYXAuc2V0KGNvbXAudmFsdWUsIGNvbXApXG4gICAgfVxuICAgIGlmIChyYW5nZU1hcC5zaXplID4gMSAmJiByYW5nZU1hcC5oYXMoJycpKSB7XG4gICAgICByYW5nZU1hcC5kZWxldGUoJycpXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLnJhbmdlTWFwLnZhbHVlcygpXVxuICAgIGNhY2hlLnNldChtZW1vS2V5LCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaW50ZXJzZWN0cyAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShyYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBSYW5nZSBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0LnNvbWUoKHRoaXNDb21wYXJhdG9ycykgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaXNTYXRpc2ZpYWJsZSh0aGlzQ29tcGFyYXRvcnMsIG9wdGlvbnMpICYmXG4gICAgICAgIHJhbmdlLnNldC5zb21lKChyYW5nZUNvbXBhcmF0b3JzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzU2F0aXNmaWFibGUocmFuZ2VDb21wYXJhdG9ycywgb3B0aW9ucykgJiZcbiAgICAgICAgICAgIHRoaXNDb21wYXJhdG9ycy5ldmVyeSgodGhpc0NvbXBhcmF0b3IpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlQ29tcGFyYXRvcnMuZXZlcnkoKHJhbmdlQ29tcGFyYXRvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQ29tcGFyYXRvci5pbnRlcnNlY3RzKHJhbmdlQ29tcGFyYXRvciwgb3B0aW9ucylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICAvLyBpZiBBTlkgb2YgdGhlIHNldHMgbWF0Y2ggQUxMIG9mIGl0cyBjb21wYXJhdG9ycywgdGhlbiBwYXNzXG4gIHRlc3QgKHZlcnNpb24pIHtcbiAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIHRoaXMub3B0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0ZXN0U2V0KHRoaXMuc2V0W2ldLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlXG5cbmNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpXG5jb25zdCBjYWNoZSA9IG5ldyBMUlUoeyBtYXg6IDEwMDAgfSlcblxuY29uc3QgcGFyc2VPcHRpb25zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcGFyc2Utb3B0aW9ucycpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi9jb21wYXJhdG9yJylcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvZGVidWcnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi9zZW12ZXInKVxuY29uc3Qge1xuICByZSxcbiAgdCxcbiAgY29tcGFyYXRvclRyaW1SZXBsYWNlLFxuICB0aWxkZVRyaW1SZXBsYWNlLFxuICBjYXJldFRyaW1SZXBsYWNlLFxufSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcblxuY29uc3QgaXNOdWxsU2V0ID0gYyA9PiBjLnZhbHVlID09PSAnPDAuMC4wLTAnXG5jb25zdCBpc0FueSA9IGMgPT4gYy52YWx1ZSA9PT0gJydcblxuLy8gdGFrZSBhIHNldCBvZiBjb21wYXJhdG9ycyBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlcmVcbi8vIGV4aXN0cyBhIHZlcnNpb24gd2hpY2ggY2FuIHNhdGlzZnkgaXRcbmNvbnN0IGlzU2F0aXNmaWFibGUgPSAoY29tcGFyYXRvcnMsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdCA9IHRydWVcbiAgY29uc3QgcmVtYWluaW5nQ29tcGFyYXRvcnMgPSBjb21wYXJhdG9ycy5zbGljZSgpXG4gIGxldCB0ZXN0Q29tcGFyYXRvciA9IHJlbWFpbmluZ0NvbXBhcmF0b3JzLnBvcCgpXG5cbiAgd2hpbGUgKHJlc3VsdCAmJiByZW1haW5pbmdDb21wYXJhdG9ycy5sZW5ndGgpIHtcbiAgICByZXN1bHQgPSByZW1haW5pbmdDb21wYXJhdG9ycy5ldmVyeSgob3RoZXJDb21wYXJhdG9yKSA9PiB7XG4gICAgICByZXR1cm4gdGVzdENvbXBhcmF0b3IuaW50ZXJzZWN0cyhvdGhlckNvbXBhcmF0b3IsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIHRlc3RDb21wYXJhdG9yID0gcmVtYWluaW5nQ29tcGFyYXRvcnMucG9wKClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLy8gY29tcHJpc2VkIG9mIHhyYW5nZXMsIHRpbGRlcywgc3RhcnMsIGFuZCBndGx0J3MgYXQgdGhpcyBwb2ludC5cbi8vIGFscmVhZHkgcmVwbGFjZWQgdGhlIGh5cGhlbiByYW5nZXNcbi8vIHR1cm4gaW50byBhIHNldCBvZiBKVVNUIGNvbXBhcmF0b3JzLlxuY29uc3QgcGFyc2VDb21wYXJhdG9yID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgZGVidWcoJ2NvbXAnLCBjb21wLCBvcHRpb25zKVxuICBjb21wID0gcmVwbGFjZUNhcmV0cyhjb21wLCBvcHRpb25zKVxuICBkZWJ1ZygnY2FyZXQnLCBjb21wKVxuICBjb21wID0gcmVwbGFjZVRpbGRlcyhjb21wLCBvcHRpb25zKVxuICBkZWJ1ZygndGlsZGVzJywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VYUmFuZ2VzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCd4cmFuZ2UnLCBjb21wKVxuICBjb21wID0gcmVwbGFjZVN0YXJzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCdzdGFycycsIGNvbXApXG4gIHJldHVybiBjb21wXG59XG5cbmNvbnN0IGlzWCA9IGlkID0+ICFpZCB8fCBpZC50b0xvd2VyQ2FzZSgpID09PSAneCcgfHwgaWQgPT09ICcqJ1xuXG4vLyB+LCB+PiAtLT4gKiAoYW55LCBraW5kYSBzaWxseSlcbi8vIH4yLCB+Mi54LCB+Mi54LngsIH4+Miwgfj4yLnggfj4yLngueCAtLT4gPj0yLjAuMCA8My4wLjAtMFxuLy8gfjIuMCwgfjIuMC54LCB+PjIuMCwgfj4yLjAueCAtLT4gPj0yLjAuMCA8Mi4xLjAtMFxuLy8gfjEuMiwgfjEuMi54LCB+PjEuMiwgfj4xLjIueCAtLT4gPj0xLjIuMCA8MS4zLjAtMFxuLy8gfjEuMi4zLCB+PjEuMi4zIC0tPiA+PTEuMi4zIDwxLjMuMC0wXG4vLyB+MS4yLjAsIH4+MS4yLjAgLS0+ID49MS4yLjAgPDEuMy4wLTBcbi8vIH4wLjAuMSAtLT4gPj0wLjAuMSA8MC4xLjAtMFxuY29uc3QgcmVwbGFjZVRpbGRlcyA9IChjb21wLCBvcHRpb25zKSA9PlxuICBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgoYykgPT4ge1xuICAgIHJldHVybiByZXBsYWNlVGlsZGUoYywgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG5cbmNvbnN0IHJlcGxhY2VUaWxkZSA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5USUxERUxPT1NFXSA6IHJlW3QuVElMREVdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgKF8sIE0sIG0sIHAsIHByKSA9PiB7XG4gICAgZGVidWcoJ3RpbGRlJywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgbGV0IHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gYD49JHtNfS4wLjAgPCR7K00gKyAxfS4wLjAtMGBcbiAgICB9IGVsc2UgaWYgKGlzWChwKSkge1xuICAgICAgLy8gfjEuMiA9PSA+PTEuMi4wIDwxLjMuMC0wXG4gICAgICByZXQgPSBgPj0ke019LiR7bX0uMCA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgIH0gZWxzZSBpZiAocHIpIHtcbiAgICAgIGRlYnVnKCdyZXBsYWNlVGlsZGUgcHInLCBwcilcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3B9LSR7cHJcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gfjEuMi4zID09ID49MS4yLjMgPDEuMy4wLTBcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICB9XG5cbiAgICBkZWJ1ZygndGlsZGUgcmV0dXJuJywgcmV0KVxuICAgIHJldHVybiByZXRcbiAgfSlcbn1cblxuLy8gXiAtLT4gKiAoYW55LCBraW5kYSBzaWxseSlcbi8vIF4yLCBeMi54LCBeMi54LnggLS0+ID49Mi4wLjAgPDMuMC4wLTBcbi8vIF4yLjAsIF4yLjAueCAtLT4gPj0yLjAuMCA8My4wLjAtMFxuLy8gXjEuMiwgXjEuMi54IC0tPiA+PTEuMi4wIDwyLjAuMC0wXG4vLyBeMS4yLjMgLS0+ID49MS4yLjMgPDIuMC4wLTBcbi8vIF4xLjIuMCAtLT4gPj0xLjIuMCA8Mi4wLjAtMFxuLy8gXjAuMC4xIC0tPiA+PTAuMC4xIDwwLjAuMi0wXG4vLyBeMC4xLjAgLS0+ID49MC4xLjAgPDAuMi4wLTBcbmNvbnN0IHJlcGxhY2VDYXJldHMgPSAoY29tcCwgb3B0aW9ucykgPT5cbiAgY29tcC50cmltKCkuc3BsaXQoL1xccysvKS5tYXAoKGMpID0+IHtcbiAgICByZXR1cm4gcmVwbGFjZUNhcmV0KGMsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxuXG5jb25zdCByZXBsYWNlQ2FyZXQgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygnY2FyZXQnLCBjb21wLCBvcHRpb25zKVxuICBjb25zdCByID0gb3B0aW9ucy5sb29zZSA/IHJlW3QuQ0FSRVRMT09TRV0gOiByZVt0LkNBUkVUXVxuICBjb25zdCB6ID0gb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/ICctMCcgOiAnJ1xuICByZXR1cm4gY29tcC5yZXBsYWNlKHIsIChfLCBNLCBtLCBwLCBwcikgPT4ge1xuICAgIGRlYnVnKCdjYXJldCcsIGNvbXAsIF8sIE0sIG0sIHAsIHByKVxuICAgIGxldCByZXRcblxuICAgIGlmIChpc1goTSkpIHtcbiAgICAgIHJldCA9ICcnXG4gICAgfSBlbHNlIGlmIChpc1gobSkpIHtcbiAgICAgIHJldCA9IGA+PSR7TX0uMC4wJHt6fSA8JHsrTSArIDF9LjAuMC0wYFxuICAgIH0gZWxzZSBpZiAoaXNYKHApKSB7XG4gICAgICBpZiAoTSA9PT0gJzAnKSB7XG4gICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4wJHt6fSA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAke3p9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcikge1xuICAgICAgZGVidWcoJ3JlcGxhY2VDYXJldCBwcicsIHByKVxuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICBpZiAobSA9PT0gJzAnKSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cH0tJHtwclxuICAgICAgICAgIH0gPCR7TX0uJHttfS4keytwICsgMX0tMGBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICAgICAgfSA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICAgIH0gPCR7K00gKyAxfS4wLjAtMGBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ25vIHByJylcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgaWYgKG0gPT09ICcwJykge1xuICAgICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgICAgICB9JHt6fSA8JHtNfS4ke219LiR7K3AgKyAxfS0wYFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgICAgICB9JHt6fSA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwXG4gICAgICAgIH0gPCR7K00gKyAxfS4wLjAtMGBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWJ1ZygnY2FyZXQgcmV0dXJuJywgcmV0KVxuICAgIHJldHVybiByZXRcbiAgfSlcbn1cblxuY29uc3QgcmVwbGFjZVhSYW5nZXMgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygncmVwbGFjZVhSYW5nZXMnLCBjb21wLCBvcHRpb25zKVxuICByZXR1cm4gY29tcC5zcGxpdCgvXFxzKy8pLm1hcCgoYykgPT4ge1xuICAgIHJldHVybiByZXBsYWNlWFJhbmdlKGMsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxufVxuXG5jb25zdCByZXBsYWNlWFJhbmdlID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgY29tcCA9IGNvbXAudHJpbSgpXG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5YUkFOR0VMT09TRV0gOiByZVt0LlhSQU5HRV1cbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCAocmV0LCBndGx0LCBNLCBtLCBwLCBwcikgPT4ge1xuICAgIGRlYnVnKCd4UmFuZ2UnLCBjb21wLCByZXQsIGd0bHQsIE0sIG0sIHAsIHByKVxuICAgIGNvbnN0IHhNID0gaXNYKE0pXG4gICAgY29uc3QgeG0gPSB4TSB8fCBpc1gobSlcbiAgICBjb25zdCB4cCA9IHhtIHx8IGlzWChwKVxuICAgIGNvbnN0IGFueVggPSB4cFxuXG4gICAgaWYgKGd0bHQgPT09ICc9JyAmJiBhbnlYKSB7XG4gICAgICBndGx0ID0gJydcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSdyZSBpbmNsdWRpbmcgcHJlcmVsZWFzZXMgaW4gdGhlIG1hdGNoLCB0aGVuIHdlIG5lZWRcbiAgICAvLyB0byBmaXggdGhpcyB0byAtMCwgdGhlIGxvd2VzdCBwb3NzaWJsZSBwcmVyZWxlYXNlIHZhbHVlXG4gICAgcHIgPSBvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlID8gJy0wJyA6ICcnXG5cbiAgICBpZiAoeE0pIHtcbiAgICAgIGlmIChndGx0ID09PSAnPicgfHwgZ3RsdCA9PT0gJzwnKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgaXMgYWxsb3dlZFxuICAgICAgICByZXQgPSAnPDAuMC4wLTAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub3RoaW5nIGlzIGZvcmJpZGRlblxuICAgICAgICByZXQgPSAnKidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGd0bHQgJiYgYW55WCkge1xuICAgICAgLy8gd2Uga25vdyBwYXRjaCBpcyBhbiB4LCBiZWNhdXNlIHdlIGhhdmUgYW55IHggYXQgYWxsLlxuICAgICAgLy8gcmVwbGFjZSBYIHdpdGggMFxuICAgICAgaWYgKHhtKSB7XG4gICAgICAgIG0gPSAwXG4gICAgICB9XG4gICAgICBwID0gMFxuXG4gICAgICBpZiAoZ3RsdCA9PT0gJz4nKSB7XG4gICAgICAgIC8vID4xID0+ID49Mi4wLjBcbiAgICAgICAgLy8gPjEuMiA9PiA+PTEuMy4wXG4gICAgICAgIGd0bHQgPSAnPj0nXG4gICAgICAgIGlmICh4bSkge1xuICAgICAgICAgIE0gPSArTSArIDFcbiAgICAgICAgICBtID0gMFxuICAgICAgICAgIHAgPSAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbSA9ICttICsgMVxuICAgICAgICAgIHAgPSAwXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ3RsdCA9PT0gJzw9Jykge1xuICAgICAgICAvLyA8PTAuNy54IGlzIGFjdHVhbGx5IDwwLjguMCwgc2luY2UgYW55IDAuNy54IHNob3VsZFxuICAgICAgICAvLyBwYXNzLiAgU2ltaWxhcmx5LCA8PTcueCBpcyBhY3R1YWxseSA8OC4wLjAsIGV0Yy5cbiAgICAgICAgZ3RsdCA9ICc8J1xuICAgICAgICBpZiAoeG0pIHtcbiAgICAgICAgICBNID0gK00gKyAxXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbSA9ICttICsgMVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChndGx0ID09PSAnPCcpIHtcbiAgICAgICAgcHIgPSAnLTAnXG4gICAgICB9XG5cbiAgICAgIHJldCA9IGAke2d0bHQgKyBNfS4ke219LiR7cH0ke3ByfWBcbiAgICB9IGVsc2UgaWYgKHhtKSB7XG4gICAgICByZXQgPSBgPj0ke019LjAuMCR7cHJ9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgfSBlbHNlIGlmICh4cCkge1xuICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAke3ByXG4gICAgICB9IDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgfVxuXG4gICAgZGVidWcoJ3hSYW5nZSByZXR1cm4nLCByZXQpXG5cbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbi8vIEJlY2F1c2UgKiBpcyBBTkQtZWQgd2l0aCBldmVyeXRoaW5nIGVsc2UgaW4gdGhlIGNvbXBhcmF0b3IsXG4vLyBhbmQgJycgbWVhbnMgXCJhbnkgdmVyc2lvblwiLCBqdXN0IHJlbW92ZSB0aGUgKnMgZW50aXJlbHkuXG5jb25zdCByZXBsYWNlU3RhcnMgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygncmVwbGFjZVN0YXJzJywgY29tcCwgb3B0aW9ucylcbiAgLy8gTG9vc2VuZXNzIGlzIGlnbm9yZWQgaGVyZS4gIHN0YXIgaXMgYWx3YXlzIGFzIGxvb3NlIGFzIGl0IGdldHMhXG4gIHJldHVybiBjb21wLnRyaW0oKS5yZXBsYWNlKHJlW3QuU1RBUl0sICcnKVxufVxuXG5jb25zdCByZXBsYWNlR1RFMCA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdyZXBsYWNlR1RFMCcsIGNvbXAsIG9wdGlvbnMpXG4gIHJldHVybiBjb21wLnRyaW0oKVxuICAgIC5yZXBsYWNlKHJlW29wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgPyB0LkdURTBQUkUgOiB0LkdURTBdLCAnJylcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBwYXNzZWQgdG8gc3RyaW5nLnJlcGxhY2UocmVbdC5IWVBIRU5SQU5HRV0pXG4vLyBNLCBtLCBwYXRjaCwgcHJlcmVsZWFzZSwgYnVpbGRcbi8vIDEuMiAtIDMuNC41ID0+ID49MS4yLjAgPD0zLjQuNVxuLy8gMS4yLjMgLSAzLjQgPT4gPj0xLjIuMCA8My41LjAtMCBBbnkgMy40Lnggd2lsbCBkb1xuLy8gMS4yIC0gMy40ID0+ID49MS4yLjAgPDMuNS4wLTBcbmNvbnN0IGh5cGhlblJlcGxhY2UgPSBpbmNQciA9PiAoJDAsXG4gIGZyb20sIGZNLCBmbSwgZnAsIGZwciwgZmIsXG4gIHRvLCB0TSwgdG0sIHRwLCB0cHIsIHRiKSA9PiB7XG4gIGlmIChpc1goZk0pKSB7XG4gICAgZnJvbSA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKGZtKSkge1xuICAgIGZyb20gPSBgPj0ke2ZNfS4wLjAke2luY1ByID8gJy0wJyA6ICcnfWBcbiAgfSBlbHNlIGlmIChpc1goZnApKSB7XG4gICAgZnJvbSA9IGA+PSR7Zk19LiR7Zm19LjAke2luY1ByID8gJy0wJyA6ICcnfWBcbiAgfSBlbHNlIGlmIChmcHIpIHtcbiAgICBmcm9tID0gYD49JHtmcm9tfWBcbiAgfSBlbHNlIHtcbiAgICBmcm9tID0gYD49JHtmcm9tfSR7aW5jUHIgPyAnLTAnIDogJyd9YFxuICB9XG5cbiAgaWYgKGlzWCh0TSkpIHtcbiAgICB0byA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKHRtKSkge1xuICAgIHRvID0gYDwkeyt0TSArIDF9LjAuMC0wYFxuICB9IGVsc2UgaWYgKGlzWCh0cCkpIHtcbiAgICB0byA9IGA8JHt0TX0uJHsrdG0gKyAxfS4wLTBgXG4gIH0gZWxzZSBpZiAodHByKSB7XG4gICAgdG8gPSBgPD0ke3RNfS4ke3RtfS4ke3RwfS0ke3Rwcn1gXG4gIH0gZWxzZSBpZiAoaW5jUHIpIHtcbiAgICB0byA9IGA8JHt0TX0uJHt0bX0uJHsrdHAgKyAxfS0wYFxuICB9IGVsc2Uge1xuICAgIHRvID0gYDw9JHt0b31gXG4gIH1cblxuICByZXR1cm4gKGAke2Zyb219ICR7dG99YCkudHJpbSgpXG59XG5cbmNvbnN0IHRlc3RTZXQgPSAoc2V0LCB2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFzZXRbaV0udGVzdCh2ZXJzaW9uKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaWYgKHZlcnNpb24ucHJlcmVsZWFzZS5sZW5ndGggJiYgIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAvLyBGaW5kIHRoZSBzZXQgb2YgdmVyc2lvbnMgdGhhdCBhcmUgYWxsb3dlZCB0byBoYXZlIHByZXJlbGVhc2VzXG4gICAgLy8gRm9yIGV4YW1wbGUsIF4xLjIuMy1wci4xIGRlc3VnYXJzIHRvID49MS4yLjMtcHIuMSA8Mi4wLjBcbiAgICAvLyBUaGF0IHNob3VsZCBhbGxvdyBgMS4yLjMtcHIuMmAgdG8gcGFzcy5cbiAgICAvLyBIb3dldmVyLCBgMS4yLjQtYWxwaGEubm90cmVhZHlgIHNob3VsZCBOT1QgYmUgYWxsb3dlZCxcbiAgICAvLyBldmVuIHRob3VnaCBpdCdzIHdpdGhpbiB0aGUgcmFuZ2Ugc2V0IGJ5IHRoZSBjb21wYXJhdG9ycy5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgICAgZGVidWcoc2V0W2ldLnNlbXZlcilcbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyID09PSBDb21wYXJhdG9yLkFOWSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoc2V0W2ldLnNlbXZlci5wcmVyZWxlYXNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgYWxsb3dlZCA9IHNldFtpXS5zZW12ZXJcbiAgICAgICAgaWYgKGFsbG93ZWQubWFqb3IgPT09IHZlcnNpb24ubWFqb3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQubWlub3IgPT09IHZlcnNpb24ubWlub3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQucGF0Y2ggPT09IHZlcnNpb24ucGF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmVyc2lvbiBoYXMgYSAtcHJlLCBidXQgaXQncyBub3Qgb25lIG9mIHRoZSBvbmVzIHdlIGxpa2UuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuIiwiY29uc3QgQU5ZID0gU3ltYm9sKCdTZW1WZXIgQU5ZJylcbi8vIGhvaXN0ZWQgY2xhc3MgZm9yIGN5Y2xpYyBkZXBlbmRlbmN5XG5jbGFzcyBDb21wYXJhdG9yIHtcbiAgc3RhdGljIGdldCBBTlkgKCkge1xuICAgIHJldHVybiBBTllcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChjb21wLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gICAgaWYgKGNvbXAgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSB7XG4gICAgICBpZiAoY29tcC5sb29zZSA9PT0gISFvcHRpb25zLmxvb3NlKSB7XG4gICAgICAgIHJldHVybiBjb21wXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wID0gY29tcC52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGRlYnVnKCdjb21wYXJhdG9yJywgY29tcCwgb3B0aW9ucylcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICAgIHRoaXMucGFyc2UoY29tcClcblxuICAgIGlmICh0aGlzLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICB0aGlzLnZhbHVlID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub3BlcmF0b3IgKyB0aGlzLnNlbXZlci52ZXJzaW9uXG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbXAnLCB0aGlzKVxuICB9XG5cbiAgcGFyc2UgKGNvbXApIHtcbiAgICBjb25zdCByID0gdGhpcy5vcHRpb25zLmxvb3NlID8gcmVbdC5DT01QQVJBVE9STE9PU0VdIDogcmVbdC5DT01QQVJBVE9SXVxuICAgIGNvbnN0IG0gPSBjb21wLm1hdGNoKHIpXG5cbiAgICBpZiAoIW0pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgY29tcGFyYXRvcjogJHtjb21wfWApXG4gICAgfVxuXG4gICAgdGhpcy5vcGVyYXRvciA9IG1bMV0gIT09IHVuZGVmaW5lZCA/IG1bMV0gOiAnJ1xuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnPScpIHtcbiAgICAgIHRoaXMub3BlcmF0b3IgPSAnJ1xuICAgIH1cblxuICAgIC8vIGlmIGl0IGxpdGVyYWxseSBpcyBqdXN0ICc+JyBvciAnJyB0aGVuIGFsbG93IGFueXRoaW5nLlxuICAgIGlmICghbVsyXSkge1xuICAgICAgdGhpcy5zZW12ZXIgPSBBTllcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW12ZXIgPSBuZXcgU2VtVmVyKG1bMl0sIHRoaXMub3B0aW9ucy5sb29zZSlcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgfVxuXG4gIHRlc3QgKHZlcnNpb24pIHtcbiAgICBkZWJ1ZygnQ29tcGFyYXRvci50ZXN0JywgdmVyc2lvbiwgdGhpcy5vcHRpb25zLmxvb3NlKVxuXG4gICAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkgfHwgdmVyc2lvbiA9PT0gQU5ZKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIHRoaXMub3B0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbXAodmVyc2lvbiwgdGhpcy5vcGVyYXRvciwgdGhpcy5zZW12ZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIGludGVyc2VjdHMgKGNvbXAsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShjb21wIGluc3RhbmNlb2YgQ29tcGFyYXRvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2EgQ29tcGFyYXRvciBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbG9vc2U6ICEhb3B0aW9ucyxcbiAgICAgICAgaW5jbHVkZVByZXJlbGVhc2U6IGZhbHNlLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnJykge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKGNvbXAudmFsdWUsIG9wdGlvbnMpLnRlc3QodGhpcy52YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGNvbXAub3BlcmF0b3IgPT09ICcnKSB7XG4gICAgICBpZiAoY29tcC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy52YWx1ZSwgb3B0aW9ucykudGVzdChjb21wLnNlbXZlcilcbiAgICB9XG5cbiAgICBjb25zdCBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyA9XG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG4gICAgY29uc3Qgc2FtZURpcmVjdGlvbkRlY3JlYXNpbmcgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc8PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzwnKVxuICAgIGNvbnN0IHNhbWVTZW1WZXIgPSB0aGlzLnNlbXZlci52ZXJzaW9uID09PSBjb21wLnNlbXZlci52ZXJzaW9uXG4gICAgY29uc3QgZGlmZmVyZW50RGlyZWN0aW9uc0luY2x1c2l2ZSA9XG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPD0nKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc+PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzw9JylcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiA9XG4gICAgICBjbXAodGhpcy5zZW12ZXIsICc8JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbnNHcmVhdGVyVGhhbiA9XG4gICAgICBjbXAodGhpcy5zZW12ZXIsICc+JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJzw9JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPCcpICYmXG4gICAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc+JylcblxuICAgIHJldHVybiAoXG4gICAgICBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyB8fFxuICAgICAgc2FtZURpcmVjdGlvbkRlY3JlYXNpbmcgfHxcbiAgICAgIChzYW1lU2VtVmVyICYmIGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUpIHx8XG4gICAgICBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiB8fFxuICAgICAgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW5cbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wYXJhdG9yXG5cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3BhcnNlLW9wdGlvbnMnKVxuY29uc3QgeyByZSwgdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuY29uc3QgY21wID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NtcCcpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2RlYnVnJylcbmNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4vc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi9yYW5nZScpXG4iLCJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHJhbmdlLnRlc3QodmVyc2lvbilcbn1cbm1vZHVsZS5leHBvcnRzID0gc2F0aXNmaWVzXG4iLCJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuXG4vLyBNb3N0bHkganVzdCBmb3IgdGVzdGluZyBhbmQgbGVnYWN5IEFQSSByZWFzb25zXG5jb25zdCB0b0NvbXBhcmF0b3JzID0gKHJhbmdlLCBvcHRpb25zKSA9PlxuICBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnNldFxuICAgIC5tYXAoY29tcCA9PiBjb21wLm1hcChjID0+IGMudmFsdWUpLmpvaW4oJyAnKS50cmltKCkuc3BsaXQoJyAnKSlcblxubW9kdWxlLmV4cG9ydHMgPSB0b0NvbXBhcmF0b3JzXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuXG5jb25zdCBtYXhTYXRpc2Z5aW5nID0gKHZlcnNpb25zLCByYW5nZSwgb3B0aW9ucykgPT4ge1xuICBsZXQgbWF4ID0gbnVsbFxuICBsZXQgbWF4U1YgPSBudWxsXG4gIGxldCByYW5nZU9iaiA9IG51bGxcbiAgdHJ5IHtcbiAgICByYW5nZU9iaiA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHZlcnNpb25zLmZvckVhY2goKHYpID0+IHtcbiAgICBpZiAocmFuZ2VPYmoudGVzdCh2KSkge1xuICAgICAgLy8gc2F0aXNmaWVzKHYsIHJhbmdlLCBvcHRpb25zKVxuICAgICAgaWYgKCFtYXggfHwgbWF4U1YuY29tcGFyZSh2KSA9PT0gLTEpIHtcbiAgICAgICAgLy8gY29tcGFyZShtYXgsIHYsIHRydWUpXG4gICAgICAgIG1heCA9IHZcbiAgICAgICAgbWF4U1YgPSBuZXcgU2VtVmVyKG1heCwgb3B0aW9ucylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBtYXhcbn1cbm1vZHVsZS5leHBvcnRzID0gbWF4U2F0aXNmeWluZ1xuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IG1pblNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtaW4gPSBudWxsXG4gIGxldCBtaW5TViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1pbiB8fCBtaW5TVi5jb21wYXJlKHYpID09PSAxKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWluLCB2LCB0cnVlKVxuICAgICAgICBtaW4gPSB2XG4gICAgICAgIG1pblNWID0gbmV3IFNlbVZlcihtaW4sIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWluXG59XG5tb2R1bGUuZXhwb3J0cyA9IG1pblNhdGlzZnlpbmdcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndCcpXG5cbmNvbnN0IG1pblZlcnNpb24gPSAocmFuZ2UsIGxvb3NlKSA9PiB7XG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBsb29zZSlcblxuICBsZXQgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAtMCcpXG4gIGlmIChyYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICBtaW52ZXIgPSBudWxsXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGxldCBzZXRNaW4gPSBudWxsXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaCgoY29tcGFyYXRvcikgPT4ge1xuICAgICAgLy8gQ2xvbmUgdG8gYXZvaWQgbWFuaXB1bGF0aW5nIHRoZSBjb21wYXJhdG9yJ3Mgc2VtdmVyIG9iamVjdC5cbiAgICAgIGNvbnN0IGNvbXB2ZXIgPSBuZXcgU2VtVmVyKGNvbXBhcmF0b3Iuc2VtdmVyLnZlcnNpb24pXG4gICAgICBzd2l0Y2ggKGNvbXBhcmF0b3Iub3BlcmF0b3IpIHtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgaWYgKGNvbXB2ZXIucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucGF0Y2grK1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdmVyLnByZXJlbGVhc2UucHVzaCgwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb21wdmVyLnJhdyA9IGNvbXB2ZXIuZm9ybWF0KClcbiAgICAgICAgICAvKiBmYWxsdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgaWYgKCFzZXRNaW4gfHwgZ3QoY29tcHZlciwgc2V0TWluKSkge1xuICAgICAgICAgICAgc2V0TWluID0gY29tcHZlclxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgIC8qIElnbm9yZSBtYXhpbXVtIHZlcnNpb25zICovXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgb3BlcmF0aW9uOiAke2NvbXBhcmF0b3Iub3BlcmF0b3J9YClcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmIChzZXRNaW4gJiYgKCFtaW52ZXIgfHwgZ3QobWludmVyLCBzZXRNaW4pKSkge1xuICAgICAgbWludmVyID0gc2V0TWluXG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbnZlciAmJiByYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBtaW5WZXJzaW9uXG4iLCJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgdmFsaWRSYW5nZSA9IChyYW5nZSwgb3B0aW9ucykgPT4ge1xuICB0cnkge1xuICAgIC8vIFJldHVybiAnKicgaW5zdGVhZCBvZiAnJyBzbyB0aGF0IHRydXRoaW5lc3Mgd29ya3MuXG4gICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIGl0J3MgaW52YWxpZCBhbnl3YXlcbiAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKS5yYW5nZSB8fCAnKidcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkUmFuZ2VcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuLi9jbGFzc2VzL2NvbXBhcmF0b3InKVxuY29uc3QgeyBBTlkgfSA9IENvbXBhcmF0b3JcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvc2F0aXNmaWVzJylcbmNvbnN0IGd0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2d0JylcbmNvbnN0IGx0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2x0JylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9sdGUnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2d0ZScpXG5cbmNvbnN0IG91dHNpZGUgPSAodmVyc2lvbiwgcmFuZ2UsIGhpbG8sIG9wdGlvbnMpID0+IHtcbiAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucylcbiAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG5cbiAgbGV0IGd0Zm4sIGx0ZWZuLCBsdGZuLCBjb21wLCBlY29tcFxuICBzd2l0Y2ggKGhpbG8pIHtcbiAgICBjYXNlICc+JzpcbiAgICAgIGd0Zm4gPSBndFxuICAgICAgbHRlZm4gPSBsdGVcbiAgICAgIGx0Zm4gPSBsdFxuICAgICAgY29tcCA9ICc+J1xuICAgICAgZWNvbXAgPSAnPj0nXG4gICAgICBicmVha1xuICAgIGNhc2UgJzwnOlxuICAgICAgZ3RmbiA9IGx0XG4gICAgICBsdGVmbiA9IGd0ZVxuICAgICAgbHRmbiA9IGd0XG4gICAgICBjb21wID0gJzwnXG4gICAgICBlY29tcCA9ICc8PSdcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ011c3QgcHJvdmlkZSBhIGhpbG8gdmFsIG9mIFwiPFwiIG9yIFwiPlwiJylcbiAgfVxuXG4gIC8vIElmIGl0IHNhdGlzZmllcyB0aGUgcmFuZ2UgaXQgaXMgbm90IG91dHNpZGVcbiAgaWYgKHNhdGlzZmllcyh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIEZyb20gbm93IG9uLCB2YXJpYWJsZSB0ZXJtcyBhcmUgYXMgaWYgd2UncmUgaW4gXCJndHJcIiBtb2RlLlxuICAvLyBidXQgbm90ZSB0aGF0IGV2ZXJ5dGhpbmcgaXMgZmxpcHBlZCBmb3IgdGhlIFwibHRyXCIgZnVuY3Rpb24uXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5zZXQubGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBjb21wYXJhdG9ycyA9IHJhbmdlLnNldFtpXVxuXG4gICAgbGV0IGhpZ2ggPSBudWxsXG4gICAgbGV0IGxvdyA9IG51bGxcblxuICAgIGNvbXBhcmF0b3JzLmZvckVhY2goKGNvbXBhcmF0b3IpID0+IHtcbiAgICAgIGlmIChjb21wYXJhdG9yLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSBuZXcgQ29tcGFyYXRvcignPj0wLjAuMCcpXG4gICAgICB9XG4gICAgICBoaWdoID0gaGlnaCB8fCBjb21wYXJhdG9yXG4gICAgICBsb3cgPSBsb3cgfHwgY29tcGFyYXRvclxuICAgICAgaWYgKGd0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGhpZ2guc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBoaWdoID0gY29tcGFyYXRvclxuICAgICAgfSBlbHNlIGlmIChsdGZuKGNvbXBhcmF0b3Iuc2VtdmVyLCBsb3cuc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBsb3cgPSBjb21wYXJhdG9yXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIElmIHRoZSBlZGdlIHZlcnNpb24gY29tcGFyYXRvciBoYXMgYSBvcGVyYXRvciB0aGVuIG91ciB2ZXJzaW9uXG4gICAgLy8gaXNuJ3Qgb3V0c2lkZSBpdFxuICAgIGlmIChoaWdoLm9wZXJhdG9yID09PSBjb21wIHx8IGhpZ2gub3BlcmF0b3IgPT09IGVjb21wKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbG93ZXN0IHZlcnNpb24gY29tcGFyYXRvciBoYXMgYW4gb3BlcmF0b3IgYW5kIG91ciB2ZXJzaW9uXG4gICAgLy8gaXMgbGVzcyB0aGFuIGl0IHRoZW4gaXQgaXNuJ3QgaGlnaGVyIHRoYW4gdGhlIHJhbmdlXG4gICAgaWYgKCghbG93Lm9wZXJhdG9yIHx8IGxvdy5vcGVyYXRvciA9PT0gY29tcCkgJiZcbiAgICAgICAgbHRlZm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAobG93Lm9wZXJhdG9yID09PSBlY29tcCAmJiBsdGZuKHZlcnNpb24sIGxvdy5zZW12ZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdXRzaWRlXG4iLCIvLyBEZXRlcm1pbmUgaWYgdmVyc2lvbiBpcyBncmVhdGVyIHRoYW4gYWxsIHRoZSB2ZXJzaW9ucyBwb3NzaWJsZSBpbiB0aGUgcmFuZ2UuXG5jb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9vdXRzaWRlJylcbmNvbnN0IGd0ciA9ICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykgPT4gb3V0c2lkZSh2ZXJzaW9uLCByYW5nZSwgJz4nLCBvcHRpb25zKVxubW9kdWxlLmV4cG9ydHMgPSBndHJcbiIsImNvbnN0IG91dHNpZGUgPSByZXF1aXJlKCcuL291dHNpZGUnKVxuLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgbGVzcyB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlXG5jb25zdCBsdHIgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IG91dHNpZGUodmVyc2lvbiwgcmFuZ2UsICc8Jywgb3B0aW9ucylcbm1vZHVsZS5leHBvcnRzID0gbHRyXG4iLCJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgaW50ZXJzZWN0cyA9IChyMSwgcjIsIG9wdGlvbnMpID0+IHtcbiAgcjEgPSBuZXcgUmFuZ2UocjEsIG9wdGlvbnMpXG4gIHIyID0gbmV3IFJhbmdlKHIyLCBvcHRpb25zKVxuICByZXR1cm4gcjEuaW50ZXJzZWN0cyhyMilcbn1cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0c1xuIiwiLy8gZ2l2ZW4gYSBzZXQgb2YgdmVyc2lvbnMgYW5kIGEgcmFuZ2UsIGNyZWF0ZSBhIFwic2ltcGxpZmllZFwiIHJhbmdlXG4vLyB0aGF0IGluY2x1ZGVzIHRoZSBzYW1lIHZlcnNpb25zIHRoYXQgdGhlIG9yaWdpbmFsIHJhbmdlIGRvZXNcbi8vIElmIHRoZSBvcmlnaW5hbCByYW5nZSBpcyBzaG9ydGVyIHRoYW4gdGhlIHNpbXBsaWZpZWQgb25lLCByZXR1cm4gdGhhdC5cbmNvbnN0IHNhdGlzZmllcyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9zYXRpc2ZpZXMuanMnKVxuY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9jb21wYXJlLmpzJylcbm1vZHVsZS5leHBvcnRzID0gKHZlcnNpb25zLCByYW5nZSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBzZXQgPSBbXVxuICBsZXQgZmlyc3QgPSBudWxsXG4gIGxldCBwcmV2ID0gbnVsbFxuICBjb25zdCB2ID0gdmVyc2lvbnMuc29ydCgoYSwgYikgPT4gY29tcGFyZShhLCBiLCBvcHRpb25zKSlcbiAgZm9yIChjb25zdCB2ZXJzaW9uIG9mIHYpIHtcbiAgICBjb25zdCBpbmNsdWRlZCA9IHNhdGlzZmllcyh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucylcbiAgICBpZiAoaW5jbHVkZWQpIHtcbiAgICAgIHByZXYgPSB2ZXJzaW9uXG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIGZpcnN0ID0gdmVyc2lvblxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldikge1xuICAgICAgICBzZXQucHVzaChbZmlyc3QsIHByZXZdKVxuICAgICAgfVxuICAgICAgcHJldiA9IG51bGxcbiAgICAgIGZpcnN0ID0gbnVsbFxuICAgIH1cbiAgfVxuICBpZiAoZmlyc3QpIHtcbiAgICBzZXQucHVzaChbZmlyc3QsIG51bGxdKVxuICB9XG5cbiAgY29uc3QgcmFuZ2VzID0gW11cbiAgZm9yIChjb25zdCBbbWluLCBtYXhdIG9mIHNldCkge1xuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgcmFuZ2VzLnB1c2gobWluKVxuICAgIH0gZWxzZSBpZiAoIW1heCAmJiBtaW4gPT09IHZbMF0pIHtcbiAgICAgIHJhbmdlcy5wdXNoKCcqJylcbiAgICB9IGVsc2UgaWYgKCFtYXgpIHtcbiAgICAgIHJhbmdlcy5wdXNoKGA+PSR7bWlufWApXG4gICAgfSBlbHNlIGlmIChtaW4gPT09IHZbMF0pIHtcbiAgICAgIHJhbmdlcy5wdXNoKGA8PSR7bWF4fWApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlcy5wdXNoKGAke21pbn0gLSAke21heH1gKVxuICAgIH1cbiAgfVxuICBjb25zdCBzaW1wbGlmaWVkID0gcmFuZ2VzLmpvaW4oJyB8fCAnKVxuICBjb25zdCBvcmlnaW5hbCA9IHR5cGVvZiByYW5nZS5yYXcgPT09ICdzdHJpbmcnID8gcmFuZ2UucmF3IDogU3RyaW5nKHJhbmdlKVxuICByZXR1cm4gc2ltcGxpZmllZC5sZW5ndGggPCBvcmlnaW5hbC5sZW5ndGggPyBzaW1wbGlmaWVkIDogcmFuZ2Vcbn1cbiIsImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZS5qcycpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9jb21wYXJhdG9yLmpzJylcbmNvbnN0IHsgQU5ZIH0gPSBDb21wYXJhdG9yXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvc2F0aXNmaWVzLmpzJylcbmNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvY29tcGFyZS5qcycpXG5cbi8vIENvbXBsZXggcmFuZ2UgYHIxIHx8IHIyIHx8IC4uLmAgaXMgYSBzdWJzZXQgb2YgYFIxIHx8IFIyIHx8IC4uLmAgaWZmOlxuLy8gLSBFdmVyeSBzaW1wbGUgcmFuZ2UgYHIxLCByMiwgLi4uYCBpcyBhIG51bGwgc2V0LCBPUlxuLy8gLSBFdmVyeSBzaW1wbGUgcmFuZ2UgYHIxLCByMiwgLi4uYCB3aGljaCBpcyBub3QgYSBudWxsIHNldCBpcyBhIHN1YnNldCBvZlxuLy8gICBzb21lIGBSMSwgUjIsIC4uLmBcbi8vXG4vLyBTaW1wbGUgcmFuZ2UgYGMxIGMyIC4uLmAgaXMgYSBzdWJzZXQgb2Ygc2ltcGxlIHJhbmdlIGBDMSBDMiAuLi5gIGlmZjpcbi8vIC0gSWYgYyBpcyBvbmx5IHRoZSBBTlkgY29tcGFyYXRvclxuLy8gICAtIElmIEMgaXMgb25seSB0aGUgQU5ZIGNvbXBhcmF0b3IsIHJldHVybiB0cnVlXG4vLyAgIC0gRWxzZSBpZiBpbiBwcmVyZWxlYXNlIG1vZGUsIHJldHVybiBmYWxzZVxuLy8gICAtIGVsc2UgcmVwbGFjZSBjIHdpdGggYFs+PTAuMC4wXWBcbi8vIC0gSWYgQyBpcyBvbmx5IHRoZSBBTlkgY29tcGFyYXRvclxuLy8gICAtIGlmIGluIHByZXJlbGVhc2UgbW9kZSwgcmV0dXJuIHRydWVcbi8vICAgLSBlbHNlIHJlcGxhY2UgQyB3aXRoIGBbPj0wLjAuMF1gXG4vLyAtIExldCBFUSBiZSB0aGUgc2V0IG9mID0gY29tcGFyYXRvcnMgaW4gY1xuLy8gLSBJZiBFUSBpcyBtb3JlIHRoYW4gb25lLCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAtIExldCBHVCBiZSB0aGUgaGlnaGVzdCA+IG9yID49IGNvbXBhcmF0b3IgaW4gY1xuLy8gLSBMZXQgTFQgYmUgdGhlIGxvd2VzdCA8IG9yIDw9IGNvbXBhcmF0b3IgaW4gY1xuLy8gLSBJZiBHVCBhbmQgTFQsIGFuZCBHVC5zZW12ZXIgPiBMVC5zZW12ZXIsIHJldHVybiB0cnVlIChudWxsIHNldClcbi8vIC0gSWYgYW55IEMgaXMgYSA9IHJhbmdlLCBhbmQgR1Qgb3IgTFQgYXJlIHNldCwgcmV0dXJuIGZhbHNlXG4vLyAtIElmIEVRXG4vLyAgIC0gSWYgR1QsIGFuZCBFUSBkb2VzIG5vdCBzYXRpc2Z5IEdULCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAgIC0gSWYgTFQsIGFuZCBFUSBkb2VzIG5vdCBzYXRpc2Z5IExULCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAgIC0gSWYgRVEgc2F0aXNmaWVzIGV2ZXJ5IEMsIHJldHVybiB0cnVlXG4vLyAgIC0gRWxzZSByZXR1cm4gZmFsc2Vcbi8vIC0gSWYgR1Rcbi8vICAgLSBJZiBHVC5zZW12ZXIgaXMgbG93ZXIgdGhhbiBhbnkgPiBvciA+PSBjb21wIGluIEMsIHJldHVybiBmYWxzZVxuLy8gICAtIElmIEdUIGlzID49LCBhbmQgR1Quc2VtdmVyIGRvZXMgbm90IHNhdGlzZnkgZXZlcnkgQywgcmV0dXJuIGZhbHNlXG4vLyAgIC0gSWYgR1Quc2VtdmVyIGhhcyBhIHByZXJlbGVhc2UsIGFuZCBub3QgaW4gcHJlcmVsZWFzZSBtb2RlXG4vLyAgICAgLSBJZiBubyBDIGhhcyBhIHByZXJlbGVhc2UgYW5kIHRoZSBHVC5zZW12ZXIgdHVwbGUsIHJldHVybiBmYWxzZVxuLy8gLSBJZiBMVFxuLy8gICAtIElmIExULnNlbXZlciBpcyBncmVhdGVyIHRoYW4gYW55IDwgb3IgPD0gY29tcCBpbiBDLCByZXR1cm4gZmFsc2Vcbi8vICAgLSBJZiBMVCBpcyA8PSwgYW5kIExULnNlbXZlciBkb2VzIG5vdCBzYXRpc2Z5IGV2ZXJ5IEMsIHJldHVybiBmYWxzZVxuLy8gICAtIElmIEdULnNlbXZlciBoYXMgYSBwcmVyZWxlYXNlLCBhbmQgbm90IGluIHByZXJlbGVhc2UgbW9kZVxuLy8gICAgIC0gSWYgbm8gQyBoYXMgYSBwcmVyZWxlYXNlIGFuZCB0aGUgTFQuc2VtdmVyIHR1cGxlLCByZXR1cm4gZmFsc2Vcbi8vIC0gRWxzZSByZXR1cm4gdHJ1ZVxuXG5jb25zdCBzdWJzZXQgPSAoc3ViLCBkb20sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoc3ViID09PSBkb20pIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3ViID0gbmV3IFJhbmdlKHN1Yiwgb3B0aW9ucylcbiAgZG9tID0gbmV3IFJhbmdlKGRvbSwgb3B0aW9ucylcbiAgbGV0IHNhd05vbk51bGwgPSBmYWxzZVxuXG4gIE9VVEVSOiBmb3IgKGNvbnN0IHNpbXBsZVN1YiBvZiBzdWIuc2V0KSB7XG4gICAgZm9yIChjb25zdCBzaW1wbGVEb20gb2YgZG9tLnNldCkge1xuICAgICAgY29uc3QgaXNTdWIgPSBzaW1wbGVTdWJzZXQoc2ltcGxlU3ViLCBzaW1wbGVEb20sIG9wdGlvbnMpXG4gICAgICBzYXdOb25OdWxsID0gc2F3Tm9uTnVsbCB8fCBpc1N1YiAhPT0gbnVsbFxuICAgICAgaWYgKGlzU3ViKSB7XG4gICAgICAgIGNvbnRpbnVlIE9VVEVSXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHRoZSBudWxsIHNldCBpcyBhIHN1YnNldCBvZiBldmVyeXRoaW5nLCBidXQgbnVsbCBzaW1wbGUgcmFuZ2VzIGluXG4gICAgLy8gYSBjb21wbGV4IHJhbmdlIHNob3VsZCBiZSBpZ25vcmVkLiAgc28gaWYgd2Ugc2F3IGEgbm9uLW51bGwgcmFuZ2UsXG4gICAgLy8gdGhlbiB3ZSBrbm93IHRoaXMgaXNuJ3QgYSBzdWJzZXQsIGJ1dCBpZiBFVkVSWSBzaW1wbGUgcmFuZ2Ugd2FzIG51bGwsXG4gICAgLy8gdGhlbiBpdCBpcyBhIHN1YnNldC5cbiAgICBpZiAoc2F3Tm9uTnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmNvbnN0IHNpbXBsZVN1YnNldCA9IChzdWIsIGRvbSwgb3B0aW9ucykgPT4ge1xuICBpZiAoc3ViID09PSBkb20pIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKHN1Yi5sZW5ndGggPT09IDEgJiYgc3ViWzBdLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPT09IDEgJiYgZG9tWzBdLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgICAgc3ViID0gW25ldyBDb21wYXJhdG9yKCc+PTAuMC4wLTAnKV1cbiAgICB9IGVsc2Uge1xuICAgICAgc3ViID0gW25ldyBDb21wYXJhdG9yKCc+PTAuMC4wJyldXG4gICAgfVxuICB9XG5cbiAgaWYgKGRvbS5sZW5ndGggPT09IDEgJiYgZG9tWzBdLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgaWYgKG9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbSA9IFtuZXcgQ29tcGFyYXRvcignPj0wLjAuMCcpXVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVxU2V0ID0gbmV3IFNldCgpXG4gIGxldCBndCwgbHRcbiAgZm9yIChjb25zdCBjIG9mIHN1Yikge1xuICAgIGlmIChjLm9wZXJhdG9yID09PSAnPicgfHwgYy5vcGVyYXRvciA9PT0gJz49Jykge1xuICAgICAgZ3QgPSBoaWdoZXJHVChndCwgYywgb3B0aW9ucylcbiAgICB9IGVsc2UgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICBsdCA9IGxvd2VyTFQobHQsIGMsIG9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVxU2V0LmFkZChjLnNlbXZlcilcbiAgICB9XG4gIH1cblxuICBpZiAoZXFTZXQuc2l6ZSA+IDEpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgbGV0IGd0bHRDb21wXG4gIGlmIChndCAmJiBsdCkge1xuICAgIGd0bHRDb21wID0gY29tcGFyZShndC5zZW12ZXIsIGx0LnNlbXZlciwgb3B0aW9ucylcbiAgICBpZiAoZ3RsdENvbXAgPiAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0gZWxzZSBpZiAoZ3RsdENvbXAgPT09IDAgJiYgKGd0Lm9wZXJhdG9yICE9PSAnPj0nIHx8IGx0Lm9wZXJhdG9yICE9PSAnPD0nKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICAvLyB3aWxsIGl0ZXJhdGUgb25lIG9yIHplcm8gdGltZXNcbiAgZm9yIChjb25zdCBlcSBvZiBlcVNldCkge1xuICAgIGlmIChndCAmJiAhc2F0aXNmaWVzKGVxLCBTdHJpbmcoZ3QpLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAobHQgJiYgIXNhdGlzZmllcyhlcSwgU3RyaW5nKGx0KSwgb3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjIG9mIGRvbSkge1xuICAgICAgaWYgKCFzYXRpc2ZpZXMoZXEsIFN0cmluZyhjKSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGxldCBoaWdoZXIsIGxvd2VyXG4gIGxldCBoYXNEb21MVCwgaGFzRG9tR1RcbiAgLy8gaWYgdGhlIHN1YnNldCBoYXMgYSBwcmVyZWxlYXNlLCB3ZSBuZWVkIGEgY29tcGFyYXRvciBpbiB0aGUgc3VwZXJzZXRcbiAgLy8gd2l0aCB0aGUgc2FtZSB0dXBsZSBhbmQgYSBwcmVyZWxlYXNlLCBvciBpdCdzIG5vdCBhIHN1YnNldFxuICBsZXQgbmVlZERvbUxUUHJlID0gbHQgJiZcbiAgICAhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSAmJlxuICAgIGx0LnNlbXZlci5wcmVyZWxlYXNlLmxlbmd0aCA/IGx0LnNlbXZlciA6IGZhbHNlXG4gIGxldCBuZWVkRG9tR1RQcmUgPSBndCAmJlxuICAgICFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlICYmXG4gICAgZ3Quc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoID8gZ3Quc2VtdmVyIDogZmFsc2VcbiAgLy8gZXhjZXB0aW9uOiA8MS4yLjMtMCBpcyB0aGUgc2FtZSBhcyA8MS4yLjNcbiAgaWYgKG5lZWREb21MVFByZSAmJiBuZWVkRG9tTFRQcmUucHJlcmVsZWFzZS5sZW5ndGggPT09IDEgJiZcbiAgICAgIGx0Lm9wZXJhdG9yID09PSAnPCcgJiYgbmVlZERvbUxUUHJlLnByZXJlbGVhc2VbMF0gPT09IDApIHtcbiAgICBuZWVkRG9tTFRQcmUgPSBmYWxzZVxuICB9XG5cbiAgZm9yIChjb25zdCBjIG9mIGRvbSkge1xuICAgIGhhc0RvbUdUID0gaGFzRG9tR1QgfHwgYy5vcGVyYXRvciA9PT0gJz4nIHx8IGMub3BlcmF0b3IgPT09ICc+PSdcbiAgICBoYXNEb21MVCA9IGhhc0RvbUxUIHx8IGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nXG4gICAgaWYgKGd0KSB7XG4gICAgICBpZiAobmVlZERvbUdUUHJlKSB7XG4gICAgICAgIGlmIChjLnNlbXZlci5wcmVyZWxlYXNlICYmIGMuc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoICYmXG4gICAgICAgICAgICBjLnNlbXZlci5tYWpvciA9PT0gbmVlZERvbUdUUHJlLm1ham9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5taW5vciA9PT0gbmVlZERvbUdUUHJlLm1pbm9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5wYXRjaCA9PT0gbmVlZERvbUdUUHJlLnBhdGNoKSB7XG4gICAgICAgICAgbmVlZERvbUdUUHJlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc+JyB8fCBjLm9wZXJhdG9yID09PSAnPj0nKSB7XG4gICAgICAgIGhpZ2hlciA9IGhpZ2hlckdUKGd0LCBjLCBvcHRpb25zKVxuICAgICAgICBpZiAoaGlnaGVyID09PSBjICYmIGhpZ2hlciAhPT0gZ3QpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChndC5vcGVyYXRvciA9PT0gJz49JyAmJiAhc2F0aXNmaWVzKGd0LnNlbXZlciwgU3RyaW5nKGMpLCBvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGx0KSB7XG4gICAgICBpZiAobmVlZERvbUxUUHJlKSB7XG4gICAgICAgIGlmIChjLnNlbXZlci5wcmVyZWxlYXNlICYmIGMuc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoICYmXG4gICAgICAgICAgICBjLnNlbXZlci5tYWpvciA9PT0gbmVlZERvbUxUUHJlLm1ham9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5taW5vciA9PT0gbmVlZERvbUxUUHJlLm1pbm9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5wYXRjaCA9PT0gbmVlZERvbUxUUHJlLnBhdGNoKSB7XG4gICAgICAgICAgbmVlZERvbUxUUHJlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICAgIGxvd2VyID0gbG93ZXJMVChsdCwgYywgb3B0aW9ucylcbiAgICAgICAgaWYgKGxvd2VyID09PSBjICYmIGxvd2VyICE9PSBsdCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGx0Lm9wZXJhdG9yID09PSAnPD0nICYmICFzYXRpc2ZpZXMobHQuc2VtdmVyLCBTdHJpbmcoYyksIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWMub3BlcmF0b3IgJiYgKGx0IHx8IGd0KSAmJiBndGx0Q29tcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlcmUgd2FzIGEgPCBvciA+LCBhbmQgbm90aGluZyBpbiB0aGUgZG9tLCB0aGVuIG11c3QgYmUgZmFsc2VcbiAgLy8gVU5MRVNTIGl0IHdhcyBsaW1pdGVkIGJ5IGFub3RoZXIgcmFuZ2UgaW4gdGhlIG90aGVyIGRpcmVjdGlvbi5cbiAgLy8gRWcsID4xLjAuMCA8MS4wLjEgaXMgc3RpbGwgYSBzdWJzZXQgb2YgPDIuMC4wXG4gIGlmIChndCAmJiBoYXNEb21MVCAmJiAhbHQgJiYgZ3RsdENvbXAgIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmIChsdCAmJiBoYXNEb21HVCAmJiAhZ3QgJiYgZ3RsdENvbXAgIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIHdlIG5lZWRlZCBhIHByZXJlbGVhc2UgcmFuZ2UgaW4gYSBzcGVjaWZpYyB0dXBsZSwgYnV0IGRpZG4ndCBnZXQgb25lXG4gIC8vIHRoZW4gdGhpcyBpc24ndCBhIHN1YnNldC4gIGVnID49MS4yLjMtcHJlIGlzIG5vdCBhIHN1YnNldCBvZiA+PTEuMC4wLFxuICAvLyBiZWNhdXNlIGl0IGluY2x1ZGVzIHByZXJlbGVhc2VzIGluIHRoZSAxLjIuMyB0dXBsZVxuICBpZiAobmVlZERvbUdUUHJlIHx8IG5lZWREb21MVFByZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gPj0xLjIuMyBpcyBsb3dlciB0aGFuID4xLjIuM1xuY29uc3QgaGlnaGVyR1QgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWEpIHtcbiAgICByZXR1cm4gYlxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPiAwID8gYVxuICAgIDogY29tcCA8IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPicgJiYgYS5vcGVyYXRvciA9PT0gJz49JyA/IGJcbiAgICA6IGFcbn1cblxuLy8gPD0xLjIuMyBpcyBoaWdoZXIgdGhhbiA8MS4yLjNcbmNvbnN0IGxvd2VyTFQgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWEpIHtcbiAgICByZXR1cm4gYlxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPCAwID8gYVxuICAgIDogY29tcCA+IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPCcgJiYgYS5vcGVyYXRvciA9PT0gJzw9JyA/IGJcbiAgICA6IGFcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdWJzZXRcbiIsIi8vIGp1c3QgcHJlLWxvYWQgYWxsIHRoZSBzdHVmZiB0aGF0IGluZGV4LmpzIGxhemlseSBleHBvcnRzXG5jb25zdCBpbnRlcm5hbFJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9yZScpXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2ludGVybmFsL2NvbnN0YW50cycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IGlkZW50aWZpZXJzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9pZGVudGlmaWVycycpXG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhcnNlJylcbmNvbnN0IHZhbGlkID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvdmFsaWQnKVxuY29uc3QgY2xlYW4gPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbGVhbicpXG5jb25zdCBpbmMgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9pbmMnKVxuY29uc3QgZGlmZiA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2RpZmYnKVxuY29uc3QgbWFqb3IgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9tYWpvcicpXG5jb25zdCBtaW5vciA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL21pbm9yJylcbmNvbnN0IHBhdGNoID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvcGF0Y2gnKVxuY29uc3QgcHJlcmVsZWFzZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ByZXJlbGVhc2UnKVxuY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUnKVxuY29uc3QgcmNvbXBhcmUgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yY29tcGFyZScpXG5jb25zdCBjb21wYXJlTG9vc2UgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlJylcbmNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQnKVxuY29uc3Qgc29ydCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3NvcnQnKVxuY29uc3QgcnNvcnQgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yc29ydCcpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0JylcbmNvbnN0IGx0ID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvbHQnKVxuY29uc3QgZXEgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9lcScpXG5jb25zdCBuZXEgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9uZXEnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvZ3RlJylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0ZScpXG5jb25zdCBjbXAgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbXAnKVxuY29uc3QgY29lcmNlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29lcmNlJylcbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuL2NsYXNzZXMvY29tcGFyYXRvcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9zYXRpc2ZpZXMnKVxuY29uc3QgdG9Db21wYXJhdG9ycyA9IHJlcXVpcmUoJy4vcmFuZ2VzL3RvLWNvbXBhcmF0b3JzJylcbmNvbnN0IG1heFNhdGlzZnlpbmcgPSByZXF1aXJlKCcuL3Jhbmdlcy9tYXgtc2F0aXNmeWluZycpXG5jb25zdCBtaW5TYXRpc2Z5aW5nID0gcmVxdWlyZSgnLi9yYW5nZXMvbWluLXNhdGlzZnlpbmcnKVxuY29uc3QgbWluVmVyc2lvbiA9IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi12ZXJzaW9uJylcbmNvbnN0IHZhbGlkUmFuZ2UgPSByZXF1aXJlKCcuL3Jhbmdlcy92YWxpZCcpXG5jb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9yYW5nZXMvb3V0c2lkZScpXG5jb25zdCBndHIgPSByZXF1aXJlKCcuL3Jhbmdlcy9ndHInKVxuY29uc3QgbHRyID0gcmVxdWlyZSgnLi9yYW5nZXMvbHRyJylcbmNvbnN0IGludGVyc2VjdHMgPSByZXF1aXJlKCcuL3Jhbmdlcy9pbnRlcnNlY3RzJylcbmNvbnN0IHNpbXBsaWZ5UmFuZ2UgPSByZXF1aXJlKCcuL3Jhbmdlcy9zaW1wbGlmeScpXG5jb25zdCBzdWJzZXQgPSByZXF1aXJlKCcuL3Jhbmdlcy9zdWJzZXQnKVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlLFxuICB2YWxpZCxcbiAgY2xlYW4sXG4gIGluYyxcbiAgZGlmZixcbiAgbWFqb3IsXG4gIG1pbm9yLFxuICBwYXRjaCxcbiAgcHJlcmVsZWFzZSxcbiAgY29tcGFyZSxcbiAgcmNvbXBhcmUsXG4gIGNvbXBhcmVMb29zZSxcbiAgY29tcGFyZUJ1aWxkLFxuICBzb3J0LFxuICByc29ydCxcbiAgZ3QsXG4gIGx0LFxuICBlcSxcbiAgbmVxLFxuICBndGUsXG4gIGx0ZSxcbiAgY21wLFxuICBjb2VyY2UsXG4gIENvbXBhcmF0b3IsXG4gIFJhbmdlLFxuICBzYXRpc2ZpZXMsXG4gIHRvQ29tcGFyYXRvcnMsXG4gIG1heFNhdGlzZnlpbmcsXG4gIG1pblNhdGlzZnlpbmcsXG4gIG1pblZlcnNpb24sXG4gIHZhbGlkUmFuZ2UsXG4gIG91dHNpZGUsXG4gIGd0cixcbiAgbHRyLFxuICBpbnRlcnNlY3RzLFxuICBzaW1wbGlmeVJhbmdlLFxuICBzdWJzZXQsXG4gIFNlbVZlcixcbiAgcmU6IGludGVybmFsUmUucmUsXG4gIHNyYzogaW50ZXJuYWxSZS5zcmMsXG4gIHRva2VuczogaW50ZXJuYWxSZS50LFxuICBTRU1WRVJfU1BFQ19WRVJTSU9OOiBjb25zdGFudHMuU0VNVkVSX1NQRUNfVkVSU0lPTixcbiAgY29tcGFyZUlkZW50aWZpZXJzOiBpZGVudGlmaWVycy5jb21wYXJlSWRlbnRpZmllcnMsXG4gIHJjb21wYXJlSWRlbnRpZmllcnM6IGlkZW50aWZpZXJzLnJjb21wYXJlSWRlbnRpZmllcnMsXG59XG4iLCJpbXBvcnQgeyBzZXJ2ZXJBcGkgfSBmcm9tICcuLi9hcGknO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBTdGF0cyB9IGZyb20gJ2ZzJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuZXhwb3J0IGNsYXNzIEZpbGVDbGllbnQge1xuICAgIHN0YXRpYyBmaWxlQ2xpZW50OiBGaWxlQ2xpZW50O1xuXG4gICAgZ2V0VmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zaXl1YW4uY29uZmlnLnN5c3RlbS5rZXJuZWxWZXJzaW9uO1xuICAgIH1cblxuICAgIGZpbGVBcGk6IHtcbiAgICAgICAgcmVhZERpcjogKHBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTxBcnJheTx7IGlzRGlyOiBib29sZWFuOyBuYW1lOiBzdHJpbmcgfT4+O1xuICAgICAgICBnZXRGaWxlOiAocGF0aDogc3RyaW5nLCB0eXBlPzogJ2pzb24nIHwgJ3RleHQnKSA9PiBQcm9taXNlPGFueT47XG4gICAgICAgIHB1dEZpbGU6IChwYXRoLCBmaWxlZGF0YSwgaXNEaXI/OiBib29sZWFuLCBtb2RUaW1lPzogbnVtYmVyKSA9PiBQcm9taXNlPGFueT47XG4gICAgICAgIHJlbW92ZUZpbGU6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gICAgfTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmdldFZlcnNpb24oKTtcbiAgICAgICAgaWYgKHNlbXZlci5jb21wYXJlKHYsICcyLjguMScpIDwgMCkge1xuICAgICAgICAgICAgLy8gb2xkIHZlcnNpb24sIGVsZWN0cm9uIGFwaSBzdXBwb3J0XG4gICAgICAgICAgICB0aGlzLmZpbGVBcGkgPSB0aGlzLmVsZWN0cm9uQXBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbmV3IGFwaSwgZmlsZSBhcGkgc3VwcG9ydFxuICAgICAgICAgICAgdGhpcy5maWxlQXBpID0gdGhpcy5zZXJ2ZXJBcGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2VBcGkoKSB7XG4gICAgICAgIGlmICghdGhpcy5maWxlQ2xpZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVDbGllbnQgPSBuZXcgRmlsZUNsaWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVDbGllbnQ7XG4gICAgfVxuXG4gICAgZWxlY3Ryb25BcGkgPSB7XG4gICAgICAgIHJlYWREaXIocDogc3RyaW5nKTogUHJvbWlzZTxBcnJheTx7IGlzRGlyOiBib29sZWFuOyBuYW1lOiBzdHJpbmcgfT4+IHtcbiAgICAgICAgICAgIGNvbnN0IGZzID0gd2luZG93LnJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gd2luZG93LnJlcXVpcmUoJ3BhdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IFNJWVVBTl9XT1JLU1BBQ0UgPSBwYXRoLmpvaW4od2luZG93LnNpeXVhbi5jb25maWcuc3lzdGVtLmRhdGFEaXIsICcuLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgZnMucmVhZGRpcihwYXRoLmpvaW4oU0lZVUFOX1dPUktTUEFDRSwgcCksIChlcnIsIGZpbGVzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaWxlcy5tYXA8eyBpc0RpcjogYm9vbGVhbjsgbmFtZTogc3RyaW5nIH0+KChmOiBzdHJpbmcpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RpcjogKGZzLnN0YXRTeW5jKHBhdGguam9pbihTSVlVQU5fV09SS1NQQUNFLCBwLCBmKSkgYXMgU3RhdHMpLmlzRGlyZWN0b3J5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGaWxlKGY6IHN0cmluZywgdHlwZTogJ2pzb24nIHwgJ3RleHQnID0gJ3RleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gd2luZG93LnJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5yZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgU0lZVUFOX1dPUktTUEFDRSA9IHBhdGguam9pbih3aW5kb3cuc2l5dWFuLmNvbmZpZy5zeXN0ZW0uZGF0YURpciwgJy4uJyk7XG4gICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocGF0aC5qb2luKFNJWVVBTl9XT1JLU1BBQ0UsIGYpLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gZGF0YS50b1N0cmluZygndXRmOCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKEpTT04ucGFyc2UodGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGV4dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHV0RmlsZTogc2VydmVyQXBpLnB1dEZpbGUsXG4gICAgICAgIHJlbW92ZUZpbGUoZjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gd2luZG93LnJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5yZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgU0lZVUFOX1dPUktTUEFDRSA9IHBhdGguam9pbih3aW5kb3cuc2l5dWFuLmNvbmZpZy5zeXN0ZW0uZGF0YURpciwgJy4uJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IHBhdGguam9pbihTSVlVQU5fV09SS1NQQUNFLCBmKTtcbiAgICAgICAgICAgICAgICBsb2coJ1JlbW92ZSBmaWxlcyBmcm9tJywgcCk7XG4gICAgICAgICAgICAgICAgZnMucm0ocCwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgc2VydmVyQXBpID0ge1xuICAgICAgICByZWFkRGlyOiBzZXJ2ZXJBcGkucmVhZERpcixcbiAgICAgICAgZ2V0RmlsZTogc2VydmVyQXBpLmdldEZpbGUsXG4gICAgICAgIHB1dEZpbGU6IHNlcnZlckFwaS5wdXRGaWxlLFxuICAgICAgICByZW1vdmVGaWxlOiBzZXJ2ZXJBcGkucmVtb3ZlRmlsZSxcbiAgICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgY29uc3QgcGF0dGVybiA9ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fFxuICAgIHRvU3RyaW5nLmNhbGwodGhpbmcpID09PSBwYXR0ZXJuIHx8XG4gICAgKGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09IHBhdHRlcm4pXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgaWYgKHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3Rcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzU3RhbmRhcmRCcm93c2VyRW52ID0gKCgpID0+IHtcbiAgbGV0IHByb2R1Y3Q7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgKHByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICBwcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgIHByb2R1Y3QgPT09ICdOUycpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufSkoKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuIGNvbnN0IGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG5jb25zdCBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRIZWFkZXJOYW1lKHN0cikge1xuICByZXR1cm4gL15bLV9hLXpBLVpdKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUpO1xudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICBjb25zdCBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbi8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpICYmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikpIHtcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKVxuICAgICAgICAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZihmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgaWYoKGFkYXB0ZXIgPSB1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSA/IGtub3duQWRhcHRlcnNbbmFtZU9yQWRhcHRlci50b0xvd2VyQ2FzZSgpXSA6IG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgaWYgKGFkYXB0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIGBBZGFwdGVyICR7bmFtZU9yQWRhcHRlcn0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnRgLFxuICAgICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbHMuaGFzT3duUHJvcChrbm93bkFkYXB0ZXJzLCBuYW1lT3JBZGFwdGVyKSA/XG4gICAgICAgICAgYEFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkYCA6XG4gICAgICAgICAgYFVua25vd24gYWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8gdGhpbmcudG9KU09OKCkgOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjMuNFwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBsZXQgY29udGV4dEhlYWRlcnM7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgY29udGV4dEhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsImltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL2ludGVybmFsL2NsYXNzZXMvbm90aWZpY2F0aW9uJztcbmltcG9ydCBMb2dnZXJGYWN0b3J5LCB7IExvZ0xldmVsRW51bSB9IGZyb20gJ3poaS1sb2cnO1xuaW1wb3J0IHsgRmlsZUNsaWVudCB9IGZyb20gJy4uL2FwaS9maWxlLWFwaSc7XG5cbmltcG9ydCB6aF9DTiBmcm9tICcuLi9pMThuL3poX0NOLmpzb24nO1xuaW1wb3J0IGVuX1VTIGZyb20gJy4uL2kxOG4vZW5fVVMuanNvbic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jb25zdCBmYWN0b3J5ID0gTG9nZ2VyRmFjdG9yeS5jdXN0b21Mb2dGYWN0b3J5KExvZ0xldmVsRW51bS5MT0dfTEVWRUxfSU5GTywgJ1BsdWdpblN5c3RlbScpO1xuY29uc3QgcGx1Z2luU3lzdGVtTG9nZ2VyID0gZmFjdG9yeS5nZXRMb2dnZXIoJ3BsdWdpbiBzeXN0ZW0nKTtcblxuZXhwb3J0IGNvbnN0IGxvZyA9ICguLi5wKSA9PiB7XG4gICAgcGx1Z2luU3lzdGVtTG9nZ2VyLmluZm8oLi4ucCk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVxdWVzdCA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgICAgUHJhZ21hOiAnbm8tY2FjaGUnLFxuICAgICAgICBFeHBpcmVzOiAnMCcsXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2xlZXAgPSBhc3luYyAodDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZShudWxsKSwgdCk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZXJyb3IgPSAoLi4ucCkgPT4gcGx1Z2luU3lzdGVtTG9nZ2VyLmVycm9yKC4uLnApO1xuXG5leHBvcnQgY29uc3QgcmVsb2FkV2luZG93ID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q3Jvc3NQbGF0Zm9ybUFwcERhdGFGb2xkZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgUFJPQ0VTU19FTlYgPSB3aW5kb3cucHJvY2Vzcz8uZW52O1xuICAgIGxldCBjb25maWdGaWxlUGF0aDtcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicpIHtcbiAgICAgICAgY29uZmlnRmlsZVBhdGggPSBgJHtQUk9DRVNTX0VOVi5IT01FfS9MaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcnRgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgICAvLyBSb2FtaW5n5YyF5ZCr5ZyoQVBQREFUQeS4reS6hlxuICAgICAgICBjb25maWdGaWxlUGF0aCA9IFBST0NFU1NfRU5WLkFQUERBVEE7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnKSB7XG4gICAgICAgIGNvbmZpZ0ZpbGVQYXRoID0gUFJPQ0VTU19FTlYuSE9NRTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ0ZpbGVQYXRoO1xufTtcblxuLyoqXG4gKiBnZW5VVUlEICBnZW5lcm5hdGUgVVVJRCwgY29weSBmcm9tIHNpeXVhblxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IGdlblVVSUQgPSAoKSA9PlxuICAgIChbMWU3XS50b1N0cmluZygpICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIChjKSA9PlxuICAgICAgICAocGFyc2VJbnQoYywgMTApIF4gKHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF0gJiAoMTUgPj4gKHBhcnNlSW50KGMsIDEwKSAvIDQpKSkpLnRvU3RyaW5nKDE2KVxuICAgICk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpcihwOiBzdHJpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbiBub3QgZ2V0IGRpciBieSBwYXRoOicgKyBwKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzRXhpc3RzKHA6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IEZpbGVDbGllbnQuZ2V0SW5zdGFuY2VBcGkoKS5maWxlQXBpLmdldEZpbGUocCk7XG4gICAgICAgIHJldHVybiByZXMgIT09IG51bGw7XG4gICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbmZvIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1lc3NhZ2U6IHN0cmluZykge31cbn1cbmV4cG9ydCBjbGFzcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlOiBzdHJpbmcpIHt9XG59XG5leHBvcnQgY2xhc3MgV2FybmluZyB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjb25zdCBzaG93SW5mb01lc3NhZ2UgPSAobWVzc2FnZTogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyKSA9PiBuZXcgTm90aWZpY2F0aW9uKHsgdHlwZTogJ2luZm8nLCBtZXNzYWdlLCB0aW1lb3V0IH0pLnNob3coKTtcbmV4cG9ydCBjb25zdCBzaG93RXJyb3JNZXNzYWdlID0gKG1lc3NhZ2U6IHN0cmluZywgdGltZW91dD86IG51bWJlcikgPT4gbmV3IE5vdGlmaWNhdGlvbih7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2UsIHRpbWVvdXQgfSkuc2hvdygpO1xuXG5leHBvcnQgY29uc3QgZ2V0TG9nZ2VyID0gKG5hbWU6IHN0cmluZykgPT4gZmFjdG9yeS5nZXRMb2dnZXIobmFtZSk7XG5cbmNvbnN0IGxhbmdzID0ge1xuICAgIHpoX0NOLFxuICAgIGVuX1VTLFxufTtcblxuZXhwb3J0IGNvbnN0IF8gPSAodjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gbGFuZ3Nbd2luZG93LnNpeXVhbi5jb25maWcubGFuZ11bdl0gfHwgJ25vdCBkZWZpbmVkJztcbn07XG4iLCJleHBvcnQgdmFyIE5BTUVEX1RBRyA9IFwibmFtZWRcIjtcbmV4cG9ydCB2YXIgTkFNRV9UQUcgPSBcIm5hbWVcIjtcbmV4cG9ydCB2YXIgVU5NQU5BR0VEX1RBRyA9IFwidW5tYW5hZ2VkXCI7XG5leHBvcnQgdmFyIE9QVElPTkFMX1RBRyA9IFwib3B0aW9uYWxcIjtcbmV4cG9ydCB2YXIgSU5KRUNUX1RBRyA9IFwiaW5qZWN0XCI7XG5leHBvcnQgdmFyIE1VTFRJX0lOSkVDVF9UQUcgPSBcIm11bHRpX2luamVjdFwiO1xuZXhwb3J0IHZhciBUQUdHRUQgPSBcImludmVyc2lmeTp0YWdnZWRcIjtcbmV4cG9ydCB2YXIgVEFHR0VEX1BST1AgPSBcImludmVyc2lmeTp0YWdnZWRfcHJvcHNcIjtcbmV4cG9ydCB2YXIgUEFSQU1fVFlQRVMgPSBcImludmVyc2lmeTpwYXJhbXR5cGVzXCI7XG5leHBvcnQgdmFyIERFU0lHTl9QQVJBTV9UWVBFUyA9IFwiZGVzaWduOnBhcmFtdHlwZXNcIjtcbmV4cG9ydCB2YXIgUE9TVF9DT05TVFJVQ1QgPSBcInBvc3RfY29uc3RydWN0XCI7XG5leHBvcnQgdmFyIFBSRV9ERVNUUk9ZID0gXCJwcmVfZGVzdHJveVwiO1xuZnVuY3Rpb24gZ2V0Tm9uQ3VzdG9tVGFnS2V5cygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBJTkpFQ1RfVEFHLFxuICAgICAgICBNVUxUSV9JTkpFQ1RfVEFHLFxuICAgICAgICBOQU1FX1RBRyxcbiAgICAgICAgVU5NQU5BR0VEX1RBRyxcbiAgICAgICAgTkFNRURfVEFHLFxuICAgICAgICBPUFRJT05BTF9UQUcsXG4gICAgXTtcbn1cbmV4cG9ydCB2YXIgTk9OX0NVU1RPTV9UQUdfS0VZUyA9IGdldE5vbkN1c3RvbVRhZ0tleXMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhX2tleXMuanMubWFwIiwidmFyIEJpbmRpbmdTY29wZUVudW0gPSB7XG4gICAgUmVxdWVzdDogXCJSZXF1ZXN0XCIsXG4gICAgU2luZ2xldG9uOiBcIlNpbmdsZXRvblwiLFxuICAgIFRyYW5zaWVudDogXCJUcmFuc2llbnRcIlxufTtcbnZhciBCaW5kaW5nVHlwZUVudW0gPSB7XG4gICAgQ29uc3RhbnRWYWx1ZTogXCJDb25zdGFudFZhbHVlXCIsXG4gICAgQ29uc3RydWN0b3I6IFwiQ29uc3RydWN0b3JcIixcbiAgICBEeW5hbWljVmFsdWU6IFwiRHluYW1pY1ZhbHVlXCIsXG4gICAgRmFjdG9yeTogXCJGYWN0b3J5XCIsXG4gICAgRnVuY3Rpb246IFwiRnVuY3Rpb25cIixcbiAgICBJbnN0YW5jZTogXCJJbnN0YW5jZVwiLFxuICAgIEludmFsaWQ6IFwiSW52YWxpZFwiLFxuICAgIFByb3ZpZGVyOiBcIlByb3ZpZGVyXCJcbn07XG52YXIgVGFyZ2V0VHlwZUVudW0gPSB7XG4gICAgQ2xhc3NQcm9wZXJ0eTogXCJDbGFzc1Byb3BlcnR5XCIsXG4gICAgQ29uc3RydWN0b3JBcmd1bWVudDogXCJDb25zdHJ1Y3RvckFyZ3VtZW50XCIsXG4gICAgVmFyaWFibGU6IFwiVmFyaWFibGVcIlxufTtcbmV4cG9ydCB7IEJpbmRpbmdTY29wZUVudW0sIEJpbmRpbmdUeXBlRW51bSwgVGFyZ2V0VHlwZUVudW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdGVyYWxfdHlwZXMuanMubWFwIiwidmFyIGlkQ291bnRlciA9IDA7XG5mdW5jdGlvbiBpZCgpIHtcbiAgICByZXR1cm4gaWRDb3VudGVyKys7XG59XG5leHBvcnQgeyBpZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIiwiaW1wb3J0IHsgQmluZGluZ1Njb3BlRW51bSwgQmluZGluZ1R5cGVFbnVtIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzXCI7XG5pbXBvcnQgeyBpZCB9IGZyb20gXCIuLi91dGlscy9pZFwiO1xudmFyIEJpbmRpbmcgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmcoc2VydmljZUlkZW50aWZpZXIsIHNjb3BlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZCgpO1xuICAgICAgICB0aGlzLmFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkludmFsaWQ7XG4gICAgICAgIHRoaXMuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7IHJldHVybiB0cnVlOyB9O1xuICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLmZhY3RvcnkgPSBudWxsO1xuICAgICAgICB0aGlzLnByb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkFjdGl2YXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9uRGVhY3RpdmF0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5keW5hbWljVmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IEJpbmRpbmcodGhpcy5zZXJ2aWNlSWRlbnRpZmllciwgdGhpcy5zY29wZSk7XG4gICAgICAgIGNsb25lLmFjdGl2YXRlZCA9IChjbG9uZS5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b24pID8gdGhpcy5hY3RpdmF0ZWQgOiBmYWxzZTtcbiAgICAgICAgY2xvbmUuaW1wbGVtZW50YXRpb25UeXBlID0gdGhpcy5pbXBsZW1lbnRhdGlvblR5cGU7XG4gICAgICAgIGNsb25lLmR5bmFtaWNWYWx1ZSA9IHRoaXMuZHluYW1pY1ZhbHVlO1xuICAgICAgICBjbG9uZS5zY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgICAgIGNsb25lLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgIGNsb25lLmZhY3RvcnkgPSB0aGlzLmZhY3Rvcnk7XG4gICAgICAgIGNsb25lLnByb3ZpZGVyID0gdGhpcy5wcm92aWRlcjtcbiAgICAgICAgY2xvbmUuY29uc3RyYWludCA9IHRoaXMuY29uc3RyYWludDtcbiAgICAgICAgY2xvbmUub25BY3RpdmF0aW9uID0gdGhpcy5vbkFjdGl2YXRpb247XG4gICAgICAgIGNsb25lLm9uRGVhY3RpdmF0aW9uID0gdGhpcy5vbkRlYWN0aXZhdGlvbjtcbiAgICAgICAgY2xvbmUuY2FjaGUgPSB0aGlzLmNhY2hlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICByZXR1cm4gQmluZGluZztcbn0oKSk7XG5leHBvcnQgeyBCaW5kaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nLmpzLm1hcCIsImV4cG9ydCB2YXIgRFVQTElDQVRFRF9JTkpFQ1RBQkxFX0RFQ09SQVRPUiA9IFwiQ2Fubm90IGFwcGx5IEBpbmplY3RhYmxlIGRlY29yYXRvciBtdWx0aXBsZSB0aW1lcy5cIjtcbmV4cG9ydCB2YXIgRFVQTElDQVRFRF9NRVRBREFUQSA9IFwiTWV0YWRhdGEga2V5IHdhcyB1c2VkIG1vcmUgdGhhbiBvbmNlIGluIGEgcGFyYW1ldGVyOlwiO1xuZXhwb3J0IHZhciBOVUxMX0FSR1VNRU5UID0gXCJOVUxMIGFyZ3VtZW50XCI7XG5leHBvcnQgdmFyIEtFWV9OT1RfRk9VTkQgPSBcIktleSBOb3QgRm91bmRcIjtcbmV4cG9ydCB2YXIgQU1CSUdVT1VTX01BVENIID0gXCJBbWJpZ3VvdXMgbWF0Y2ggZm91bmQgZm9yIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBDQU5OT1RfVU5CSU5EID0gXCJDb3VsZCBub3QgdW5iaW5kIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBOT1RfUkVHSVNURVJFRCA9IFwiTm8gbWF0Y2hpbmcgYmluZGluZ3MgZm91bmQgZm9yIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBNSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiA9IFwiTWlzc2luZyByZXF1aXJlZCBAaW5qZWN0YWJsZSBhbm5vdGF0aW9uIGluOlwiO1xuZXhwb3J0IHZhciBNSVNTSU5HX0lOSkVDVF9BTk5PVEFUSU9OID0gXCJNaXNzaW5nIHJlcXVpcmVkIEBpbmplY3Qgb3IgQG11bHRpSW5qZWN0IGFubm90YXRpb24gaW46XCI7XG5leHBvcnQgdmFyIFVOREVGSU5FRF9JTkpFQ1RfQU5OT1RBVElPTiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQGluamVjdCBjYWxsZWQgd2l0aCB1bmRlZmluZWQgdGhpcyBjb3VsZCBtZWFuIHRoYXQgdGhlIGNsYXNzIFwiICsgbmFtZSArIFwiIGhhcyBcIiArXG4gICAgICAgIFwiYSBjaXJjdWxhciBkZXBlbmRlbmN5IHByb2JsZW0uIFlvdSBjYW4gdXNlIGEgTGF6eVNlcnZpY2VJZGVudGlmZXIgdG8gIFwiICtcbiAgICAgICAgXCJvdmVyY29tZSB0aGlzIGxpbWl0YXRpb24uXCI7XG59O1xuZXhwb3J0IHZhciBDSVJDVUxBUl9ERVBFTkRFTkNZID0gXCJDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOlwiO1xuZXhwb3J0IHZhciBOT1RfSU1QTEVNRU5URUQgPSBcIlNvcnJ5LCB0aGlzIGZlYXR1cmUgaXMgbm90IGZ1bGx5IGltcGxlbWVudGVkIHlldC5cIjtcbmV4cG9ydCB2YXIgSU5WQUxJRF9CSU5ESU5HX1RZUEUgPSBcIkludmFsaWQgYmluZGluZyB0eXBlOlwiO1xuZXhwb3J0IHZhciBOT19NT1JFX1NOQVBTSE9UU19BVkFJTEFCTEUgPSBcIk5vIHNuYXBzaG90IGF2YWlsYWJsZSB0byByZXN0b3JlLlwiO1xuZXhwb3J0IHZhciBJTlZBTElEX01JRERMRVdBUkVfUkVUVVJOID0gXCJJbnZhbGlkIHJldHVybiB0eXBlIGluIG1pZGRsZXdhcmUuIE1pZGRsZXdhcmUgbXVzdCByZXR1cm4hXCI7XG5leHBvcnQgdmFyIElOVkFMSURfRlVOQ1RJT05fQklORElORyA9IFwiVmFsdWUgcHJvdmlkZWQgdG8gZnVuY3Rpb24gYmluZGluZyBtdXN0IGJlIGEgZnVuY3Rpb24hXCI7XG5leHBvcnQgdmFyIExBWllfSU5fU1lOQyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFwiWW91IGFyZSBhdHRlbXB0aW5nIHRvIGNvbnN0cnVjdCAnXCIgKyBrZXkgKyBcIicgaW4gYSBzeW5jaHJvbm91cyB3YXlcXG4gYnV0IGl0IGhhcyBhc3luY2hyb25vdXMgZGVwZW5kZW5jaWVzLlwiOyB9O1xuZXhwb3J0IHZhciBJTlZBTElEX1RPX1NFTEZfVkFMVUUgPSBcIlRoZSB0b1NlbGYgZnVuY3Rpb24gY2FuIG9ubHkgYmUgYXBwbGllZCB3aGVuIGEgY29uc3RydWN0b3IgaXMgXCIgK1xuICAgIFwidXNlZCBhcyBzZXJ2aWNlIGlkZW50aWZpZXJcIjtcbmV4cG9ydCB2YXIgSU5WQUxJRF9ERUNPUkFUT1JfT1BFUkFUSU9OID0gXCJUaGUgQGluamVjdCBAbXVsdGlJbmplY3QgQHRhZ2dlZCBhbmQgQG5hbWVkIGRlY29yYXRvcnMgXCIgK1xuICAgIFwibXVzdCBiZSBhcHBsaWVkIHRvIHRoZSBwYXJhbWV0ZXJzIG9mIGEgY2xhc3MgY29uc3RydWN0b3Igb3IgYSBjbGFzcyBwcm9wZXJ0eS5cIjtcbmV4cG9ydCB2YXIgQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBcIlRoZSBudW1iZXIgb2YgY29uc3RydWN0b3IgYXJndW1lbnRzIGluIHRoZSBkZXJpdmVkIGNsYXNzIFwiICtcbiAgICAgICAgKHZhbHVlc1swXSArIFwiIG11c3QgYmUgPj0gdGhhbiB0aGUgbnVtYmVyIG9mIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBvZiBpdHMgYmFzZSBjbGFzcy5cIik7XG59O1xuZXhwb3J0IHZhciBDT05UQUlORVJfT1BUSU9OU19NVVNUX0JFX0FOX09CSkVDVCA9IFwiSW52YWxpZCBDb250YWluZXIgY29uc3RydWN0b3IgYXJndW1lbnQuIENvbnRhaW5lciBvcHRpb25zIFwiICtcbiAgICBcIm11c3QgYmUgYW4gb2JqZWN0LlwiO1xuZXhwb3J0IHZhciBDT05UQUlORVJfT1BUSU9OU19JTlZBTElEX0RFRkFVTFRfU0NPUEUgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gRGVmYXVsdCBzY29wZSBtdXN0IFwiICtcbiAgICBcImJlIGEgc3RyaW5nICgnc2luZ2xldG9uJyBvciAndHJhbnNpZW50JykuXCI7XG5leHBvcnQgdmFyIENPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfQVVUT19CSU5EX0lOSkVDVEFCTEUgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gQXV0byBiaW5kIGluamVjdGFibGUgbXVzdCBcIiArXG4gICAgXCJiZSBhIGJvb2xlYW5cIjtcbmV4cG9ydCB2YXIgQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9TS0lQX0JBU0VfQ0hFQ0sgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gU2tpcCBiYXNlIGNoZWNrIG11c3QgXCIgK1xuICAgIFwiYmUgYSBib29sZWFuXCI7XG5leHBvcnQgdmFyIE1VTFRJUExFX1BSRV9ERVNUUk9ZX01FVEhPRFMgPSBcIkNhbm5vdCBhcHBseSBAcHJlRGVzdHJveSBkZWNvcmF0b3IgbXVsdGlwbGUgdGltZXMgaW4gdGhlIHNhbWUgY2xhc3NcIjtcbmV4cG9ydCB2YXIgTVVMVElQTEVfUE9TVF9DT05TVFJVQ1RfTUVUSE9EUyA9IFwiQ2Fubm90IGFwcGx5IEBwb3N0Q29uc3RydWN0IGRlY29yYXRvciBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgc2FtZSBjbGFzc1wiO1xuZXhwb3J0IHZhciBBU1lOQ19VTkJJTkRfUkVRVUlSRUQgPSBcIkF0dGVtcHRpbmcgdG8gdW5iaW5kIGRlcGVuZGVuY3kgd2l0aCBhc3luY2hyb25vdXMgZGVzdHJ1Y3Rpb24gKEBwcmVEZXN0cm95IG9yIG9uRGVhY3RpdmF0aW9uKVwiO1xuZXhwb3J0IHZhciBQT1NUX0NPTlNUUlVDVF9FUlJPUiA9IGZ1bmN0aW9uIChjbGF6eiwgZXJyb3JNZXNzYWdlKSB7IHJldHVybiBcIkBwb3N0Q29uc3RydWN0IGVycm9yIGluIGNsYXNzIFwiICsgY2xhenogKyBcIjogXCIgKyBlcnJvck1lc3NhZ2U7IH07XG5leHBvcnQgdmFyIFBSRV9ERVNUUk9ZX0VSUk9SID0gZnVuY3Rpb24gKGNsYXp6LCBlcnJvck1lc3NhZ2UpIHsgcmV0dXJuIFwiQHByZURlc3Ryb3kgZXJyb3IgaW4gY2xhc3MgXCIgKyBjbGF6eiArIFwiOiBcIiArIGVycm9yTWVzc2FnZTsgfTtcbmV4cG9ydCB2YXIgT05fREVBQ1RJVkFUSU9OX0VSUk9SID0gZnVuY3Rpb24gKGNsYXp6LCBlcnJvck1lc3NhZ2UpIHsgcmV0dXJuIFwib25EZWFjdGl2YXRpb24oKSBlcnJvciBpbiBjbGFzcyBcIiArIGNsYXp6ICsgXCI6IFwiICsgZXJyb3JNZXNzYWdlOyB9O1xuZXhwb3J0IHZhciBDSVJDVUxBUl9ERVBFTkRFTkNZX0lOX0ZBQ1RPUlkgPSBmdW5jdGlvbiAoZmFjdG9yeVR5cGUsIHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIFwiSXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaW4gb25lIG9mIHRoZSAnXCIgKyBmYWN0b3J5VHlwZSArIFwiJyBiaW5kaW5ncy4gUGxlYXNlIGludmVzdGlnYXRlIGJpbmRpbmdzIHdpdGhcIiArXG4gICAgICAgIChcInNlcnZpY2UgaWRlbnRpZmllciAnXCIgKyBzZXJ2aWNlSWRlbnRpZmllciArIFwiJy5cIik7XG59O1xuZXhwb3J0IHZhciBTVEFDS19PVkVSRkxPVyA9IFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yX21zZ3MuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xudmFyIE1ldGFkYXRhUmVhZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXRhZGF0YVJlYWRlcigpIHtcbiAgICB9XG4gICAgTWV0YWRhdGFSZWFkZXIucHJvdG90eXBlLmdldENvbnN0cnVjdG9yTWV0YWRhdGEgPSBmdW5jdGlvbiAoY29uc3RydWN0b3JGdW5jKSB7XG4gICAgICAgIHZhciBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRBREFUQV9LRVkuUEFSQU1fVFlQRVMsIGNvbnN0cnVjdG9yRnVuYyk7XG4gICAgICAgIHZhciB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5UQUdHRUQsIGNvbnN0cnVjdG9yRnVuYyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhOiBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhLFxuICAgICAgICAgICAgdXNlckdlbmVyYXRlZE1ldGFkYXRhOiB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgfHwge31cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1ldGFkYXRhUmVhZGVyLnByb3RvdHlwZS5nZXRQcm9wZXJ0aWVzTWV0YWRhdGEgPSBmdW5jdGlvbiAoY29uc3RydWN0b3JGdW5jKSB7XG4gICAgICAgIHZhciB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5UQUdHRURfUFJPUCwgY29uc3RydWN0b3JGdW5jKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHVzZXJHZW5lcmF0ZWRNZXRhZGF0YTtcbiAgICB9O1xuICAgIHJldHVybiBNZXRhZGF0YVJlYWRlcjtcbn0oKSk7XG5leHBvcnQgeyBNZXRhZGF0YVJlYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGFfcmVhZGVyLmpzLm1hcCIsInZhciBCaW5kaW5nQ291bnQgPSB7XG4gICAgTXVsdGlwbGVCaW5kaW5nc0F2YWlsYWJsZTogMixcbiAgICBOb0JpbmRpbmdzQXZhaWxhYmxlOiAwLFxuICAgIE9ubHlPbmVCaW5kaW5nQXZhaWxhYmxlOiAxXG59O1xuZXhwb3J0IHsgQmluZGluZ0NvdW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX2NvdW50LmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNTdGFja092ZXJmbG93RXhlcHRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgUmFuZ2VFcnJvciB8fFxuICAgICAgICBlcnJvci5tZXNzYWdlID09PSBFUlJPUl9NU0dTLlNUQUNLX09WRVJGTE9XKTtcbn1cbmV4cG9ydCB2YXIgdHJ5QW5kVGhyb3dFcnJvcklmU3RhY2tPdmVyZmxvdyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGlzU3RhY2tPdmVyZmxvd0V4ZXB0aW9uKGVycm9yKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvckNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4Y2VwdGlvbnMuanMubWFwIiwiaW1wb3J0ICogYXMgRVJST1JfTVNHUyBmcm9tIFwiLi4vY29uc3RhbnRzL2Vycm9yX21zZ3NcIjtcbmZ1bmN0aW9uIGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICBpZiAodHlwZW9mIHNlcnZpY2VJZGVudGlmaWVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIF9zZXJ2aWNlSWRlbnRpZmllciA9IHNlcnZpY2VJZGVudGlmaWVyO1xuICAgICAgICByZXR1cm4gX3NlcnZpY2VJZGVudGlmaWVyLm5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzZXJ2aWNlSWRlbnRpZmllciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gc2VydmljZUlkZW50aWZpZXIudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBfc2VydmljZUlkZW50aWZpZXIgPSBzZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgICAgcmV0dXJuIF9zZXJ2aWNlSWRlbnRpZmllcjtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllciwgZ2V0QmluZGluZ3MpIHtcbiAgICB2YXIgcmVnaXN0ZXJlZEJpbmRpbmdzTGlzdCA9IFwiXCI7XG4gICAgdmFyIHJlZ2lzdGVyZWRCaW5kaW5ncyA9IGdldEJpbmRpbmdzKGNvbnRhaW5lciwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIGlmIChyZWdpc3RlcmVkQmluZGluZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSBcIlxcblJlZ2lzdGVyZWQgYmluZGluZ3M6XCI7XG4gICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IFwiT2JqZWN0XCI7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSByZWdpc3RlcmVkQmluZGluZ3NMaXN0ICsgXCJcXG4gXCIgKyBuYW1lO1xuICAgICAgICAgICAgaWYgKGJpbmRpbmcuY29uc3RyYWludC5tZXRhRGF0YSkge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSByZWdpc3RlcmVkQmluZGluZ3NMaXN0ICsgXCIgLSBcIiArIGJpbmRpbmcuY29uc3RyYWludC5tZXRhRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZWdpc3RlcmVkQmluZGluZ3NMaXN0O1xufVxuZnVuY3Rpb24gYWxyZWFkeURlcGVuZGVuY3lDaGFpbihyZXF1ZXN0LCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIGlmIChyZXF1ZXN0LnBhcmVudFJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXF1ZXN0LnBhcmVudFJlcXVlc3Quc2VydmljZUlkZW50aWZpZXIgPT09IHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFscmVhZHlEZXBlbmRlbmN5Q2hhaW4ocmVxdWVzdC5wYXJlbnRSZXF1ZXN0LCBzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVwZW5kZW5jeUNoYWluVG9TdHJpbmcocmVxdWVzdCkge1xuICAgIGZ1bmN0aW9uIF9jcmVhdGVTdHJpbmdBcnIocmVxLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7IHJlc3VsdCA9IFtdOyB9XG4gICAgICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcocmVxLnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmVzdWx0LnB1c2goc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICBpZiAocmVxLnBhcmVudFJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlU3RyaW5nQXJyKHJlcS5wYXJlbnRSZXF1ZXN0LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHZhciBzdHJpbmdBcnIgPSBfY3JlYXRlU3RyaW5nQXJyKHJlcXVlc3QpO1xuICAgIHJldHVybiBzdHJpbmdBcnIucmV2ZXJzZSgpLmpvaW4oXCIgLS0+IFwiKTtcbn1cbmZ1bmN0aW9uIGNpcmN1bGFyRGVwZW5kZW5jeVRvRXhjZXB0aW9uKHJlcXVlc3QpIHtcbiAgICByZXF1ZXN0LmNoaWxkUmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgIGlmIChhbHJlYWR5RGVwZW5kZW5jeUNoYWluKGNoaWxkUmVxdWVzdCwgY2hpbGRSZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VzID0gZGVwZW5kZW5jeUNoYWluVG9TdHJpbmcoY2hpbGRSZXF1ZXN0KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLkNJUkNVTEFSX0RFUEVOREVOQ1kgKyBcIiBcIiArIHNlcnZpY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNpcmN1bGFyRGVwZW5kZW5jeVRvRXhjZXB0aW9uKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RNZXRhZGF0YUZvclRhcmdldChzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5pc1RhZ2dlZCgpIHx8IHRhcmdldC5pc05hbWVkKCkpIHtcbiAgICAgICAgdmFyIG1fMSA9IFwiXCI7XG4gICAgICAgIHZhciBuYW1lZFRhZyA9IHRhcmdldC5nZXROYW1lZFRhZygpO1xuICAgICAgICB2YXIgb3RoZXJUYWdzID0gdGFyZ2V0LmdldEN1c3RvbVRhZ3MoKTtcbiAgICAgICAgaWYgKG5hbWVkVGFnICE9PSBudWxsKSB7XG4gICAgICAgICAgICBtXzEgKz0gbmFtZWRUYWcudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyVGFncyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3RoZXJUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgIG1fMSArPSB0YWcudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCIgXCIgKyBzZXJ2aWNlSWRlbnRpZmllclN0cmluZyArIFwiXFxuIFwiICsgc2VydmljZUlkZW50aWZpZXJTdHJpbmcgKyBcIiAtIFwiICsgbV8xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiIFwiICsgc2VydmljZUlkZW50aWZpZXJTdHJpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZ1bmMpIHtcbiAgICBpZiAoZnVuYy5uYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jLm5hbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbmFtZV8xID0gZnVuYy50b1N0cmluZygpO1xuICAgICAgICB2YXIgbWF0Y2ggPSBuYW1lXzEubWF0Y2goL15mdW5jdGlvblxccyooW15cXHMoXSspLyk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogXCJBbm9ueW1vdXMgZnVuY3Rpb246IFwiICsgbmFtZV8xO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFN5bWJvbERlc2NyaXB0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBzeW1ib2wudG9TdHJpbmcoKS5zbGljZSg3LCAtMSk7XG59XG5leHBvcnQgeyBnZXRGdW5jdGlvbk5hbWUsIGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcsIGxpc3RSZWdpc3RlcmVkQmluZGluZ3NGb3JTZXJ2aWNlSWRlbnRpZmllciwgbGlzdE1ldGFkYXRhRm9yVGFyZ2V0LCBjaXJjdWxhckRlcGVuZGVuY3lUb0V4Y2VwdGlvbiwgZ2V0U3ltYm9sRGVzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6YXRpb24uanMubWFwIiwiaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbnZhciBDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmlkID0gaWQoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIENvbnRleHQucHJvdG90eXBlLmFkZFBsYW4gPSBmdW5jdGlvbiAocGxhbikge1xuICAgICAgICB0aGlzLnBsYW4gPSBwbGFuO1xuICAgIH07XG4gICAgQ29udGV4dC5wcm90b3R5cGUuc2V0Q3VycmVudFJlcXVlc3QgPSBmdW5jdGlvbiAoY3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdCA9IGN1cnJlbnRSZXF1ZXN0O1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHQ7XG59KCkpO1xuZXhwb3J0IHsgQ29udGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBNRVRBREFUQV9LRVkgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzXCI7XG52YXIgTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ldGFkYXRhKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgTWV0YWRhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5rZXkgPT09IE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm5hbWVkOiBcIiArIFN0cmluZyh0aGlzLnZhbHVlKS50b1N0cmluZygpICsgXCIgXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0YWdnZWQ6IHsga2V5OlwiICsgdGhpcy5rZXkudG9TdHJpbmcoKSArIFwiLCB2YWx1ZTogXCIgKyBTdHJpbmcodGhpcy52YWx1ZSkgKyBcIiB9XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXRhZGF0YTtcbn0oKSk7XG5leHBvcnQgeyBNZXRhZGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwIiwidmFyIFBsYW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYW4ocGFyZW50Q29udGV4dCwgcm9vdFJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRDb250ZXh0ID0gcGFyZW50Q29udGV4dDtcbiAgICAgICAgdGhpcy5yb290UmVxdWVzdCA9IHJvb3RSZXF1ZXN0O1xuICAgIH1cbiAgICByZXR1cm4gUGxhbjtcbn0oKSk7XG5leHBvcnQgeyBQbGFuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGFuLmpzLm1hcCIsInZhciBMYXp5U2VydmljZUlkZW50aWZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGF6eVNlcnZpY2VJZGVudGlmZXIoY2IpIHtcbiAgICAgICAgdGhpcy5fY2IgPSBjYjtcbiAgICB9XG4gICAgTGF6eVNlcnZpY2VJZGVudGlmZXIucHJvdG90eXBlLnVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NiKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTGF6eVNlcnZpY2VJZGVudGlmZXI7XG59KCkpO1xuZXhwb3J0IHsgTGF6eVNlcnZpY2VJZGVudGlmZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhenlfc2VydmljZV9pZGVudGlmaWVyLmpzLm1hcCIsInZhciBRdWVyeWFibGVTdHJpbmcgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXJ5YWJsZVN0cmluZyhzdHIpIHtcbiAgICAgICAgdGhpcy5zdHIgPSBzdHI7XG4gICAgfVxuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nKSA9PT0gMDtcbiAgICB9O1xuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgIHZhciByZXZlcnNlU3RyaW5nID0gXCJcIjtcbiAgICAgICAgdmFyIHJldmVyc2VTZWFyY2hTdHJpbmcgPSBzZWFyY2hTdHJpbmcuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIHJldmVyc2VTdHJpbmcgPSB0aGlzLnN0ci5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRzV2l0aC5jYWxsKHsgc3RyOiByZXZlcnNlU3RyaW5nIH0sIHJldmVyc2VTZWFyY2hTdHJpbmcpO1xuICAgIH07XG4gICAgUXVlcnlhYmxlU3RyaW5nLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0ci5pbmRleE9mKHNlYXJjaFN0cmluZykgIT09IC0xKTtcbiAgICB9O1xuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGNvbXBhcmVTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyID09PSBjb21wYXJlU3RyaW5nO1xuICAgIH07XG4gICAgUXVlcnlhYmxlU3RyaW5nLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyO1xuICAgIH07XG4gICAgcmV0dXJuIFF1ZXJ5YWJsZVN0cmluZztcbn0oKSk7XG5leHBvcnQgeyBRdWVyeWFibGVTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5YWJsZV9zdHJpbmcuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gJy4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzJztcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMvaWQnO1xuaW1wb3J0IHsgZ2V0U3ltYm9sRGVzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9zZXJpYWxpemF0aW9uJztcbmltcG9ydCB7IE1ldGFkYXRhIH0gZnJvbSAnLi9tZXRhZGF0YSc7XG5pbXBvcnQgeyBRdWVyeWFibGVTdHJpbmcgfSBmcm9tICcuL3F1ZXJ5YWJsZV9zdHJpbmcnO1xudmFyIFRhcmdldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFyZ2V0KHR5cGUsIGlkZW50aWZpZXIsIHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZE9yVGFnZ2VkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZCgpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHZhciBxdWVyeWFibGVOYW1lID0gdHlwZW9mIGlkZW50aWZpZXIgPT09ICdzeW1ib2wnID8gZ2V0U3ltYm9sRGVzY3JpcHRpb24oaWRlbnRpZmllcikgOiBpZGVudGlmaWVyO1xuICAgICAgICB0aGlzLm5hbWUgPSBuZXcgUXVlcnlhYmxlU3RyaW5nKHF1ZXJ5YWJsZU5hbWUgfHwgXCJcIik7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdmFyIG1ldGFkYXRhSXRlbSA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZWRPclRhZ2dlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhSXRlbSA9IG5ldyBNZXRhZGF0YShNRVRBREFUQV9LRVkuTkFNRURfVEFHLCBuYW1lZE9yVGFnZ2VkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lZE9yVGFnZ2VkIGluc3RhbmNlb2YgTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhSXRlbSA9IG5hbWVkT3JUYWdnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGFkYXRhSXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5wdXNoKG1ldGFkYXRhSXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5oYXNUYWcgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm1ldGFkYXRhOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG0gPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAobS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuaXNBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVGFnKE1FVEFEQVRBX0tFWS5NVUxUSV9JTkpFQ1RfVEFHKTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUubWF0Y2hlc0FycmF5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlc1RhZyhNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBRykobmFtZSk7XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLmlzTmFtZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1RhZyhNRVRBREFUQV9LRVkuTkFNRURfVEFHKTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuaXNUYWdnZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLnNvbWUoZnVuY3Rpb24gKG1ldGFkYXRhKSB7IHJldHVybiBNRVRBREFUQV9LRVkuTk9OX0NVU1RPTV9UQUdfS0VZUy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBtZXRhZGF0YS5rZXkgIT09IGtleTsgfSk7IH0pO1xuICAgIH07XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5pc09wdGlvbmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaGVzVGFnKE1FVEFEQVRBX0tFWS5PUFRJT05BTF9UQUcpKHRydWUpO1xuICAgIH07XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5nZXROYW1lZFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOYW1lZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YS5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ua2V5ID09PSBNRVRBREFUQV9LRVkuTkFNRURfVEFHOyB9KVswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuZ2V0Q3VzdG9tVGFncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUYWdnZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGEuZmlsdGVyKGZ1bmN0aW9uIChtZXRhZGF0YSkgeyByZXR1cm4gTUVUQURBVEFfS0VZLk5PTl9DVVNUT01fVEFHX0tFWVMuZXZlcnkoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gbWV0YWRhdGEua2V5ICE9PSBrZXk7IH0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLm1hdGNoZXNOYW1lZFRhZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXNUYWcoTUVUQURBVEFfS0VZLk5BTUVEX1RBRykobmFtZSk7XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLm1hdGNoZXNUYWcgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5tZXRhZGF0YTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpZiAobS5rZXkgPT09IGtleSAmJiBtLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gVGFyZ2V0O1xufSgpKTtcbmV4cG9ydCB7IFRhcmdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFyZ2V0LmpzLm1hcCIsInZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IExhenlTZXJ2aWNlSWRlbnRpZmVyIH0gZnJvbSBcIi4uL2Fubm90YXRpb24vbGF6eV9zZXJ2aWNlX2lkZW50aWZpZXJcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBUYXJnZXRUeXBlRW51bSB9IGZyb20gXCIuLi9jb25zdGFudHMvbGl0ZXJhbF90eXBlc1wiO1xuaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSBcIi4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIjtcbmltcG9ydCB7IFRhcmdldCB9IGZyb20gXCIuL3RhcmdldFwiO1xuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKG1ldGFkYXRhUmVhZGVyLCBmdW5jKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGdldEZ1bmN0aW9uTmFtZShmdW5jKTtcbiAgICByZXR1cm4gZ2V0VGFyZ2V0cyhtZXRhZGF0YVJlYWRlciwgY29uc3RydWN0b3JOYW1lLCBmdW5jLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRzKG1ldGFkYXRhUmVhZGVyLCBjb25zdHJ1Y3Rvck5hbWUsIGZ1bmMsIGlzQmFzZUNsYXNzKSB7XG4gICAgdmFyIG1ldGFkYXRhID0gbWV0YWRhdGFSZWFkZXIuZ2V0Q29uc3RydWN0b3JNZXRhZGF0YShmdW5jKTtcbiAgICB2YXIgc2VydmljZUlkZW50aWZpZXJzID0gbWV0YWRhdGEuY29tcGlsZXJHZW5lcmF0ZWRNZXRhZGF0YTtcbiAgICBpZiAoc2VydmljZUlkZW50aWZpZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG1zZyA9IEVSUk9SX01TR1MuTUlTU0lOR19JTkpFQ1RBQkxFX0FOTk9UQVRJT04gKyBcIiBcIiArIGNvbnN0cnVjdG9yTmFtZSArIFwiLlwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgdmFyIGNvbnN0cnVjdG9yQXJnc01ldGFkYXRhID0gbWV0YWRhdGEudXNlckdlbmVyYXRlZE1ldGFkYXRhO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoY29uc3RydWN0b3JBcmdzTWV0YWRhdGEpO1xuICAgIHZhciBoYXNVc2VyRGVjbGFyZWRVbmtub3duSW5qZWN0aW9ucyA9IChmdW5jLmxlbmd0aCA9PT0gMCAmJiBrZXlzLmxlbmd0aCA+IDApO1xuICAgIHZhciBoYXNPcHRpb25hbFBhcmFtZXRlcnMgPSBrZXlzLmxlbmd0aCA+IGZ1bmMubGVuZ3RoO1xuICAgIHZhciBpdGVyYXRpb25zID0gKGhhc1VzZXJEZWNsYXJlZFVua25vd25JbmplY3Rpb25zIHx8IGhhc09wdGlvbmFsUGFyYW1ldGVycykgPyBrZXlzLmxlbmd0aCA6IGZ1bmMubGVuZ3RoO1xuICAgIHZhciBjb25zdHJ1Y3RvclRhcmdldHMgPSBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldHMoaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSwgaXRlcmF0aW9ucyk7XG4gICAgdmFyIHByb3BlcnR5VGFyZ2V0cyA9IGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGZ1bmMsIGNvbnN0cnVjdG9yTmFtZSk7XG4gICAgdmFyIHRhcmdldHMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGNvbnN0cnVjdG9yVGFyZ2V0cywgdHJ1ZSksIHByb3BlcnR5VGFyZ2V0cywgdHJ1ZSk7XG4gICAgcmV0dXJuIHRhcmdldHM7XG59XG5mdW5jdGlvbiBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldChpbmRleCwgaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSkge1xuICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IGNvbnN0cnVjdG9yQXJnc01ldGFkYXRhW2luZGV4LnRvU3RyaW5nKCldIHx8IFtdO1xuICAgIHZhciBtZXRhZGF0YSA9IGZvcm1hdFRhcmdldE1ldGFkYXRhKHRhcmdldE1ldGFkYXRhKTtcbiAgICB2YXIgaXNNYW5hZ2VkID0gbWV0YWRhdGEudW5tYW5hZ2VkICE9PSB0cnVlO1xuICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IHNlcnZpY2VJZGVudGlmaWVyc1tpbmRleF07XG4gICAgdmFyIGluamVjdElkZW50aWZpZXIgPSAobWV0YWRhdGEuaW5qZWN0IHx8IG1ldGFkYXRhLm11bHRpSW5qZWN0KTtcbiAgICBzZXJ2aWNlSWRlbnRpZmllciA9IChpbmplY3RJZGVudGlmaWVyKSA/IChpbmplY3RJZGVudGlmaWVyKSA6IHNlcnZpY2VJZGVudGlmaWVyO1xuICAgIGlmIChzZXJ2aWNlSWRlbnRpZmllciBpbnN0YW5jZW9mIExhenlTZXJ2aWNlSWRlbnRpZmVyKSB7XG4gICAgICAgIHNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXIudW53cmFwKCk7XG4gICAgfVxuICAgIGlmIChpc01hbmFnZWQpIHtcbiAgICAgICAgdmFyIGlzT2JqZWN0ID0gc2VydmljZUlkZW50aWZpZXIgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBzZXJ2aWNlSWRlbnRpZmllciA9PT0gRnVuY3Rpb247XG4gICAgICAgIHZhciBpc1VuZGVmaW5lZCA9IHNlcnZpY2VJZGVudGlmaWVyID09PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc1Vua25vd25UeXBlID0gKGlzT2JqZWN0IHx8IGlzRnVuY3Rpb24gfHwgaXNVbmRlZmluZWQpO1xuICAgICAgICBpZiAoIWlzQmFzZUNsYXNzICYmIGlzVW5rbm93blR5cGUpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSBFUlJPUl9NU0dTLk1JU1NJTkdfSU5KRUNUX0FOTk9UQVRJT04gKyBcIiBhcmd1bWVudCBcIiArIGluZGV4ICsgXCIgaW4gY2xhc3MgXCIgKyBjb25zdHJ1Y3Rvck5hbWUgKyBcIi5cIjtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YXJnZXQgPSBuZXcgVGFyZ2V0KFRhcmdldFR5cGVFbnVtLkNvbnN0cnVjdG9yQXJndW1lbnQsIG1ldGFkYXRhLnRhcmdldE5hbWUsIHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgdGFyZ2V0Lm1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGE7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JBcmdzQXNUYXJnZXRzKGlzQmFzZUNsYXNzLCBjb25zdHJ1Y3Rvck5hbWUsIHNlcnZpY2VJZGVudGlmaWVycywgY29uc3RydWN0b3JBcmdzTWV0YWRhdGEsIGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgdGFyZ2V0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldChpbmRleCwgaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSk7XG4gICAgICAgIGlmICh0YXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRhcmdldHMucHVzaCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRzO1xufVxuZnVuY3Rpb24gX2dldFNlcnZpY2VJZGVudGlmaWVyRm9yUHJvcGVydHkoaW5qZWN0LCBtdWx0aUluamVjdCwgcHJvcGVydHlOYW1lLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgc2VydmljZUlkZW50aWZpZXIgPSAoaW5qZWN0IHx8IG11bHRpSW5qZWN0KTtcbiAgICBpZiAoc2VydmljZUlkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbXNnID0gRVJST1JfTVNHUy5NSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiArIFwiIGZvciBwcm9wZXJ0eSBcIiArIFN0cmluZyhwcm9wZXJ0eU5hbWUpICsgXCIgaW4gY2xhc3MgXCIgKyBjbGFzc05hbWUgKyBcIi5cIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlSWRlbnRpZmllcjtcbn1cbmZ1bmN0aW9uIGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGNvbnN0cnVjdG9yRnVuYywgY29uc3RydWN0b3JOYW1lKSB7XG4gICAgdmFyIGNsYXNzUHJvcHNNZXRhZGF0YSA9IG1ldGFkYXRhUmVhZGVyLmdldFByb3BlcnRpZXNNZXRhZGF0YShjb25zdHJ1Y3RvckZ1bmMpO1xuICAgIHZhciB0YXJnZXRzID0gW107XG4gICAgdmFyIHN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGNsYXNzUHJvcHNNZXRhZGF0YSk7XG4gICAgdmFyIHN0cmluZ0tleXMgPSBPYmplY3Qua2V5cyhjbGFzc1Byb3BzTWV0YWRhdGEpO1xuICAgIHZhciBrZXlzID0gc3RyaW5nS2V5cy5jb25jYXQoc3ltYm9sS2V5cyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzEgPSBrZXlzOyBfaSA8IGtleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XG4gICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IGNsYXNzUHJvcHNNZXRhZGF0YVtrZXldO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSBmb3JtYXRUYXJnZXRNZXRhZGF0YSh0YXJnZXRNZXRhZGF0YSk7XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gbWV0YWRhdGEudGFyZ2V0TmFtZSB8fCBrZXk7XG4gICAgICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IF9nZXRTZXJ2aWNlSWRlbnRpZmllckZvclByb3BlcnR5KG1ldGFkYXRhLmluamVjdCwgbWV0YWRhdGEubXVsdGlJbmplY3QsIGtleSwgY29uc3RydWN0b3JOYW1lKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IG5ldyBUYXJnZXQoVGFyZ2V0VHlwZUVudW0uQ2xhc3NQcm9wZXJ0eSwgaWRlbnRpZmllciwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICB0YXJnZXQubWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YTtcbiAgICAgICAgdGFyZ2V0cy5wdXNoKHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBiYXNlQ29uc3RydWN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY29uc3RydWN0b3JGdW5jLnByb3RvdHlwZSkuY29uc3RydWN0b3I7XG4gICAgaWYgKGJhc2VDb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgICAgIHZhciBiYXNlVGFyZ2V0cyA9IGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGJhc2VDb25zdHJ1Y3RvciwgY29uc3RydWN0b3JOYW1lKTtcbiAgICAgICAgdGFyZ2V0cyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgdGFyZ2V0cywgdHJ1ZSksIGJhc2VUYXJnZXRzLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldHM7XG59XG5mdW5jdGlvbiBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQobWV0YWRhdGFSZWFkZXIsIGZ1bmMpIHtcbiAgICB2YXIgYmFzZUNvbnN0cnVjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGZ1bmMucHJvdG90eXBlKS5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoYmFzZUNvbnN0cnVjdG9yICE9PSBPYmplY3QpIHtcbiAgICAgICAgdmFyIGJhc2VDb25zdHJ1Y3Rvck5hbWUgPSBnZXRGdW5jdGlvbk5hbWUoYmFzZUNvbnN0cnVjdG9yKTtcbiAgICAgICAgdmFyIHRhcmdldHMgPSBnZXRUYXJnZXRzKG1ldGFkYXRhUmVhZGVyLCBiYXNlQ29uc3RydWN0b3JOYW1lLCBiYXNlQ29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSB0YXJnZXRzLm1hcChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5tZXRhZGF0YS5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ua2V5ID09PSBNRVRBREFUQV9LRVkuVU5NQU5BR0VEX1RBRzsgfSk7IH0pO1xuICAgICAgICB2YXIgdW5tYW5hZ2VkQ291bnQgPSBbXS5jb25jYXQuYXBwbHkoW10sIG1ldGFkYXRhKS5sZW5ndGg7XG4gICAgICAgIHZhciBkZXBlbmRlbmN5Q291bnQgPSB0YXJnZXRzLmxlbmd0aCAtIHVubWFuYWdlZENvdW50O1xuICAgICAgICBpZiAoZGVwZW5kZW5jeUNvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlcGVuZGVuY3lDb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQobWV0YWRhdGFSZWFkZXIsIGJhc2VDb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdFRhcmdldE1ldGFkYXRhKHRhcmdldE1ldGFkYXRhKSB7XG4gICAgdmFyIHRhcmdldE1ldGFkYXRhTWFwID0ge307XG4gICAgdGFyZ2V0TWV0YWRhdGEuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICB0YXJnZXRNZXRhZGF0YU1hcFttLmtleS50b1N0cmluZygpXSA9IG0udmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5qZWN0OiB0YXJnZXRNZXRhZGF0YU1hcFtNRVRBREFUQV9LRVkuSU5KRUNUX1RBR10sXG4gICAgICAgIG11bHRpSW5qZWN0OiB0YXJnZXRNZXRhZGF0YU1hcFtNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBR10sXG4gICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE1ldGFkYXRhTWFwW01FVEFEQVRBX0tFWS5OQU1FX1RBR10sXG4gICAgICAgIHVubWFuYWdlZDogdGFyZ2V0TWV0YWRhdGFNYXBbTUVUQURBVEFfS0VZLlVOTUFOQUdFRF9UQUddXG4gICAgfTtcbn1cbmV4cG9ydCB7IGdldERlcGVuZGVuY2llcywgZ2V0QmFzZUNsYXNzRGVwZW5kZW5jeUNvdW50LCBnZXRGdW5jdGlvbk5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZmxlY3Rpb25fdXRpbHMuanMubWFwIiwiaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbnZhciBSZXF1ZXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRSZXF1ZXN0LCBiaW5kaW5ncywgdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZCgpO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMucGFyZW50Q29udGV4dCA9IHBhcmVudENvbnRleHQ7XG4gICAgICAgIHRoaXMucGFyZW50UmVxdWVzdCA9IHBhcmVudFJlcXVlc3Q7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmNoaWxkUmVxdWVzdHMgPSBbXTtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IChBcnJheS5pc0FycmF5KGJpbmRpbmdzKSA/IGJpbmRpbmdzIDogW2JpbmRpbmdzXSk7XG4gICAgICAgIHRoaXMucmVxdWVzdFNjb3BlID0gcGFyZW50UmVxdWVzdCA9PT0gbnVsbFxuICAgICAgICAgICAgPyBuZXcgTWFwKClcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgUmVxdWVzdC5wcm90b3R5cGUuYWRkQ2hpbGRSZXF1ZXN0ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5ncywgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5ldyBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCB0aGlzLnBhcmVudENvbnRleHQsIHRoaXMsIGJpbmRpbmdzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLmNoaWxkUmVxdWVzdHMucHVzaChjaGlsZCk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICAgIHJldHVybiBSZXF1ZXN0O1xufSgpKTtcbmV4cG9ydCB7IFJlcXVlc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QuanMubWFwIiwiaW1wb3J0IHsgQmluZGluZ0NvdW50IH0gZnJvbSBcIi4uL2JpbmRpbmdzL2JpbmRpbmdfY291bnRcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0sIFRhcmdldFR5cGVFbnVtIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzXCI7XG5pbXBvcnQgKiBhcyBNRVRBREFUQV9LRVkgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzXCI7XG5pbXBvcnQgeyBpc1N0YWNrT3ZlcmZsb3dFeGVwdGlvbiB9IGZyb20gXCIuLi91dGlscy9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBjaXJjdWxhckRlcGVuZGVuY3lUb0V4Y2VwdGlvbiwgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZywgbGlzdE1ldGFkYXRhRm9yVGFyZ2V0LCBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIgfSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7IE1ldGFkYXRhIH0gZnJvbSBcIi4vbWV0YWRhdGFcIjtcbmltcG9ydCB7IFBsYW4gfSBmcm9tIFwiLi9wbGFuXCI7XG5pbXBvcnQgeyBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQsIGdldERlcGVuZGVuY2llcywgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSBcIi4vcmVmbGVjdGlvbl91dGlsc1wiO1xuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCB7IFRhcmdldCB9IGZyb20gXCIuL3RhcmdldFwiO1xuZnVuY3Rpb24gZ2V0QmluZGluZ0RpY3Rpb25hcnkoY250bnIpIHtcbiAgICByZXR1cm4gY250bnIuX2JpbmRpbmdEaWN0aW9uYXJ5O1xufVxuZnVuY3Rpb24gX2NyZWF0ZVRhcmdldChpc011bHRpSW5qZWN0LCB0YXJnZXRUeXBlLCBzZXJ2aWNlSWRlbnRpZmllciwgbmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBtZXRhZGF0YUtleSA9IGlzTXVsdGlJbmplY3QgPyBNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBRyA6IE1FVEFEQVRBX0tFWS5JTkpFQ1RfVEFHO1xuICAgIHZhciBpbmplY3RNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShtZXRhZGF0YUtleSwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIHZhciB0YXJnZXQgPSBuZXcgVGFyZ2V0KHRhcmdldFR5cGUsIG5hbWUsIHNlcnZpY2VJZGVudGlmaWVyLCBpbmplY3RNZXRhZGF0YSk7XG4gICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciB0YWdNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShrZXksIHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0Lm1ldGFkYXRhLnB1c2godGFnTWV0YWRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX2dldEFjdGl2ZUJpbmRpbmdzKG1ldGFkYXRhUmVhZGVyLCBhdm9pZENvbnN0cmFpbnRzLCBjb250ZXh0LCBwYXJlbnRSZXF1ZXN0LCB0YXJnZXQpIHtcbiAgICB2YXIgYmluZGluZ3MgPSBnZXRCaW5kaW5ncyhjb250ZXh0LmNvbnRhaW5lciwgdGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICB2YXIgYWN0aXZlQmluZGluZ3MgPSBbXTtcbiAgICBpZiAoYmluZGluZ3MubGVuZ3RoID09PSBCaW5kaW5nQ291bnQuTm9CaW5kaW5nc0F2YWlsYWJsZSAmJlxuICAgICAgICBjb250ZXh0LmNvbnRhaW5lci5vcHRpb25zLmF1dG9CaW5kSW5qZWN0YWJsZSAmJlxuICAgICAgICB0eXBlb2YgdGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbWV0YWRhdGFSZWFkZXIuZ2V0Q29uc3RydWN0b3JNZXRhZGF0YSh0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpLmNvbXBpbGVyR2VuZXJhdGVkTWV0YWRhdGEpIHtcbiAgICAgICAgY29udGV4dC5jb250YWluZXIuYmluZCh0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpLnRvU2VsZigpO1xuICAgICAgICBiaW5kaW5ncyA9IGdldEJpbmRpbmdzKGNvbnRleHQuY29udGFpbmVyLCB0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICBpZiAoIWF2b2lkQ29uc3RyYWludHMpIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBiaW5kaW5ncy5maWx0ZXIoZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllciwgY29udGV4dCwgcGFyZW50UmVxdWVzdCwgYmluZGluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiBiaW5kaW5nLmNvbnN0cmFpbnQocmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBiaW5kaW5ncztcbiAgICB9XG4gICAgX3ZhbGlkYXRlQWN0aXZlQmluZGluZ0NvdW50KHRhcmdldC5zZXJ2aWNlSWRlbnRpZmllciwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCwgY29udGV4dC5jb250YWluZXIpO1xuICAgIHJldHVybiBhY3RpdmVCaW5kaW5ncztcbn1cbmZ1bmN0aW9uIF92YWxpZGF0ZUFjdGl2ZUJpbmRpbmdDb3VudChzZXJ2aWNlSWRlbnRpZmllciwgYmluZGluZ3MsIHRhcmdldCwgY29udGFpbmVyKSB7XG4gICAgc3dpdGNoIChiaW5kaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSBCaW5kaW5nQ291bnQuTm9CaW5kaW5nc0F2YWlsYWJsZTpcbiAgICAgICAgICAgIGlmICh0YXJnZXQuaXNPcHRpb25hbCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VJZGVudGlmaWVyU3RyaW5nID0gZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyhzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9IEVSUk9SX01TR1MuTk9UX1JFR0lTVEVSRUQ7XG4gICAgICAgICAgICAgICAgbXNnICs9IGxpc3RNZXRhZGF0YUZvclRhcmdldChzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBtc2cgKz0gbGlzdFJlZ2lzdGVyZWRCaW5kaW5nc0ZvclNlcnZpY2VJZGVudGlmaWVyKGNvbnRhaW5lciwgc2VydmljZUlkZW50aWZpZXJTdHJpbmcsIGdldEJpbmRpbmdzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBCaW5kaW5nQ291bnQuT25seU9uZUJpbmRpbmdBdmFpbGFibGU6XG4gICAgICAgICAgICByZXR1cm4gYmluZGluZ3M7XG4gICAgICAgIGNhc2UgQmluZGluZ0NvdW50Lk11bHRpcGxlQmluZGluZ3NBdmFpbGFibGU6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoIXRhcmdldC5pc0FycmF5KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXJTdHJpbmcgPSBnZXRTZXJ2aWNlSWRlbnRpZmllckFzU3RyaW5nKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gRVJST1JfTVNHUy5BTUJJR1VPVVNfTUFUQ0ggKyBcIiBcIiArIHNlcnZpY2VJZGVudGlmaWVyU3RyaW5nO1xuICAgICAgICAgICAgICAgIG1zZyArPSBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgZ2V0QmluZGluZ3MpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdzO1xuICAgICAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgYXZvaWRDb25zdHJhaW50cywgc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIHBhcmVudFJlcXVlc3QsIHRhcmdldCkge1xuICAgIHZhciBhY3RpdmVCaW5kaW5ncztcbiAgICB2YXIgY2hpbGRSZXF1ZXN0O1xuICAgIGlmIChwYXJlbnRSZXF1ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZUJpbmRpbmdzID0gX2dldEFjdGl2ZUJpbmRpbmdzKG1ldGFkYXRhUmVhZGVyLCBhdm9pZENvbnN0cmFpbnRzLCBjb250ZXh0LCBudWxsLCB0YXJnZXQpO1xuICAgICAgICBjaGlsZFJlcXVlc3QgPSBuZXcgUmVxdWVzdChzZXJ2aWNlSWRlbnRpZmllciwgY29udGV4dCwgbnVsbCwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCk7XG4gICAgICAgIHZhciB0aGVQbGFuID0gbmV3IFBsYW4oY29udGV4dCwgY2hpbGRSZXF1ZXN0KTtcbiAgICAgICAgY29udGV4dC5hZGRQbGFuKHRoZVBsYW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBfZ2V0QWN0aXZlQmluZGluZ3MobWV0YWRhdGFSZWFkZXIsIGF2b2lkQ29uc3RyYWludHMsIGNvbnRleHQsIHBhcmVudFJlcXVlc3QsIHRhcmdldCk7XG4gICAgICAgIGNoaWxkUmVxdWVzdCA9IHBhcmVudFJlcXVlc3QuYWRkQ2hpbGRSZXF1ZXN0KHRhcmdldC5zZXJ2aWNlSWRlbnRpZmllciwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCk7XG4gICAgfVxuICAgIGFjdGl2ZUJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIHN1YkNoaWxkUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGlmICh0YXJnZXQuaXNBcnJheSgpKSB7XG4gICAgICAgICAgICBzdWJDaGlsZFJlcXVlc3QgPSBjaGlsZFJlcXVlc3QuYWRkQ2hpbGRSZXF1ZXN0KGJpbmRpbmcuc2VydmljZUlkZW50aWZpZXIsIGJpbmRpbmcsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5jYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YkNoaWxkUmVxdWVzdCA9IGNoaWxkUmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmluZGluZy50eXBlID09PSBCaW5kaW5nVHlwZUVudW0uSW5zdGFuY2UgJiYgYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMobWV0YWRhdGFSZWFkZXIsIGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlKTtcbiAgICAgICAgICAgIGlmICghY29udGV4dC5jb250YWluZXIub3B0aW9ucy5za2lwQmFzZUNsYXNzQ2hlY2tzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudCA9IGdldEJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudChtZXRhZGF0YVJlYWRlciwgYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoIDwgYmFzZUNsYXNzRGVwZW5kZW5jeUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IEVSUk9SX01TR1MuQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSChnZXRGdW5jdGlvbk5hbWUoYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgZmFsc2UsIGRlcGVuZGVuY3kuc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIHN1YkNoaWxkUmVxdWVzdCwgZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0QmluZGluZ3MoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIHZhciBiaW5kaW5ncyA9IFtdO1xuICAgIHZhciBiaW5kaW5nRGljdGlvbmFyeSA9IGdldEJpbmRpbmdEaWN0aW9uYXJ5KGNvbnRhaW5lcik7XG4gICAgaWYgKGJpbmRpbmdEaWN0aW9uYXJ5Lmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5nRGljdGlvbmFyeS5nZXQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250YWluZXIucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGJpbmRpbmdzID0gZ2V0QmluZGluZ3MoY29udGFpbmVyLnBhcmVudCwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ3M7XG59XG5mdW5jdGlvbiBwbGFuKG1ldGFkYXRhUmVhZGVyLCBjb250YWluZXIsIGlzTXVsdGlJbmplY3QsIHRhcmdldFR5cGUsIHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlLCBhdm9pZENvbnN0cmFpbnRzKSB7XG4gICAgaWYgKGF2b2lkQ29uc3RyYWludHMgPT09IHZvaWQgMCkgeyBhdm9pZENvbnN0cmFpbnRzID0gZmFsc2U7IH1cbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KGNvbnRhaW5lcik7XG4gICAgdmFyIHRhcmdldCA9IF9jcmVhdGVUYXJnZXQoaXNNdWx0aUluamVjdCwgdGFyZ2V0VHlwZSwgc2VydmljZUlkZW50aWZpZXIsIFwiXCIsIGtleSwgdmFsdWUpO1xuICAgIHRyeSB7XG4gICAgICAgIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgYXZvaWRDb25zdHJhaW50cywgc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIG51bGwsIHRhcmdldCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGlzU3RhY2tPdmVyZmxvd0V4ZXB0aW9uKGVycm9yKSkge1xuICAgICAgICAgICAgY2lyY3VsYXJEZXBlbmRlbmN5VG9FeGNlcHRpb24oY29udGV4dC5wbGFuLnJvb3RSZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVNb2NrUmVxdWVzdChjb250YWluZXIsIHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBUYXJnZXQoVGFyZ2V0VHlwZUVudW0uVmFyaWFibGUsIFwiXCIsIHNlcnZpY2VJZGVudGlmaWVyLCBuZXcgTWV0YWRhdGEoa2V5LCB2YWx1ZSkpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoY29udGFpbmVyKTtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCBjb250ZXh0LCBudWxsLCBbXSwgdGFyZ2V0KTtcbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cbmV4cG9ydCB7IHBsYW4sIGNyZWF0ZU1vY2tSZXF1ZXN0LCBnZXRCaW5kaW5nRGljdGlvbmFyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhbm5lci5qcy5tYXAiLCJmdW5jdGlvbiBpc1Byb21pc2Uob2JqZWN0KSB7XG4gICAgdmFyIGlzT2JqZWN0T3JGdW5jdGlvbiA9ICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHx8IHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbic7XG4gICAgcmV0dXJuIGlzT2JqZWN0T3JGdW5jdGlvbiAmJiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzUHJvbWlzZU9yQ29udGFpbnNQcm9taXNlKG9iamVjdCkge1xuICAgIGlmIChpc1Byb21pc2Uob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3Quc29tZShpc1Byb21pc2UpO1xufVxuZXhwb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IEJpbmRpbmdTY29wZUVudW0gfSBmcm9tIFwiLi4vaW52ZXJzaWZ5XCI7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tIFwiLi4vdXRpbHMvYXN5bmNcIjtcbmV4cG9ydCB2YXIgdHJ5R2V0RnJvbVNjb3BlID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSwgYmluZGluZykge1xuICAgIGlmICgoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b24pICYmIGJpbmRpbmcuYWN0aXZhdGVkKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nLmNhY2hlO1xuICAgIH1cbiAgICBpZiAoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5SZXF1ZXN0ICYmXG4gICAgICAgIHJlcXVlc3RTY29wZS5oYXMoYmluZGluZy5pZCkpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RTY29wZS5nZXQoYmluZGluZy5pZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgc2F2ZVRvU2NvcGUgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCBiaW5kaW5nLCByZXN1bHQpIHtcbiAgICBpZiAoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b24pIHtcbiAgICAgICAgX3NhdmVUb1NpbmdsZXRvblNjb3BlKGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChiaW5kaW5nLnNjb3BlID09PSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3QpIHtcbiAgICAgICAgX3NhdmVUb1JlcXVlc3RTY29wZShyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgfVxufTtcbnZhciBfc2F2ZVRvUmVxdWVzdFNjb3BlID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSwgYmluZGluZywgcmVzdWx0KSB7XG4gICAgaWYgKCFyZXF1ZXN0U2NvcGUuaGFzKGJpbmRpbmcuaWQpKSB7XG4gICAgICAgIHJlcXVlc3RTY29wZS5zZXQoYmluZGluZy5pZCwgcmVzdWx0KTtcbiAgICB9XG59O1xudmFyIF9zYXZlVG9TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uIChiaW5kaW5nLCByZXN1bHQpIHtcbiAgICBiaW5kaW5nLmNhY2hlID0gcmVzdWx0O1xuICAgIGJpbmRpbmcuYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCBfc2F2ZUFzeW5jUmVzdWx0VG9TaW5nbGV0b25TY29wZShiaW5kaW5nLCByZXN1bHQpO1xuICAgIH1cbn07XG52YXIgX3NhdmVBc3luY1Jlc3VsdFRvU2luZ2xldG9uU2NvcGUgPSBmdW5jdGlvbiAoYmluZGluZywgYXN5bmNSZXN1bHQpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCwgZXhfMTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgM10pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgYXN5bmNSZXN1bHRdO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmNhY2hlID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZXhfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmNhY2hlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRocm93IGV4XzE7XG4gICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMl07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUuanMubWFwIiwiZXhwb3J0IHZhciBGYWN0b3J5VHlwZTtcbihmdW5jdGlvbiAoRmFjdG9yeVR5cGUpIHtcbiAgICBGYWN0b3J5VHlwZVtcIkR5bmFtaWNWYWx1ZVwiXSA9IFwidG9EeW5hbWljVmFsdWVcIjtcbiAgICBGYWN0b3J5VHlwZVtcIkZhY3RvcnlcIl0gPSBcInRvRmFjdG9yeVwiO1xuICAgIEZhY3RvcnlUeXBlW1wiUHJvdmlkZXJcIl0gPSBcInRvUHJvdmlkZXJcIjtcbn0pKEZhY3RvcnlUeXBlIHx8IChGYWN0b3J5VHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWN0b3J5X3R5cGUuanMubWFwIiwiaW1wb3J0IHsgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyB9IGZyb20gXCIuLi9pbnZlcnNpZnlcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IEZhY3RvcnlUeXBlIH0gZnJvbSBcIi4vZmFjdG9yeV90eXBlXCI7XG5leHBvcnQgdmFyIG11bHRpQmluZFRvU2VydmljZSA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0eXBlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB0eXBlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGNvbnRhaW5lci5iaW5kKHQpLnRvU2VydmljZShzZXJ2aWNlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGVuc3VyZUZ1bGx5Qm91bmQgPSBmdW5jdGlvbiAoYmluZGluZykge1xuICAgIHZhciBib3VuZFZhbHVlID0gbnVsbDtcbiAgICBzd2l0Y2ggKGJpbmRpbmcudHlwZSkge1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5Db25zdGFudFZhbHVlOlxuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5GdW5jdGlvbjpcbiAgICAgICAgICAgIGJvdW5kVmFsdWUgPSBiaW5kaW5nLmNhY2hlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkNvbnN0cnVjdG9yOlxuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5JbnN0YW5jZTpcbiAgICAgICAgICAgIGJvdW5kVmFsdWUgPSBiaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5EeW5hbWljVmFsdWU6XG4gICAgICAgICAgICBib3VuZFZhbHVlID0gYmluZGluZy5keW5hbWljVmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI6XG4gICAgICAgICAgICBib3VuZFZhbHVlID0gYmluZGluZy5wcm92aWRlcjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5GYWN0b3J5OlxuICAgICAgICAgICAgYm91bmRWYWx1ZSA9IGJpbmRpbmcuZmFjdG9yeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYm91bmRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXJBc1N0cmluZyA9IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcoYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfQklORElOR19UWVBFICsgXCIgXCIgKyBzZXJ2aWNlSWRlbnRpZmllckFzU3RyaW5nKTtcbiAgICB9XG59O1xuZXhwb3J0IHZhciBnZXRGYWN0b3J5RGV0YWlscyA9IGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgc3dpdGNoIChiaW5kaW5nLnR5cGUpIHtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uRmFjdG9yeTpcbiAgICAgICAgICAgIHJldHVybiB7IGZhY3Rvcnk6IGJpbmRpbmcuZmFjdG9yeSwgZmFjdG9yeVR5cGU6IEZhY3RvcnlUeXBlLkZhY3RvcnkgfTtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI6XG4gICAgICAgICAgICByZXR1cm4geyBmYWN0b3J5OiBiaW5kaW5nLnByb3ZpZGVyLCBmYWN0b3J5VHlwZTogRmFjdG9yeVR5cGUuUHJvdmlkZXIgfTtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uRHluYW1pY1ZhbHVlOlxuICAgICAgICAgICAgcmV0dXJuIHsgZmFjdG9yeTogYmluZGluZy5keW5hbWljVmFsdWUsIGZhY3RvcnlUeXBlOiBGYWN0b3J5VHlwZS5EeW5hbWljVmFsdWUgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZmFjdG9yeSB0eXBlIFwiICsgYmluZGluZy50eXBlKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ191dGlscy5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IE9OX0RFQUNUSVZBVElPTl9FUlJPUiwgUE9TVF9DT05TVFJVQ1RfRVJST1IsIFBSRV9ERVNUUk9ZX0VSUk9SIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtLCBUYXJnZXRUeXBlRW51bSB9IGZyb20gXCIuLi9jb25zdGFudHMvbGl0ZXJhbF90eXBlc1wiO1xuaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuZnVuY3Rpb24gX3Jlc29sdmVSZXF1ZXN0cyhjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIHJldHVybiBjaGlsZFJlcXVlc3RzLnJlZHVjZShmdW5jdGlvbiAocmVzb2x2ZWRSZXF1ZXN0cywgY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgIHZhciBpbmplY3Rpb24gPSByZXNvbHZlUmVxdWVzdChjaGlsZFJlcXVlc3QpO1xuICAgICAgICB2YXIgdGFyZ2V0VHlwZSA9IGNoaWxkUmVxdWVzdC50YXJnZXQudHlwZTtcbiAgICAgICAgaWYgKHRhcmdldFR5cGUgPT09IFRhcmdldFR5cGVFbnVtLkNvbnN0cnVjdG9yQXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMuY29uc3RydWN0b3JJbmplY3Rpb25zLnB1c2goaW5qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMucHJvcGVydHlSZXF1ZXN0cy5wdXNoKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgICAgICByZXNvbHZlZFJlcXVlc3RzLnByb3BlcnR5SW5qZWN0aW9ucy5wdXNoKGluamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXNvbHZlZFJlcXVlc3RzLmlzQXN5bmMpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMuaXNBc3luYyA9IGlzUHJvbWlzZU9yQ29udGFpbnNQcm9taXNlKGluamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUmVxdWVzdHM7XG4gICAgfSwgeyBjb25zdHJ1Y3RvckluamVjdGlvbnM6IFtdLCBwcm9wZXJ0eUluamVjdGlvbnM6IFtdLCBwcm9wZXJ0eVJlcXVlc3RzOiBbXSwgaXNBc3luYzogZmFsc2UgfSk7XG59XG5mdW5jdGlvbiBfY3JlYXRlSW5zdGFuY2UoY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKGNoaWxkUmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBfcmVzb2x2ZVJlcXVlc3RzKGNoaWxkUmVxdWVzdHMsIHJlc29sdmVSZXF1ZXN0KTtcbiAgICAgICAgdmFyIGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnNBcmcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzb2x2ZWQpLCB7IGNvbnN0cjogY29uc3RyIH0pO1xuICAgICAgICBpZiAocmVzb2x2ZWQuaXNBc3luYykge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FzeW5jKGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnNBcmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9ucyhjcmVhdGVJbnN0YW5jZVdpdGhJbmplY3Rpb25zQXJnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IGNvbnN0cigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9ucyhhcmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyAoKF9hID0gYXJncy5jb25zdHIpLmJpbmQuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyZ3MuY29uc3RydWN0b3JJbmplY3Rpb25zLCBmYWxzZSkpKSgpO1xuICAgIGFyZ3MucHJvcGVydHlSZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyLCBpbmRleCkge1xuICAgICAgICB2YXIgcHJvcGVydHkgPSByLnRhcmdldC5pZGVudGlmaWVyO1xuICAgICAgICB2YXIgaW5qZWN0aW9uID0gYXJncy5wcm9wZXJ0eUluamVjdGlvbnNbaW5kZXhdO1xuICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBpbmplY3Rpb247XG4gICAgfSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FzeW5jKGFyZ3MpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvckluamVjdGlvbnMsIHByb3BlcnR5SW5qZWN0aW9ucztcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBwb3NzaWJseVdhaXRJbmplY3Rpb25zKGFyZ3MuY29uc3RydWN0b3JJbmplY3Rpb25zKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckluamVjdGlvbnMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgcG9zc2libHlXYWl0SW5qZWN0aW9ucyhhcmdzLnByb3BlcnR5SW5qZWN0aW9ucyldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlJbmplY3Rpb25zID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnMoX19hc3NpZ24oX19hc3NpZ24oe30sIGFyZ3MpLCB7IGNvbnN0cnVjdG9ySW5qZWN0aW9uczogY29uc3RydWN0b3JJbmplY3Rpb25zLCBwcm9wZXJ0eUluamVjdGlvbnM6IHByb3BlcnR5SW5qZWN0aW9ucyB9KSldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHBvc3NpYmx5V2FpdEluamVjdGlvbnMocG9zc2libGVQcm9taXNlaW5qZWN0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluamVjdGlvbnMsIF9pLCBwb3NzaWJsZVByb21pc2VpbmplY3Rpb25zXzEsIGluamVjdGlvbjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgaW5qZWN0aW9ucyA9IFtdO1xuICAgICAgICAgICAgZm9yIChfaSA9IDAsIHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnNfMSA9IHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnM7IF9pIDwgcG9zc2libGVQcm9taXNlaW5qZWN0aW9uc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGluamVjdGlvbiA9IHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnNfMVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmplY3Rpb25zLnB1c2goUHJvbWlzZS5hbGwoaW5qZWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmplY3Rpb25zLnB1c2goaW5qZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWzIsIFByb21pc2UuYWxsKGluamVjdGlvbnMpXTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZ2V0SW5zdGFuY2VBZnRlclBvc3RDb25zdHJ1Y3QoY29uc3RyLCByZXN1bHQpIHtcbiAgICB2YXIgcG9zdENvbnN0cnVjdFJlc3VsdCA9IF9wb3N0Q29uc3RydWN0KGNvbnN0ciwgcmVzdWx0KTtcbiAgICBpZiAoaXNQcm9taXNlKHBvc3RDb25zdHJ1Y3RSZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBwb3N0Q29uc3RydWN0UmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0OyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gX3Bvc3RDb25zdHJ1Y3QoY29uc3RyLCBpbnN0YW5jZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKFJlZmxlY3QuaGFzTWV0YWRhdGEoTUVUQURBVEFfS0VZLlBPU1RfQ09OU1RSVUNULCBjb25zdHIpKSB7XG4gICAgICAgIHZhciBkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRBREFUQV9LRVkuUE9TVF9DT05TVFJVQ1QsIGNvbnN0cik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gaW5zdGFuY2UpW2RhdGEudmFsdWVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihQT1NUX0NPTlNUUlVDVF9FUlJPUihjb25zdHIubmFtZSwgZS5tZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfdmFsaWRhdGVJbnN0YW5jZVJlc29sdXRpb24oYmluZGluZywgY29uc3RyKSB7XG4gICAgaWYgKGJpbmRpbmcuc2NvcGUgIT09IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uKSB7XG4gICAgICAgIF90aHJvd0lmSGFuZGxpbmdEZWFjdGl2YXRpb24oYmluZGluZywgY29uc3RyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfdGhyb3dJZkhhbmRsaW5nRGVhY3RpdmF0aW9uKGJpbmRpbmcsIGNvbnN0cikge1xuICAgIHZhciBzY29wZUVycm9yTWVzc2FnZSA9IFwiQ2xhc3MgY2Fubm90IGJlIGluc3RhbnRpYXRlZCBpbiBcIiArIChiaW5kaW5nLnNjb3BlID09PSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3QgP1xuICAgICAgICBcInJlcXVlc3RcIiA6XG4gICAgICAgIFwidHJhbnNpZW50XCIpICsgXCIgc2NvcGUuXCI7XG4gICAgaWYgKHR5cGVvZiBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE9OX0RFQUNUSVZBVElPTl9FUlJPUihjb25zdHIubmFtZSwgc2NvcGVFcnJvck1lc3NhZ2UpKTtcbiAgICB9XG4gICAgaWYgKFJlZmxlY3QuaGFzTWV0YWRhdGEoTUVUQURBVEFfS0VZLlBSRV9ERVNUUk9ZLCBjb25zdHIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihQUkVfREVTVFJPWV9FUlJPUihjb25zdHIubmFtZSwgc2NvcGVFcnJvck1lc3NhZ2UpKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSW5zdGFuY2UoYmluZGluZywgY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIF92YWxpZGF0ZUluc3RhbmNlUmVzb2x1dGlvbihiaW5kaW5nLCBjb25zdHIpO1xuICAgIHZhciByZXN1bHQgPSBfY3JlYXRlSW5zdGFuY2UoY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCk7XG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRSZXN1bHQpIHsgcmV0dXJuIF9nZXRJbnN0YW5jZUFmdGVyUG9zdENvbnN0cnVjdChjb25zdHIsIHJlc29sdmVkUmVzdWx0KTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2dldEluc3RhbmNlQWZ0ZXJQb3N0Q29uc3RydWN0KGNvbnN0ciwgcmVzdWx0KTtcbiAgICB9XG59XG5leHBvcnQgeyByZXNvbHZlSW5zdGFuY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RhbnRpYXRpb24uanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IGdldEJpbmRpbmdEaWN0aW9uYXJ5IH0gZnJvbSBcIi4uL3BsYW5uaW5nL3BsYW5uZXJcIjtcbmltcG9ydCB7IHNhdmVUb1Njb3BlLCB0cnlHZXRGcm9tU2NvcGUgfSBmcm9tIFwiLi4vc2NvcGUvc2NvcGVcIjtcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuaW1wb3J0IHsgZ2V0RmFjdG9yeURldGFpbHMsIGVuc3VyZUZ1bGx5Qm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvYmluZGluZ191dGlsc1wiO1xuaW1wb3J0IHsgdHJ5QW5kVGhyb3dFcnJvcklmU3RhY2tPdmVyZmxvdyB9IGZyb20gXCIuLi91dGlscy9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyByZXNvbHZlSW5zdGFuY2UgfSBmcm9tIFwiLi9pbnN0YW50aWF0aW9uXCI7XG52YXIgX3Jlc29sdmVSZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LnBhcmVudENvbnRleHQuc2V0Q3VycmVudFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHZhciBiaW5kaW5ncyA9IHJlcXVlc3QuYmluZGluZ3M7XG4gICAgICAgIHZhciBjaGlsZFJlcXVlc3RzID0gcmVxdWVzdC5jaGlsZFJlcXVlc3RzO1xuICAgICAgICB2YXIgdGFyZ2V0SXNBbkFycmF5ID0gcmVxdWVzdC50YXJnZXQgJiYgcmVxdWVzdC50YXJnZXQuaXNBcnJheSgpO1xuICAgICAgICB2YXIgdGFyZ2V0UGFyZW50SXNOb3RBbkFycmF5ID0gIXJlcXVlc3QucGFyZW50UmVxdWVzdCB8fFxuICAgICAgICAgICAgIXJlcXVlc3QucGFyZW50UmVxdWVzdC50YXJnZXQgfHxcbiAgICAgICAgICAgICFyZXF1ZXN0LnRhcmdldCB8fFxuICAgICAgICAgICAgIXJlcXVlc3QucGFyZW50UmVxdWVzdC50YXJnZXQubWF0Y2hlc0FycmF5KHJlcXVlc3QudGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKHRhcmdldElzQW5BcnJheSAmJiB0YXJnZXRQYXJlbnRJc05vdEFuQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFJlcXVlc3RzLm1hcChmdW5jdGlvbiAoY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9mID0gX3Jlc29sdmVSZXF1ZXN0KHJlcXVlc3RTY29wZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRhcmdldC5pc09wdGlvbmFsKCkgJiYgYmluZGluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiaW5kaW5nID0gYmluZGluZ3NbMF07XG4gICAgICAgICAgICByZXR1cm4gX3Jlc29sdmVCaW5kaW5nKHJlcXVlc3RTY29wZSwgcmVxdWVzdCwgYmluZGluZyk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbnZhciBfcmVzb2x2ZUZhY3RvcnlGcm9tQmluZGluZyA9IGZ1bmN0aW9uIChiaW5kaW5nLCBjb250ZXh0KSB7XG4gICAgdmFyIGZhY3RvcnlEZXRhaWxzID0gZ2V0RmFjdG9yeURldGFpbHMoYmluZGluZyk7XG4gICAgcmV0dXJuIHRyeUFuZFRocm93RXJyb3JJZlN0YWNrT3ZlcmZsb3coZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFjdG9yeURldGFpbHMuZmFjdG9yeS5iaW5kKGJpbmRpbmcpKGNvbnRleHQpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRXJyb3IoRVJST1JfTVNHUy5DSVJDVUxBUl9ERVBFTkRFTkNZX0lOX0ZBQ1RPUlkoZmFjdG9yeURldGFpbHMuZmFjdG9yeVR5cGUsIGNvbnRleHQuY3VycmVudFJlcXVlc3Quc2VydmljZUlkZW50aWZpZXIudG9TdHJpbmcoKSkpOyB9KTtcbn07XG52YXIgX2dldFJlc29sdmVkRnJvbUJpbmRpbmcgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCByZXF1ZXN0LCBiaW5kaW5nKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgY2hpbGRSZXF1ZXN0cyA9IHJlcXVlc3QuY2hpbGRSZXF1ZXN0cztcbiAgICBlbnN1cmVGdWxseUJvdW5kKGJpbmRpbmcpO1xuICAgIHN3aXRjaCAoYmluZGluZy50eXBlKSB7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkNvbnN0YW50VmFsdWU6XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkZ1bmN0aW9uOlxuICAgICAgICAgICAgcmVzdWx0ID0gYmluZGluZy5jYWNoZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5Db25zdHJ1Y3RvcjpcbiAgICAgICAgICAgIHJlc3VsdCA9IGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkluc3RhbmNlOlxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzb2x2ZUluc3RhbmNlKGJpbmRpbmcsIGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlLCBjaGlsZFJlcXVlc3RzLCBfcmVzb2x2ZVJlcXVlc3QocmVxdWVzdFNjb3BlKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlc3VsdCA9IF9yZXNvbHZlRmFjdG9yeUZyb21CaW5kaW5nKGJpbmRpbmcsIHJlcXVlc3QucGFyZW50Q29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9yZXNvbHZlSW5TY29wZSA9IGZ1bmN0aW9uIChyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIHJlc29sdmVGcm9tQmluZGluZykge1xuICAgIHZhciByZXN1bHQgPSB0cnlHZXRGcm9tU2NvcGUocmVxdWVzdFNjb3BlLCBiaW5kaW5nKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IHJlc29sdmVGcm9tQmluZGluZygpO1xuICAgIHNhdmVUb1Njb3BlKHJlcXVlc3RTY29wZSwgYmluZGluZywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfcmVzb2x2ZUJpbmRpbmcgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCByZXF1ZXN0LCBiaW5kaW5nKSB7XG4gICAgcmV0dXJuIF9yZXNvbHZlSW5TY29wZShyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IF9nZXRSZXNvbHZlZEZyb21CaW5kaW5nKHJlcXVlc3RTY29wZSwgcmVxdWVzdCwgYmluZGluZyk7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkKSB7IHJldHVybiBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc29sdmVkKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc29sdmVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9iaW5kaW5nQWN0aXZhdGlvbihyZXF1ZXN0LnBhcmVudENvbnRleHQsIGJpbmRpbmcsIHJlc29sdmVkKTtcbiAgICB2YXIgY29udGFpbmVyc0l0ZXJhdG9yID0gX2dldENvbnRhaW5lcnNJdGVyYXRvcihyZXF1ZXN0LnBhcmVudENvbnRleHQuY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVyO1xuICAgIHZhciBjb250YWluZXJzSXRlcmF0b3JSZXN1bHQgPSBjb250YWluZXJzSXRlcmF0b3IubmV4dCgpO1xuICAgIGRvIHtcbiAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyc0l0ZXJhdG9yUmVzdWx0LnZhbHVlO1xuICAgICAgICB2YXIgY29udGV4dF8xID0gcmVxdWVzdC5wYXJlbnRDb250ZXh0O1xuICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXIgPSByZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyO1xuICAgICAgICB2YXIgYWN0aXZhdGlvbnNJdGVyYXRvciA9IF9nZXRDb250YWluZXJBY3RpdmF0aW9uc0ZvclNlcnZpY2UoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gX2FjdGl2YXRlQ29udGFpbmVyQXN5bmMoYWN0aXZhdGlvbnNJdGVyYXRvciwgY29udGV4dF8xLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gX2FjdGl2YXRlQ29udGFpbmVyKGFjdGl2YXRpb25zSXRlcmF0b3IsIGNvbnRleHRfMSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXJzSXRlcmF0b3JSZXN1bHQgPSBjb250YWluZXJzSXRlcmF0b3IubmV4dCgpO1xuICAgIH0gd2hpbGUgKGNvbnRhaW5lcnNJdGVyYXRvclJlc3VsdC5kb25lICE9PSB0cnVlICYmICFnZXRCaW5kaW5nRGljdGlvbmFyeShjb250YWluZXIpLmhhc0tleShyZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfYmluZGluZ0FjdGl2YXRpb24gPSBmdW5jdGlvbiAoY29udGV4dCwgYmluZGluZywgcHJldmlvdXNSZXN1bHQpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmICh0eXBlb2YgYmluZGluZy5vbkFjdGl2YXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXN1bHQgPSBiaW5kaW5nLm9uQWN0aXZhdGlvbihjb250ZXh0LCBwcmV2aW91c1Jlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBwcmV2aW91c1Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX2FjdGl2YXRlQ29udGFpbmVyID0gZnVuY3Rpb24gKGFjdGl2YXRpb25zSXRlcmF0b3IsIGNvbnRleHQsIHJlc3VsdCkge1xuICAgIHZhciBhY3RpdmF0aW9uID0gYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgd2hpbGUgKCFhY3RpdmF0aW9uLmRvbmUpIHtcbiAgICAgICAgcmVzdWx0ID0gYWN0aXZhdGlvbi52YWx1ZShjb250ZXh0LCByZXN1bHQpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWN0aXZhdGVDb250YWluZXJBc3luYyhhY3RpdmF0aW9uc0l0ZXJhdG9yLCBjb250ZXh0LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2YXRpb24gPSBhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX2FjdGl2YXRlQ29udGFpbmVyQXN5bmMgPSBmdW5jdGlvbiAoYWN0aXZhdGlvbnNJdGVyYXRvciwgY29udGV4dCwgcmVzdWx0UHJvbWlzZSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0LCBhY3RpdmF0aW9uO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHJlc3VsdFByb21pc2VdO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uID0gYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICghIWFjdGl2YXRpb24uZG9uZSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGFjdGl2YXRpb24udmFsdWUoY29udGV4dCwgcmVzdWx0KV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGFjdGl2YXRpb24gPSBhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIHJlc3VsdF07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xudmFyIF9nZXRDb250YWluZXJBY3RpdmF0aW9uc0ZvclNlcnZpY2UgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIHZhciBhY3RpdmF0aW9ucyA9IGNvbnRhaW5lci5fYWN0aXZhdGlvbnM7XG4gICAgcmV0dXJuIGFjdGl2YXRpb25zLmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikgPyBhY3RpdmF0aW9ucy5nZXQoc2VydmljZUlkZW50aWZpZXIpLnZhbHVlcygpIDogW10udmFsdWVzKCk7XG59O1xudmFyIF9nZXRDb250YWluZXJzSXRlcmF0b3IgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgdmFyIGNvbnRhaW5lcnNTdGFjayA9IFtjb250YWluZXJdO1xuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgY29udGFpbmVyc1N0YWNrLnB1c2gocGFyZW50KTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgdmFyIGdldE5leHRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0Q29udGFpbmVyID0gY29udGFpbmVyc1N0YWNrLnBvcCgpO1xuICAgICAgICBpZiAobmV4dENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG5leHRDb250YWluZXIgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbnRhaW5lcnNJdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZ2V0TmV4dENvbnRhaW5lcixcbiAgICB9O1xuICAgIHJldHVybiBjb250YWluZXJzSXRlcmF0b3I7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZShjb250ZXh0KSB7XG4gICAgdmFyIF9mID0gX3Jlc29sdmVSZXF1ZXN0KGNvbnRleHQucGxhbi5yb290UmVxdWVzdC5yZXF1ZXN0U2NvcGUpO1xuICAgIHJldHVybiBfZihjb250ZXh0LnBsYW4ucm9vdFJlcXVlc3QpO1xufVxuZXhwb3J0IHsgcmVzb2x2ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgTWV0YWRhdGEgfSBmcm9tIFwiLi4vcGxhbm5pbmcvbWV0YWRhdGFcIjtcbnZhciB0cmF2ZXJzZUFuY2Vyc3RvcnMgPSBmdW5jdGlvbiAocmVxdWVzdCwgY29uc3RyYWludCkge1xuICAgIHZhciBwYXJlbnQgPSByZXF1ZXN0LnBhcmVudFJlcXVlc3Q7XG4gICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29uc3RyYWludChwYXJlbnQpID8gdHJ1ZSA6IHRyYXZlcnNlQW5jZXJzdG9ycyhwYXJlbnQsIGNvbnN0cmFpbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG52YXIgdGFnZ2VkQ29uc3RyYWludCA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBjb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QgIT09IG51bGwgJiYgcmVxdWVzdC50YXJnZXQgIT09IG51bGwgJiYgcmVxdWVzdC50YXJnZXQubWF0Y2hlc1RhZyhrZXkpKHZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0cmFpbnQubWV0YURhdGEgPSBuZXcgTWV0YWRhdGEoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIGNvbnN0cmFpbnQ7XG59OyB9O1xudmFyIG5hbWVkQ29uc3RyYWludCA9IHRhZ2dlZENvbnN0cmFpbnQoTUVUQURBVEFfS0VZLk5BTUVEX1RBRyk7XG52YXIgdHlwZUNvbnN0cmFpbnQgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICB2YXIgYmluZGluZyA9IG51bGw7XG4gICAgaWYgKHJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgYmluZGluZyA9IHJlcXVlc3QuYmluZGluZ3NbMF07XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VJZGVudGlmaWVyID0gYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlSWRlbnRpZmllciA9PT0gdHlwZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHJlcXVlc3QuYmluZGluZ3NbMF0uaW1wbGVtZW50YXRpb25UeXBlO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09IGNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07IH07XG5leHBvcnQgeyB0cmF2ZXJzZUFuY2Vyc3RvcnMsIHRhZ2dlZENvbnN0cmFpbnQsIG5hbWVkQ29uc3RyYWludCwgdHlwZUNvbnN0cmFpbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cmFpbnRfaGVscGVycy5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgbmFtZWRDb25zdHJhaW50LCB0YWdnZWRDb25zdHJhaW50LCB0cmF2ZXJzZUFuY2Vyc3RvcnMsIHR5cGVDb25zdHJhaW50IH0gZnJvbSBcIi4vY29uc3RyYWludF9oZWxwZXJzXCI7XG52YXIgQmluZGluZ1doZW5TeW50YXggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmdXaGVuU3ludGF4KGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZyA9IGJpbmRpbmc7XG4gICAgfVxuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gY29uc3RyYWludDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlblRhcmdldE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gbmFtZWRDb25zdHJhaW50KG5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0SXNEZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmNvbnN0cmFpbnQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SXNEZWZhdWx0ID0gKHJlcXVlc3QudGFyZ2V0ICE9PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgICghcmVxdWVzdC50YXJnZXQuaXNOYW1lZCgpKSAmJlxuICAgICAgICAgICAgICAgICghcmVxdWVzdC50YXJnZXQuaXNUYWdnZWQoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0SXNEZWZhdWx0O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gdGFnZ2VkQ29uc3RyYWludCh0YWcpKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkluamVjdGVkSW50byA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHR5cGVDb25zdHJhaW50KHBhcmVudCkocmVxdWVzdC5wYXJlbnRSZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIG5hbWVkQ29uc3RyYWludChuYW1lKShyZXF1ZXN0LnBhcmVudFJlcXVlc3QpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuUGFyZW50VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRhZ2dlZENvbnN0cmFpbnQodGFnKSh2YWx1ZSkocmVxdWVzdC5wYXJlbnRSZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9ySXMgPSBmdW5jdGlvbiAoYW5jZXN0b3IpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0eXBlQ29uc3RyYWludChhbmNlc3RvcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiAhdHJhdmVyc2VBbmNlcnN0b3JzKHJlcXVlc3QsIHR5cGVDb25zdHJhaW50KGFuY2VzdG9yKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ09uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCBuYW1lZENvbnN0cmFpbnQobmFtZSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmICF0cmF2ZXJzZUFuY2Vyc3RvcnMocmVxdWVzdCwgbmFtZWRDb25zdHJhaW50KG5hbWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0YWdnZWRDb25zdHJhaW50KHRhZykodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmNvbnN0cmFpbnQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QgIT09IG51bGwgJiYgIXRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0YWdnZWRDb25zdHJhaW50KHRhZykodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiB0cmF2ZXJzZUFuY2Vyc3RvcnMocmVxdWVzdCwgY29uc3RyYWludCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ09uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiAhdHJhdmVyc2VBbmNlcnN0b3JzKHJlcXVlc3QsIGNvbnN0cmFpbnQpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nV2hlblN5bnRheDtcbn0oKSk7XG5leHBvcnQgeyBCaW5kaW5nV2hlblN5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ193aGVuX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nV2hlblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfd2hlbl9zeW50YXhcIjtcbnZhciBCaW5kaW5nT25TeW50YXggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmdPblN5bnRheChiaW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcgPSBiaW5kaW5nO1xuICAgIH1cbiAgICBCaW5kaW5nT25TeW50YXgucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcub25BY3RpdmF0aW9uID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdPblN5bnRheC5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLm9uRGVhY3RpdmF0aW9uID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ09uU3ludGF4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX29uX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgQmluZGluZ1doZW5TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fc3ludGF4XCI7XG52YXIgQmluZGluZ1doZW5PblN5bnRheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZ1doZW5PblN5bnRheChiaW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcgPSBiaW5kaW5nO1xuICAgICAgICB0aGlzLl9iaW5kaW5nV2hlblN5bnRheCA9IG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ09uU3ludGF4ID0gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuKGNvbnN0cmFpbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlblRhcmdldE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5UYXJnZXROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRJc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0SXNEZWZhdWx0KCk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5UYXJnZXRUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuSW5qZWN0ZWRJbnRvID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkluamVjdGVkSW50byhwYXJlbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5QYXJlbnROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5QYXJlbnRUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlblBhcmVudFRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JJcyhhbmNlc3Rvcik7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuTm9BbmNlc3RvcklzKGFuY2VzdG9yKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5BbnlBbmNlc3Rvck5hbWVkKG5hbWUpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5BbnlBbmNlc3RvclRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JOYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yVGFnZ2VkKHRhZywgdmFsdWUpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JNYXRjaGVzKGNvbnN0cmFpbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JNYXRjaGVzID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nT25TeW50YXgub25BY3RpdmF0aW9uKGhhbmRsZXIpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ09uU3ludGF4Lm9uRGVhY3RpdmF0aW9uKGhhbmRsZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEJpbmRpbmdXaGVuT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ1doZW5PblN5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ193aGVuX29uX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzXCI7XG5pbXBvcnQgeyBCaW5kaW5nV2hlbk9uU3ludGF4IH0gZnJvbSBcIi4vYmluZGluZ193aGVuX29uX3N5bnRheFwiO1xudmFyIEJpbmRpbmdJblN5bnRheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZ0luU3ludGF4KGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZyA9IGJpbmRpbmc7XG4gICAgfVxuICAgIEJpbmRpbmdJblN5bnRheC5wcm90b3R5cGUuaW5SZXF1ZXN0U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3Q7XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJblN5bnRheC5wcm90b3R5cGUuaW5TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5TeW50YXgucHJvdG90eXBlLmluVHJhbnNpZW50U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlRyYW5zaWVudDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgcmV0dXJuIEJpbmRpbmdJblN5bnRheDtcbn0oKSk7XG5leHBvcnQgeyBCaW5kaW5nSW5TeW50YXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRpbmdfaW5fc3ludGF4LmpzLm1hcCIsImltcG9ydCB7IEJpbmRpbmdJblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfaW5fc3ludGF4XCI7XG5pbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgQmluZGluZ1doZW5TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fc3ludGF4XCI7XG52YXIgQmluZGluZ0luV2hlbk9uU3ludGF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaW5kaW5nSW5XaGVuT25TeW50YXgoYmluZGluZykge1xuICAgICAgICB0aGlzLl9iaW5kaW5nID0gYmluZGluZztcbiAgICAgICAgdGhpcy5fYmluZGluZ1doZW5TeW50YXggPSBuZXcgQmluZGluZ1doZW5TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmdPblN5bnRheCA9IG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmdJblN5bnRheCA9IG5ldyBCaW5kaW5nSW5TeW50YXgoYmluZGluZyk7XG4gICAgfVxuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUuaW5SZXF1ZXN0U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nSW5TeW50YXguaW5SZXF1ZXN0U2NvcGUoKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUuaW5TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdJblN5bnRheC5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLmluVHJhbnNpZW50U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nSW5TeW50YXguaW5UcmFuc2llbnRTY29wZSgpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW4oY29uc3RyYWludCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXROYW1lZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0TmFtZWQobmFtZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRJc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0SXNEZWZhdWx0KCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlblRhcmdldFRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkluamVjdGVkSW50byA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5JbmplY3RlZEludG8ocGFyZW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5QYXJlbnROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudFRhZ2dlZCA9IGZ1bmN0aW9uICh0YWcsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuUGFyZW50VGFnZ2VkKHRhZywgdmFsdWUpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuQW55QW5jZXN0b3JJcyA9IGZ1bmN0aW9uIChhbmNlc3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9ySXMoYW5jZXN0b3IpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuTm9BbmNlc3RvcklzKGFuY2VzdG9yKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9yTmFtZWQobmFtZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3RvclRhZ2dlZCA9IGZ1bmN0aW9uICh0YWcsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JOYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck1hdGNoZXMgPSBmdW5jdGlvbiAoY29uc3RyYWludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JNYXRjaGVzID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUub25BY3RpdmF0aW9uID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdPblN5bnRheC5vbkFjdGl2YXRpb24oaGFuZGxlcik7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLm9uRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdPblN5bnRheC5vbkRlYWN0aXZhdGlvbihoYW5kbGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nSW5XaGVuT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ0luV2hlbk9uU3ludGF4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX2luX3doZW5fb25fc3ludGF4LmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtLCBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IEJpbmRpbmdJbldoZW5PblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfaW5fd2hlbl9vbl9zeW50YXhcIjtcbmltcG9ydCB7IEJpbmRpbmdXaGVuT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fb25fc3ludGF4XCI7XG52YXIgQmluZGluZ1RvU3ludGF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaW5kaW5nVG9TeW50YXgoYmluZGluZykge1xuICAgICAgICB0aGlzLl9iaW5kaW5nID0gYmluZGluZztcbiAgICB9XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChjb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlID0gY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ0luV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b1NlbGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuSU5WQUxJRF9UT19TRUxGX1ZBTFVFKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMuX2JpbmRpbmcuc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKHNlbGYpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0NvbnN0YW50VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkNvbnN0YW50VmFsdWU7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY2FjaGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5keW5hbWljVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0R5bmFtaWNWYWx1ZSA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcudHlwZSA9IEJpbmRpbmdUeXBlRW51bS5EeW5hbWljVmFsdWU7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmR5bmFtaWNWYWx1ZSA9IGZ1bmM7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nSW5XaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoY29uc3RydWN0b3IpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkNvbnN0cnVjdG9yO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZSA9IGNvbnN0cnVjdG9yO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnNjb3BlID0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b247XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdUb1N5bnRheC5wcm90b3R5cGUudG9GYWN0b3J5ID0gZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfRlVOQ1RJT05fQklORElORyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJpbmRpbmdXaGVuT25TeW50YXggPSB0aGlzLnRvQ29uc3RhbnRWYWx1ZShmdW5jKTtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkZ1bmN0aW9uO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnNjb3BlID0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b247XG4gICAgICAgIHJldHVybiBiaW5kaW5nV2hlbk9uU3ludGF4O1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0F1dG9GYWN0b3J5ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcudHlwZSA9IEJpbmRpbmdUeXBlRW51bS5GYWN0b3J5O1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmZhY3RvcnkgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGF1dG9mYWN0b3J5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udGV4dC5jb250YWluZXIuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTsgfTtcbiAgICAgICAgICAgIHJldHVybiBhdXRvZmFjdG9yeTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvQXV0b05hbWVkRmFjdG9yeSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uRmFjdG9yeTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5mYWN0b3J5ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZWQpIHsgcmV0dXJuIGNvbnRleHQuY29udGFpbmVyLmdldE5hbWVkKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCk7IH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdUb1N5bnRheC5wcm90b3R5cGUudG9Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvU2VydmljZSA9IGZ1bmN0aW9uIChzZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudG9EeW5hbWljVmFsdWUoZnVuY3Rpb24gKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuY29udGFpbmVyLmdldChzZXJ2aWNlKTsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmluZGluZ1RvU3ludGF4O1xufSgpKTtcbmV4cG9ydCB7IEJpbmRpbmdUb1N5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ190b19zeW50YXguanMubWFwIiwidmFyIENvbnRhaW5lclNuYXBzaG90ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250YWluZXJTbmFwc2hvdCgpIHtcbiAgICB9XG4gICAgQ29udGFpbmVyU25hcHNob3Qub2YgPSBmdW5jdGlvbiAoYmluZGluZ3MsIG1pZGRsZXdhcmUsIGFjdGl2YXRpb25zLCBkZWFjdGl2YXRpb25zLCBtb2R1bGVBY3RpdmF0aW9uU3RvcmUpIHtcbiAgICAgICAgdmFyIHNuYXBzaG90ID0gbmV3IENvbnRhaW5lclNuYXBzaG90KCk7XG4gICAgICAgIHNuYXBzaG90LmJpbmRpbmdzID0gYmluZGluZ3M7XG4gICAgICAgIHNuYXBzaG90Lm1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlO1xuICAgICAgICBzbmFwc2hvdC5kZWFjdGl2YXRpb25zID0gZGVhY3RpdmF0aW9ucztcbiAgICAgICAgc25hcHNob3QuYWN0aXZhdGlvbnMgPSBhY3RpdmF0aW9ucztcbiAgICAgICAgc25hcHNob3QubW9kdWxlQWN0aXZhdGlvblN0b3JlID0gbW9kdWxlQWN0aXZhdGlvblN0b3JlO1xuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyU25hcHNob3Q7XG59KCkpO1xuZXhwb3J0IHsgQ29udGFpbmVyU25hcHNob3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRhaW5lcl9zbmFwc2hvdC5qcy5tYXAiLCJmdW5jdGlvbiBpc0Nsb25hYmxlKG9iaikge1xuICAgIHJldHVybiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpXG4gICAgICAgICYmIChvYmogIT09IG51bGwpXG4gICAgICAgICYmICgnY2xvbmUnIGluIG9iailcbiAgICAgICAgJiYgdHlwZW9mIG9iai5jbG9uZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydCB7IGlzQ2xvbmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsb25hYmxlLmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBpc0Nsb25hYmxlIH0gZnJvbSBcIi4uL3V0aWxzL2Nsb25hYmxlXCI7XG52YXIgTG9va3VwID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb29rdXAoKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgTG9va3VwLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXA7XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHNlcnZpY2VJZGVudGlmaWVyID09PSBudWxsIHx8IHNlcnZpY2VJZGVudGlmaWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLk5VTExfQVJHVU1FTlQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5OVUxMX0FSR1VNRU5UKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9tYXAuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKGVudHJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVudHJ5LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChzZXJ2aWNlSWRlbnRpZmllciwgW3ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExvb2t1cC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIGlmIChzZXJ2aWNlSWRlbnRpZmllciA9PT0gbnVsbCB8fCBzZXJ2aWNlSWRlbnRpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5OVUxMX0FSR1VNRU5UKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9tYXAuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKGVudHJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLktFWV9OT1RfRk9VTkQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICBpZiAoc2VydmljZUlkZW50aWZpZXIgPT09IG51bGwgfHwgc2VydmljZUlkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuTlVMTF9BUkdVTUVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9tYXAuZGVsZXRlKHNlcnZpY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuS0VZX05PVF9GT1VORCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExvb2t1cC5wcm90b3R5cGUucmVtb3ZlSW50ZXJzZWN0aW9uID0gZnVuY3Rpb24gKGxvb2t1cCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnRyYXZlcnNlKGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBsb29rdXBBY3RpdmF0aW9ucyA9IGxvb2t1cC5oYXNLZXkoc2VydmljZUlkZW50aWZpZXIpID8gbG9va3VwLmdldChzZXJ2aWNlSWRlbnRpZmllcikgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobG9va3VwQWN0aXZhdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZFZhbHVlcyA9IHZhbHVlLmZpbHRlcihmdW5jdGlvbiAobG9va3VwVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFsb29rdXBBY3RpdmF0aW9ucy5zb21lKGZ1bmN0aW9uIChtb2R1bGVBY3RpdmF0aW9uKSB7IHJldHVybiBsb29rdXBWYWx1ZSA9PT0gbW9kdWxlQWN0aXZhdGlvbjsgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3NldFZhbHVlKHNlcnZpY2VJZGVudGlmaWVyLCBmaWx0ZXJlZFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5yZW1vdmVCeUNvbmRpdGlvbiA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlbW92YWxzID0gW107XG4gICAgICAgIHRoaXMuX21hcC5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyaWVzLCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkRW50cmllcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmUgPSBjb25kaXRpb24oZW50cnkpO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZhbHMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fc2V0VmFsdWUoa2V5LCB1cGRhdGVkRW50cmllcyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVtb3ZhbHM7XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLmhhc0tleSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICBpZiAoc2VydmljZUlkZW50aWZpZXIgPT09IG51bGwgfHwgc2VydmljZUlkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuTlVMTF9BUkdVTUVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcC5oYXMoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMuX21hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7IHJldHVybiBjb3B5LmFkZChrZXksIGlzQ2xvbmFibGUoYikgPyBiLmNsb25lKCkgOiBiKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9O1xuICAgIExvb2t1cC5wcm90b3R5cGUudHJhdmVyc2UgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgZnVuYyhrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLl9zZXRWYWx1ZSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoc2VydmljZUlkZW50aWZpZXIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUoc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTG9va3VwO1xufSgpKTtcbmV4cG9ydCB7IExvb2t1cCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwLmpzLm1hcCIsImltcG9ydCB7IExvb2t1cCB9IGZyb20gXCIuL2xvb2t1cFwiO1xudmFyIE1vZHVsZUFjdGl2YXRpb25TdG9yZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlQWN0aXZhdGlvblN0b3JlKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIE1vZHVsZUFjdGl2YXRpb25TdG9yZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXAuaGFzKG1vZHVsZUlkKSkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbWFwLmdldChtb2R1bGVJZCk7XG4gICAgICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKG1vZHVsZUlkKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RW1wdHlIYW5kbGVyc1N0b3JlKCk7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLmFkZERlYWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2dldE1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyhtb2R1bGVJZClcbiAgICAgICAgICAgIC5vbkRlYWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLmFkZEFjdGl2YXRpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQsIHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pIHtcbiAgICAgICAgdGhpcy5fZ2V0TW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzKG1vZHVsZUlkKVxuICAgICAgICAgICAgLm9uQWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pO1xuICAgIH07XG4gICAgTW9kdWxlQWN0aXZhdGlvblN0b3JlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IE1vZHVsZUFjdGl2YXRpb25TdG9yZSgpO1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcnNTdG9yZSwgbW9kdWxlSWQpIHtcbiAgICAgICAgICAgIGNsb25lLl9tYXAuc2V0KG1vZHVsZUlkLCB7XG4gICAgICAgICAgICAgICAgb25BY3RpdmF0aW9uczogaGFuZGxlcnNTdG9yZS5vbkFjdGl2YXRpb25zLmNsb25lKCksXG4gICAgICAgICAgICAgICAgb25EZWFjdGl2YXRpb25zOiBoYW5kbGVyc1N0b3JlLm9uRGVhY3RpdmF0aW9ucy5jbG9uZSgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLl9nZXRNb2R1bGVBY3RpdmF0aW9uSGFuZGxlcnMgPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgdmFyIG1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyA9IHRoaXMuX21hcC5nZXQobW9kdWxlSWQpO1xuICAgICAgICBpZiAobW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyA9IHRoaXMuX2dldEVtcHR5SGFuZGxlcnNTdG9yZSgpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChtb2R1bGVJZCwgbW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzO1xuICAgIH07XG4gICAgTW9kdWxlQWN0aXZhdGlvblN0b3JlLnByb3RvdHlwZS5fZ2V0RW1wdHlIYW5kbGVyc1N0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFuZGxlcnNTdG9yZSA9IHtcbiAgICAgICAgICAgIG9uQWN0aXZhdGlvbnM6IG5ldyBMb29rdXAoKSxcbiAgICAgICAgICAgIG9uRGVhY3RpdmF0aW9uczogbmV3IExvb2t1cCgpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBoYW5kbGVyc1N0b3JlO1xuICAgIH07XG4gICAgcmV0dXJuIE1vZHVsZUFjdGl2YXRpb25TdG9yZTtcbn0oKSk7XG5leHBvcnQgeyBNb2R1bGVBY3RpdmF0aW9uU3RvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZV9hY3RpdmF0aW9uX3N0b3JlLmpzLm1hcCIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgQmluZGluZyB9IGZyb20gXCIuLi9iaW5kaW5ncy9iaW5kaW5nXCI7XG5pbXBvcnQgKiBhcyBFUlJPUl9NU0dTIGZyb20gXCIuLi9jb25zdGFudHMvZXJyb3JfbXNnc1wiO1xuaW1wb3J0IHsgQmluZGluZ1Njb3BlRW51bSwgVGFyZ2V0VHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCAqIGFzIE1FVEFEQVRBX0tFWSBmcm9tIFwiLi4vY29uc3RhbnRzL21ldGFkYXRhX2tleXNcIjtcbmltcG9ydCB7IE1ldGFkYXRhUmVhZGVyIH0gZnJvbSBcIi4uL3BsYW5uaW5nL21ldGFkYXRhX3JlYWRlclwiO1xuaW1wb3J0IHsgY3JlYXRlTW9ja1JlcXVlc3QsIGdldEJpbmRpbmdEaWN0aW9uYXJ5LCBwbGFuIH0gZnJvbSBcIi4uL3BsYW5uaW5nL3BsYW5uZXJcIjtcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwiLi4vcmVzb2x1dGlvbi9yZXNvbHZlclwiO1xuaW1wb3J0IHsgQmluZGluZ1RvU3ludGF4IH0gZnJvbSBcIi4uL3N5bnRheC9iaW5kaW5nX3RvX3N5bnRheFwiO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbmltcG9ydCB7IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiO1xuaW1wb3J0IHsgQ29udGFpbmVyU25hcHNob3QgfSBmcm9tIFwiLi9jb250YWluZXJfc25hcHNob3RcIjtcbmltcG9ydCB7IExvb2t1cCB9IGZyb20gXCIuL2xvb2t1cFwiO1xuaW1wb3J0IHsgTW9kdWxlQWN0aXZhdGlvblN0b3JlIH0gZnJvbSBcIi4vbW9kdWxlX2FjdGl2YXRpb25fc3RvcmVcIjtcbnZhciBDb250YWluZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lcihjb250YWluZXJPcHRpb25zKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gY29udGFpbmVyT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfTVVTVF9CRV9BTl9PQkpFQ1QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRTY29wZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRTY29wZSA9IEJpbmRpbmdTY29wZUVudW0uVHJhbnNpZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuZGVmYXVsdFNjb3BlICE9PSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbiAmJlxuICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0U2NvcGUgIT09IEJpbmRpbmdTY29wZUVudW0uVHJhbnNpZW50ICYmXG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRTY29wZSAhPT0gQmluZGluZ1Njb3BlRW51bS5SZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9ERUZBVUxUX1NDT1BFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9BVVRPX0JJTkRfSU5KRUNUQUJMRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcEJhc2VDbGFzc0NoZWNrcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNraXBCYXNlQ2xhc3NDaGVja3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwQmFzZUNsYXNzQ2hlY2tzICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIgKyBFUlJPUl9NU0dTLkNPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfU0tJUF9CQVNFX0NIRUNLKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhdXRvQmluZEluamVjdGFibGU6IG9wdGlvbnMuYXV0b0JpbmRJbmplY3RhYmxlLFxuICAgICAgICAgICAgZGVmYXVsdFNjb3BlOiBvcHRpb25zLmRlZmF1bHRTY29wZSxcbiAgICAgICAgICAgIHNraXBCYXNlQ2xhc3NDaGVja3M6IG9wdGlvbnMuc2tpcEJhc2VDbGFzc0NoZWNrc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlkID0gaWQoKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMuX3NuYXBzaG90cyA9IFtdO1xuICAgICAgICB0aGlzLl9taWRkbGV3YXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGlvbnMgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGlvbnMgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFSZWFkZXIgPSBuZXcgTWV0YWRhdGFSZWFkZXIoKTtcbiAgICAgICAgdGhpcy5fbW9kdWxlQWN0aXZhdGlvblN0b3JlID0gbmV3IE1vZHVsZUFjdGl2YXRpb25TdG9yZSgpO1xuICAgIH1cbiAgICBDb250YWluZXIubWVyZ2UgPSBmdW5jdGlvbiAoY29udGFpbmVyMSwgY29udGFpbmVyMikge1xuICAgICAgICB2YXIgY29udGFpbmVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY29udGFpbmVyc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcigpO1xuICAgICAgICB2YXIgdGFyZ2V0Q29udGFpbmVycyA9IF9fc3ByZWFkQXJyYXkoW2NvbnRhaW5lcjEsIGNvbnRhaW5lcjJdLCBjb250YWluZXJzLCB0cnVlKS5tYXAoZnVuY3Rpb24gKHRhcmdldENvbnRhaW5lcikgeyByZXR1cm4gZ2V0QmluZGluZ0RpY3Rpb25hcnkodGFyZ2V0Q29udGFpbmVyKTsgfSk7XG4gICAgICAgIHZhciBiaW5kaW5nRGljdGlvbmFyeSA9IGdldEJpbmRpbmdEaWN0aW9uYXJ5KGNvbnRhaW5lcik7XG4gICAgICAgIGZ1bmN0aW9uIGNvcHlEaWN0aW9uYXJ5KG9yaWdpbiwgZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIG9yaWdpbi50cmF2ZXJzZShmdW5jdGlvbiAoX2tleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5nLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0Q29udGFpbmVycy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRCaW5kaW5nRGljdGlvbmFyeSkge1xuICAgICAgICAgICAgY29weURpY3Rpb25hcnkodGFyZ2V0QmluZGluZ0RpY3Rpb25hcnksIGJpbmRpbmdEaWN0aW9uYXJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdldEhlbHBlcnMgPSB0aGlzLl9nZXRDb250YWluZXJNb2R1bGVIZWxwZXJzRmFjdG9yeSgpO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG1vZHVsZXNfMSA9IG1vZHVsZXM7IF9hIDwgbW9kdWxlc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRNb2R1bGUgPSBtb2R1bGVzXzFbX2FdO1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMgPSBnZXRIZWxwZXJzKGN1cnJlbnRNb2R1bGUuaWQpO1xuICAgICAgICAgICAgY3VycmVudE1vZHVsZS5yZWdpc3RyeShjb250YWluZXJNb2R1bGVIZWxwZXJzLmJpbmRGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy51bmJpbmRGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5pc2JvdW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMucmViaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMudW5iaW5kQXN5bmNGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5vbkFjdGl2YXRpb25GdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5vbkRlYWN0aXZhdGlvbkZ1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5sb2FkQXN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGdldEhlbHBlcnMsIF9hLCBtb2R1bGVzXzIsIGN1cnJlbnRNb2R1bGUsIGNvbnRhaW5lck1vZHVsZUhlbHBlcnM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRIZWxwZXJzID0gdGhpcy5fZ2V0Q29udGFpbmVyTW9kdWxlSGVscGVyc0ZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gMCwgbW9kdWxlc18yID0gbW9kdWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2EgPCBtb2R1bGVzXzIubGVuZ3RoKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2R1bGUgPSBtb2R1bGVzXzJbX2FdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTW9kdWxlSGVscGVycyA9IGdldEhlbHBlcnMoY3VycmVudE1vZHVsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGN1cnJlbnRNb2R1bGUucmVnaXN0cnkoY29udGFpbmVyTW9kdWxlSGVscGVycy5iaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMudW5iaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMuaXNib3VuZEZ1bmN0aW9uLCBjb250YWluZXJNb2R1bGVIZWxwZXJzLnJlYmluZEZ1bmN0aW9uLCBjb250YWluZXJNb2R1bGVIZWxwZXJzLnVuYmluZEFzeW5jRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMub25BY3RpdmF0aW9uRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMub25EZWFjdGl2YXRpb25GdW5jdGlvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgICAgICAgIHZhciBkZWFjdGl2YXRpb25zID0gX3RoaXMuX3JlbW92ZU1vZHVsZUJpbmRpbmdzKG1vZHVsZS5pZCk7XG4gICAgICAgICAgICBfdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnMoZGVhY3RpdmF0aW9ucyk7XG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlTW9kdWxlSGFuZGxlcnMobW9kdWxlLmlkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnVubG9hZEFzeW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbW9kdWxlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbW9kdWxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgbW9kdWxlc18zLCBtb2R1bGVfMSwgZGVhY3RpdmF0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gMCwgbW9kdWxlc18zID0gbW9kdWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2EgPCBtb2R1bGVzXzMubGVuZ3RoKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZV8xID0gbW9kdWxlc18zW19hXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGlvbnMgPSB0aGlzLl9yZW1vdmVNb2R1bGVCaW5kaW5ncyhtb2R1bGVfMS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuX2RlYWN0aXZhdGVTaW5nbGV0b25zQXN5bmMoZGVhY3RpdmF0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVNb2R1bGVIYW5kbGVycyhtb2R1bGVfMS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMub3B0aW9ucy5kZWZhdWx0U2NvcGUgfHwgQmluZGluZ1Njb3BlRW51bS5UcmFuc2llbnQ7XG4gICAgICAgIHZhciBiaW5kaW5nID0gbmV3IEJpbmRpbmcoc2VydmljZUlkZW50aWZpZXIsIHNjb3BlKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nVG9TeW50YXgoYmluZGluZyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlYmluZCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLnVuYmluZChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZWJpbmRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy51bmJpbmRBc3luYyhzZXJ2aWNlSWRlbnRpZmllcildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHRoaXMuYmluZChzZXJ2aWNlSWRlbnRpZmllcildO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5oYXNLZXkoc2VydmljZUlkZW50aWZpZXIpKSB7XG4gICAgICAgICAgICB2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5nZXQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnMoYmluZGluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeShzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnVuYmluZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuaGFzS2V5KHNlcnZpY2VJZGVudGlmaWVyKSkgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyhiaW5kaW5ncyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeShzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS50cmF2ZXJzZShmdW5jdGlvbiAoX2tleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl9kZWFjdGl2YXRlU2luZ2xldG9ucyh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeSA9IG5ldyBMb29rdXAoKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kQWxsQXN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlcztcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkudHJhdmVyc2UoZnVuY3Rpb24gKF9rZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChfdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFByb21pc2UuYWxsKHByb21pc2VzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5ID0gbmV3IExvb2t1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgb25BY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRpb25zLmFkZChzZXJ2aWNlSWRlbnRpZmllciwgb25BY3RpdmF0aW9uKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmlzQm91bmQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuaGFzS2V5KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKCFib3VuZCAmJiB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgYm91bmQgPSB0aGlzLnBhcmVudC5pc0JvdW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmlzQ3VycmVudEJvdW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5oYXNLZXkoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5pc0JvdW5kTmFtZWQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG5hbWVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQm91bmRUYWdnZWQoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuaXNCb3VuZFRhZ2dlZCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgYm91bmQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5Lmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5LmdldChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdF8xID0gY3JlYXRlTW9ja1JlcXVlc3QodGhpcywgc2VydmljZUlkZW50aWZpZXIsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgYm91bmQgPSBiaW5kaW5ncy5zb21lKGZ1bmN0aW9uIChiKSB7IHJldHVybiBiLmNvbnN0cmFpbnQocmVxdWVzdF8xKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFib3VuZCAmJiB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgYm91bmQgPSB0aGlzLnBhcmVudC5pc0JvdW5kVGFnZ2VkKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnNuYXBzaG90ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zbmFwc2hvdHMucHVzaChDb250YWluZXJTbmFwc2hvdC5vZih0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5jbG9uZSgpLCB0aGlzLl9taWRkbGV3YXJlLCB0aGlzLl9hY3RpdmF0aW9ucy5jbG9uZSgpLCB0aGlzLl9kZWFjdGl2YXRpb25zLmNsb25lKCksIHRoaXMuX21vZHVsZUFjdGl2YXRpb25TdG9yZS5jbG9uZSgpKSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX3NuYXBzaG90cy5wb3AoKTtcbiAgICAgICAgaWYgKHNuYXBzaG90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLk5PX01PUkVfU05BUFNIT1RTX0FWQUlMQUJMRSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkgPSBzbmFwc2hvdC5iaW5kaW5ncztcbiAgICAgICAgdGhpcy5fYWN0aXZhdGlvbnMgPSBzbmFwc2hvdC5hY3RpdmF0aW9ucztcbiAgICAgICAgdGhpcy5fZGVhY3RpdmF0aW9ucyA9IHNuYXBzaG90LmRlYWN0aXZhdGlvbnM7XG4gICAgICAgIHRoaXMuX21pZGRsZXdhcmUgPSBzbmFwc2hvdC5taWRkbGV3YXJlO1xuICAgICAgICB0aGlzLl9tb2R1bGVBY3RpdmF0aW9uU3RvcmUgPSBzbmFwc2hvdC5tb2R1bGVBY3RpdmF0aW9uU3RvcmU7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmNyZWF0ZUNoaWxkID0gZnVuY3Rpb24gKGNvbnRhaW5lck9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IENvbnRhaW5lcihjb250YWluZXJPcHRpb25zIHx8IHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuYXBwbHlNaWRkbGV3YXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWlkZGxld2FyZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1pZGRsZXdhcmVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluaXRpYWwgPSAodGhpcy5fbWlkZGxld2FyZSkgPyB0aGlzLl9taWRkbGV3YXJlIDogdGhpcy5fcGxhbkFuZFJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycikgeyByZXR1cm4gY3VycihwcmV2KTsgfSwgaW5pdGlhbCk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmFwcGx5Q3VzdG9tTWV0YWRhdGFSZWFkZXIgPSBmdW5jdGlvbiAobWV0YWRhdGFSZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFSZWFkZXIgPSBtZXRhZGF0YVJlYWRlcjtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnV0VGhyb3dJZkFzeW5jKGdldEFyZ3MpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ2V0QXJncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgdGhpcy5fZ2V0KGdldEFyZ3MpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UsIGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnV0VGhyb3dJZkFzeW5jKGdldEFyZ3MpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRUYWdnZWRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwga2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ2V0QXJncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgdGhpcy5fZ2V0KGdldEFyZ3MpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0TmFtZWQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG5hbWVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRhZ2dlZChzZXJ2aWNlSWRlbnRpZmllciwgTUVUQURBVEFfS0VZLk5BTUVEX1RBRywgbmFtZWQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXROYW1lZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUYWdnZWRBc3luYyhzZXJ2aWNlSWRlbnRpZmllciwgTUVUQURBVEFfS0VZLk5BTUVEX1RBRywgbmFtZWQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGdldEFyZ3MgPSB0aGlzLl9nZXRBbGxBcmdzKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ1dFRocm93SWZBc3luYyhnZXRBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsQXN5bmMgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGdldEFyZ3MgPSB0aGlzLl9nZXRBbGxBcmdzKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEFsbChnZXRBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsVGFnZ2VkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgdHJ1ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRCdXRUaHJvd0lmQXN5bmMoZ2V0QXJncyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldEFsbFRhZ2dlZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgdHJ1ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbGwoZ2V0QXJncyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldEFsbE5hbWVkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGxUYWdnZWQoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsTmFtZWRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgbmFtZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsVGFnZ2VkQXN5bmMoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChjb25zdHJ1Y3RvckZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciBpc0JvdW5kID0gdGhpcy5pc0JvdW5kKGNvbnN0cnVjdG9yRnVuY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZChjb25zdHJ1Y3RvckZ1bmN0aW9uKS50b1NlbGYoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLmdldChjb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0JvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZChjb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9wcmVEZXN0cm95ID0gZnVuY3Rpb24gKGNvbnN0cnVjdG9yLCBpbnN0YW5jZSkge1xuICAgICAgICBpZiAoUmVmbGVjdC5oYXNNZXRhZGF0YShNRVRBREFUQV9LRVkuUFJFX0RFU1RST1ksIGNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5QUkVfREVTVFJPWSwgY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlW2RhdGEudmFsdWVdKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3JlbW92ZU1vZHVsZUhhbmRsZXJzID0gZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG4gICAgICAgIHZhciBtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzID0gdGhpcy5fbW9kdWxlQWN0aXZhdGlvblN0b3JlLnJlbW92ZShtb2R1bGVJZCk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRpb25zLnJlbW92ZUludGVyc2VjdGlvbihtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzLm9uQWN0aXZhdGlvbnMpO1xuICAgICAgICB0aGlzLl9kZWFjdGl2YXRpb25zLnJlbW92ZUludGVyc2VjdGlvbihtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzLm9uRGVhY3RpdmF0aW9ucyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9yZW1vdmVNb2R1bGVCaW5kaW5ncyA9IGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkucmVtb3ZlQnlDb25kaXRpb24oZnVuY3Rpb24gKGJpbmRpbmcpIHsgcmV0dXJuIGJpbmRpbmcubW9kdWxlSWQgPT09IG1vZHVsZUlkOyB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2RlYWN0aXZhdGUgPSBmdW5jdGlvbiAoYmluZGluZywgaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3RhbmNlKS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWFjdGl2YXRpb25zLmhhc0tleShiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9kZWFjdGl2YXRlQ29udGFpbmVyKGluc3RhbmNlLCB0aGlzLl9kZWFjdGl2YXRpb25zLmdldChiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyKS52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVEZWFjdGl2YXRpb25FcnJvcihyZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95QXN5bmMoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKTsgfSksIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcGFnYXRlRGVhY3RpdmF0aW9uUmVzdWx0ID0gdGhpcy5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95KGJpbmRpbmcsIGluc3RhbmNlLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKHByb3BhZ2F0ZURlYWN0aXZhdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlRGVhY3RpdmF0aW9uRXJyb3IocHJvcGFnYXRlRGVhY3RpdmF0aW9uUmVzdWx0LCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5PTl9ERUFDVElWQVRJT05fRVJST1IoY29uc3RydWN0b3IubmFtZSwgZXgubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9oYW5kbGVEZWFjdGl2YXRpb25FcnJvciA9IGZ1bmN0aW9uIChhc3luY1Jlc3VsdCwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGV4XzE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBhc3luY1Jlc3VsdF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4XzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5PTl9ERUFDVElWQVRJT05fRVJST1IoY29uc3RydWN0b3IubmFtZSwgZXhfMS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlQ29udGFpbmVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBkZWFjdGl2YXRpb25zSXRlcmF0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRlYWN0aXZhdGlvbiA9IGRlYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHdoaWxlIChkZWFjdGl2YXRpb24udmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBkZWFjdGl2YXRpb24udmFsdWUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9kZWFjdGl2YXRlQ29udGFpbmVyQXN5bmMoaW5zdGFuY2UsIGRlYWN0aXZhdGlvbnNJdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWFjdGl2YXRpb24gPSBkZWFjdGl2YXRpb25zSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlQ29udGFpbmVyQXN5bmMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGRlYWN0aXZhdGlvbnNJdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGVhY3RpdmF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0aW9uID0gZGVhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWFjdGl2YXRpb24udmFsdWUpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGRlYWN0aXZhdGlvbi52YWx1ZShpbnN0YW5jZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRpb24gPSBkZWFjdGl2YXRpb25zSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldENvbnRhaW5lck1vZHVsZUhlbHBlcnNGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2V0TW9kdWxlSWQgPSBmdW5jdGlvbiAoYmluZGluZ1RvU3ludGF4LCBtb2R1bGVJZCkge1xuICAgICAgICAgICAgYmluZGluZ1RvU3ludGF4Ll9iaW5kaW5nLm1vZHVsZUlkID0gbW9kdWxlSWQ7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRCaW5kRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ1RvU3ludGF4ID0gX3RoaXMuYmluZChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgc2V0TW9kdWxlSWQoYmluZGluZ1RvU3ludGF4LCBtb2R1bGVJZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdUb1N5bnRheDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRVbmJpbmRGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudW5iaW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRVbmJpbmRBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51bmJpbmRBc3luYyhzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0SXNib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5pc0JvdW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRSZWJpbmRGdW5jdGlvbiA9IGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nVG9TeW50YXggPSBfdGhpcy5yZWJpbmQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHNldE1vZHVsZUlkKGJpbmRpbmdUb1N5bnRheCwgbW9kdWxlSWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nVG9TeW50YXg7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0T25BY3RpdmF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uQWN0aXZhdGlvbikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9tb2R1bGVBY3RpdmF0aW9uU3RvcmUuYWRkQWN0aXZhdGlvbihtb2R1bGVJZCwgc2VydmljZUlkZW50aWZpZXIsIG9uQWN0aXZhdGlvbik7XG4gICAgICAgICAgICAgICAgX3RoaXMub25BY3RpdmF0aW9uKHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldE9uRGVhY3RpdmF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21vZHVsZUFjdGl2YXRpb25TdG9yZS5hZGREZWFjdGl2YXRpb24obW9kdWxlSWQsIHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgICAgICAgICAgICAgX3RoaXMub25EZWFjdGl2YXRpb24oc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobUlkKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgYmluZEZ1bmN0aW9uOiBnZXRCaW5kRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIGlzYm91bmRGdW5jdGlvbjogZ2V0SXNib3VuZEZ1bmN0aW9uKCksXG4gICAgICAgICAgICBvbkFjdGl2YXRpb25GdW5jdGlvbjogZ2V0T25BY3RpdmF0aW9uRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIG9uRGVhY3RpdmF0aW9uRnVuY3Rpb246IGdldE9uRGVhY3RpdmF0aW9uRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIHJlYmluZEZ1bmN0aW9uOiBnZXRSZWJpbmRGdW5jdGlvbihtSWQpLFxuICAgICAgICAgICAgdW5iaW5kRnVuY3Rpb246IGdldFVuYmluZEZ1bmN0aW9uKCksXG4gICAgICAgICAgICB1bmJpbmRBc3luY0Z1bmN0aW9uOiBnZXRVbmJpbmRBc3luY0Z1bmN0aW9uKClcbiAgICAgICAgfSk7IH07XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9nZXRBbGwgPSBmdW5jdGlvbiAoZ2V0QXJncykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5fZ2V0KGdldEFyZ3MpKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgICAgIHZhciBwbGFuQW5kUmVzb2x2ZUFyZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0QXJncyksIHsgY29udGV4dEludGVyY2VwdG9yOiBmdW5jdGlvbiAoY29udGV4dCkgeyByZXR1cm4gY29udGV4dDsgfSwgdGFyZ2V0VHlwZTogVGFyZ2V0VHlwZUVudW0uVmFyaWFibGUgfSk7XG4gICAgICAgIGlmICh0aGlzLl9taWRkbGV3YXJlKSB7XG4gICAgICAgICAgICB2YXIgbWlkZGxld2FyZVJlc3VsdCA9IHRoaXMuX21pZGRsZXdhcmUocGxhbkFuZFJlc29sdmVBcmdzKTtcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlUmVzdWx0ID09PSB1bmRlZmluZWQgfHwgbWlkZGxld2FyZVJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfTUlERExFV0FSRV9SRVRVUk4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmVSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYW5BbmRSZXNvbHZlKCkocGxhbkFuZFJlc29sdmVBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldEJ1dFRocm93SWZBc3luYyA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9nZXQoZ2V0QXJncyk7XG4gICAgICAgIGlmIChpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5MQVpZX0lOX1NZTkMoZ2V0QXJncy5zZXJ2aWNlSWRlbnRpZmllcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9nZXRBbGxBcmdzID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBnZXRBbGxBcmdzID0ge1xuICAgICAgICAgICAgYXZvaWRDb25zdHJhaW50czogdHJ1ZSxcbiAgICAgICAgICAgIGlzTXVsdGlJbmplY3Q6IHRydWUsXG4gICAgICAgICAgICBzZXJ2aWNlSWRlbnRpZmllcjogc2VydmljZUlkZW50aWZpZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBnZXRBbGxBcmdzO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0Tm90QWxsQXJncyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgaXNNdWx0aUluamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZ2V0Tm90QWxsQXJncyA9IHtcbiAgICAgICAgICAgIGF2b2lkQ29uc3RyYWludHM6IGZhbHNlLFxuICAgICAgICAgICAgaXNNdWx0aUluamVjdDogaXNNdWx0aUluamVjdCxcbiAgICAgICAgICAgIHNlcnZpY2VJZGVudGlmaWVyOiBzZXJ2aWNlSWRlbnRpZmllcixcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZ2V0Tm90QWxsQXJncztcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3BsYW5BbmRSZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gcGxhbihfdGhpcy5fbWV0YWRhdGFSZWFkZXIsIF90aGlzLCBhcmdzLmlzTXVsdGlJbmplY3QsIGFyZ3MudGFyZ2V0VHlwZSwgYXJncy5zZXJ2aWNlSWRlbnRpZmllciwgYXJncy5rZXksIGFyZ3MudmFsdWUsIGFyZ3MuYXZvaWRDb25zdHJhaW50cyk7XG4gICAgICAgICAgICBjb250ZXh0ID0gYXJncy5jb250ZXh0SW50ZXJjZXB0b3IoY29udGV4dCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZShjb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlSWZTaW5nbGV0b24gPSBmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIWJpbmRpbmcuYWN0aXZhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShiaW5kaW5nLmNhY2hlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmcuY2FjaGUudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHsgcmV0dXJuIF90aGlzLl9kZWFjdGl2YXRlKGJpbmRpbmcsIHJlc29sdmVkKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlYWN0aXZhdGUoYmluZGluZywgYmluZGluZy5jYWNoZSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlU2luZ2xldG9ucyA9IGZ1bmN0aW9uIChiaW5kaW5ncykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGJpbmRpbmdzXzEgPSBiaW5kaW5nczsgX2kgPCBiaW5kaW5nc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc18xW19pXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9kZWFjdGl2YXRlSWZTaW5nbGV0b24oYmluZGluZyk7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5BU1lOQ19VTkJJTkRfUkVRVUlSRUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlU2luZ2xldG9uc0FzeW5jID0gZnVuY3Rpb24gKGJpbmRpbmdzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgUHJvbWlzZS5hbGwoYmluZGluZ3MubWFwKGZ1bmN0aW9uIChiKSB7IHJldHVybiBfdGhpcy5fZGVhY3RpdmF0ZUlmU2luZ2xldG9uKGIpOyB9KSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3Byb3BhZ2F0ZUNvbnRhaW5lckRlYWN0aXZhdGlvblRoZW5CaW5kaW5nQW5kUHJlRGVzdHJveSA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVhY3RpdmF0ZS5iaW5kKHRoaXMucGFyZW50KShiaW5kaW5nLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3koYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95QXN5bmMgPSBmdW5jdGlvbiAoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuX2RlYWN0aXZhdGUuYmluZCh0aGlzLnBhcmVudCkoYmluZGluZywgaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQsIHRoaXMuX2JpbmRpbmdEZWFjdGl2YXRpb25BbmRQcmVEZXN0cm95QXN5bmMoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkucmVtb3ZlKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuQ0FOTk9UX1VOQklORCArIFwiIFwiICsgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyhzZXJ2aWNlSWRlbnRpZmllcikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9iaW5kaW5nRGVhY3RpdmF0aW9uQW5kUHJlRGVzdHJveSA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uKGluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3lBc3luYyA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGJpbmRpbmcub25EZWFjdGl2YXRpb24gPT09IFwiZnVuY3Rpb25cIikpIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGJpbmRpbmcub25EZWFjdGl2YXRpb24oaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCwgdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyO1xufSgpKTtcbmV4cG9ydCB7IENvbnRhaW5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGFpbmVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdEFycmF5RHVwbGljYXRlKGFycmF5KSB7XG4gICAgdmFyIHNlZW5WYWx1ZXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcnJheV8xID0gYXJyYXk7IF9pIDwgYXJyYXlfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gYXJyYXlfMVtfaV07XG4gICAgICAgIGlmIChzZWVuVmFsdWVzLmhhcyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlZW5WYWx1ZXMuYWRkKGVudHJ5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anMuanMubWFwIiwiaW1wb3J0ICogYXMgRVJST1JfTVNHUyBmcm9tIFwiLi4vY29uc3RhbnRzL2Vycm9yX21zZ3NcIjtcbmltcG9ydCAqIGFzIE1FVEFEQVRBX0tFWSBmcm9tIFwiLi4vY29uc3RhbnRzL21ldGFkYXRhX2tleXNcIjtcbmltcG9ydCB7IGdldEZpcnN0QXJyYXlEdXBsaWNhdGUgfSBmcm9tIFwiLi4vdXRpbHMvanNcIjtcbmZ1bmN0aW9uIHRhcmdldElzQ29uc3RydWN0b3JGdW5jdGlvbih0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnByb3RvdHlwZSAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gX3Rocm93SWZNZXRob2RQYXJhbWV0ZXIocGFyYW1ldGVyTmFtZSkge1xuICAgIGlmIChwYXJhbWV0ZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuSU5WQUxJRF9ERUNPUkFUT1JfT1BFUkFUSU9OKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0YWdQYXJhbWV0ZXIoYW5ub3RhdGlvblRhcmdldCwgcGFyYW1ldGVyTmFtZSwgcGFyYW1ldGVySW5kZXgsIG1ldGFkYXRhKSB7XG4gICAgX3Rocm93SWZNZXRob2RQYXJhbWV0ZXIocGFyYW1ldGVyTmFtZSk7XG4gICAgX3RhZ1BhcmFtZXRlck9yUHJvcGVydHkoTUVUQURBVEFfS0VZLlRBR0dFRCwgYW5ub3RhdGlvblRhcmdldCwgcGFyYW1ldGVySW5kZXgudG9TdHJpbmcoKSwgbWV0YWRhdGEpO1xufVxuZnVuY3Rpb24gdGFnUHJvcGVydHkoYW5ub3RhdGlvblRhcmdldCwgcHJvcGVydHlOYW1lLCBtZXRhZGF0YSkge1xuICAgIGlmICh0YXJnZXRJc0NvbnN0cnVjdG9yRnVuY3Rpb24oYW5ub3RhdGlvblRhcmdldCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuSU5WQUxJRF9ERUNPUkFUT1JfT1BFUkFUSU9OKTtcbiAgICB9XG4gICAgX3RhZ1BhcmFtZXRlck9yUHJvcGVydHkoTUVUQURBVEFfS0VZLlRBR0dFRF9QUk9QLCBhbm5vdGF0aW9uVGFyZ2V0LmNvbnN0cnVjdG9yLCBwcm9wZXJ0eU5hbWUsIG1ldGFkYXRhKTtcbn1cbmZ1bmN0aW9uIF9lbnN1cmVOb01ldGFkYXRhS2V5RHVwbGljYXRlcyhtZXRhZGF0YSkge1xuICAgIHZhciBtZXRhZGF0YXMgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXRhZGF0YSkpIHtcbiAgICAgICAgbWV0YWRhdGFzID0gbWV0YWRhdGE7XG4gICAgICAgIHZhciBkdXBsaWNhdGUgPSBnZXRGaXJzdEFycmF5RHVwbGljYXRlKG1ldGFkYXRhcy5tYXAoZnVuY3Rpb24gKG1kKSB7IHJldHVybiBtZC5rZXk7IH0pKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5EVVBMSUNBVEVEX01FVEFEQVRBICsgXCIgXCIgKyBkdXBsaWNhdGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGFkYXRhcyA9IFttZXRhZGF0YV07XG4gICAgfVxuICAgIHJldHVybiBtZXRhZGF0YXM7XG59XG5mdW5jdGlvbiBfdGFnUGFyYW1ldGVyT3JQcm9wZXJ0eShtZXRhZGF0YUtleSwgYW5ub3RhdGlvblRhcmdldCwga2V5LCBtZXRhZGF0YSkge1xuICAgIHZhciBtZXRhZGF0YXMgPSBfZW5zdXJlTm9NZXRhZGF0YUtleUR1cGxpY2F0ZXMobWV0YWRhdGEpO1xuICAgIHZhciBwYXJhbXNPclByb3BlcnRpZXNNZXRhZGF0YSA9IHt9O1xuICAgIGlmIChSZWZsZWN0Lmhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbm5vdGF0aW9uVGFyZ2V0KSkge1xuICAgICAgICBwYXJhbXNPclByb3BlcnRpZXNNZXRhZGF0YSA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFubm90YXRpb25UYXJnZXQpO1xuICAgIH1cbiAgICB2YXIgcGFyYW1PclByb3BlcnR5TWV0YWRhdGEgPSBwYXJhbXNPclByb3BlcnRpZXNNZXRhZGF0YVtrZXldO1xuICAgIGlmIChwYXJhbU9yUHJvcGVydHlNZXRhZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtT3JQcm9wZXJ0eU1ldGFkYXRhID0gW107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGFzLnNvbWUoZnVuY3Rpb24gKG1kKSB7IHJldHVybiBtZC5rZXkgPT09IG0ua2V5OyB9KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLkRVUExJQ0FURURfTUVUQURBVEEgKyBcIiBcIiArIG0ua2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBhcmFtT3JQcm9wZXJ0eU1ldGFkYXRhXzEgPSBwYXJhbU9yUHJvcGVydHlNZXRhZGF0YTsgX2kgPCBwYXJhbU9yUHJvcGVydHlNZXRhZGF0YV8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG0gPSBwYXJhbU9yUHJvcGVydHlNZXRhZGF0YV8xW19pXTtcbiAgICAgICAgICAgIF9sb29wXzEobSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYW1PclByb3BlcnR5TWV0YWRhdGEucHVzaC5hcHBseShwYXJhbU9yUHJvcGVydHlNZXRhZGF0YSwgbWV0YWRhdGFzKTtcbiAgICBwYXJhbXNPclByb3BlcnRpZXNNZXRhZGF0YVtrZXldID0gcGFyYW1PclByb3BlcnR5TWV0YWRhdGE7XG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgcGFyYW1zT3JQcm9wZXJ0aWVzTWV0YWRhdGEsIGFubm90YXRpb25UYXJnZXQpO1xufVxuZnVuY3Rpb24gY3JlYXRlVGFnZ2VkRGVjb3JhdG9yKG1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgaW5kZXhPclByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICBpZiAodHlwZW9mIGluZGV4T3JQcm9wZXJ0eURlc2NyaXB0b3IgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRhZ1BhcmFtZXRlcih0YXJnZXQsIHRhcmdldEtleSwgaW5kZXhPclByb3BlcnR5RGVzY3JpcHRvciwgbWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFnUHJvcGVydHkodGFyZ2V0LCB0YXJnZXRLZXksIG1ldGFkYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBfZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0KSB7XG4gICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfTtcbn1cbmZ1bmN0aW9uIGRlY29yYXRlKGRlY29yYXRvciwgdGFyZ2V0LCBwYXJhbWV0ZXJJbmRleE9yUHJvcGVydHkpIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlckluZGV4T3JQcm9wZXJ0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBfZGVjb3JhdGUoW19wYXJhbShwYXJhbWV0ZXJJbmRleE9yUHJvcGVydHksIGRlY29yYXRvcildLCB0YXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1ldGVySW5kZXhPclByb3BlcnR5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoW2RlY29yYXRvcl0sIHRhcmdldCwgcGFyYW1ldGVySW5kZXhPclByb3BlcnR5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIF9kZWNvcmF0ZShbZGVjb3JhdG9yXSwgdGFyZ2V0KTtcbiAgICB9XG59XG5leHBvcnQgeyBkZWNvcmF0ZSwgdGFnUGFyYW1ldGVyLCB0YWdQcm9wZXJ0eSwgY3JlYXRlVGFnZ2VkRGVjb3JhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvcmF0b3JfdXRpbHMuanMubWFwIiwiaW1wb3J0ICogYXMgRVJST1JTX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgKiBhcyBNRVRBREFUQV9LRVkgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzXCI7XG5mdW5jdGlvbiBpbmplY3RhYmxlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmIChSZWZsZWN0Lmhhc093bk1ldGFkYXRhKE1FVEFEQVRBX0tFWS5QQVJBTV9UWVBFUywgdGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SU19NU0dTLkRVUExJQ0FURURfSU5KRUNUQUJMRV9ERUNPUkFUT1IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0eXBlcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoTUVUQURBVEFfS0VZLkRFU0lHTl9QQVJBTV9UWVBFUywgdGFyZ2V0KSB8fCBbXTtcbiAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShNRVRBREFUQV9LRVkuUEFSQU1fVFlQRVMsIHR5cGVzLCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG59XG5leHBvcnQgeyBpbmplY3RhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmplY3RhYmxlLmpzLm1hcCIsImltcG9ydCB7IFVOREVGSU5FRF9JTkpFQ1RfQU5OT1RBVElPTiB9IGZyb20gXCIuLi9jb25zdGFudHMvZXJyb3JfbXNnc1wiO1xuaW1wb3J0IHsgTWV0YWRhdGEgfSBmcm9tIFwiLi4vcGxhbm5pbmcvbWV0YWRhdGFcIjtcbmltcG9ydCB7IGNyZWF0ZVRhZ2dlZERlY29yYXRvciB9IGZyb20gXCIuL2RlY29yYXRvcl91dGlsc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEJhc2UobWV0YWRhdGFLZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGluZGV4T3JQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlSWRlbnRpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHR5cGVvZiB0YXJnZXQgPT09IFwiZnVuY3Rpb25cIiA/IHRhcmdldC5uYW1lIDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFVOREVGSU5FRF9JTkpFQ1RfQU5OT1RBVElPTihjbGFzc05hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVUYWdnZWREZWNvcmF0b3IobmV3IE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBzZXJ2aWNlSWRlbnRpZmllcikpKHRhcmdldCwgdGFyZ2V0S2V5LCBpbmRleE9yUHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5qZWN0X2Jhc2UuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgaW5qZWN0QmFzZSB9IGZyb20gXCIuL2luamVjdF9iYXNlXCI7XG52YXIgaW5qZWN0ID0gaW5qZWN0QmFzZShNRVRBREFUQV9LRVkuSU5KRUNUX1RBRyk7XG5leHBvcnQgeyBpbmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBQTFVHSU5fU1lTVEVNX0FVVE9fVVBEQVRFID0gJ1BMVUdJTl9TWVNURU1fQVVUT19VUERBVEUnO1xuZXhwb3J0IGNvbnN0IFBMVUdJTl9TWVNURU1fUExVR0lOID0gJ1BMVUdJTl9TWVNURU1fUExVR0lOJztcbmV4cG9ydCBjb25zdCBQTFVHSU5fU1lTVEVNX1RISVJEX1BBUlRZX1BMVUdJTiA9ICdQTFVHSU5fU1lTVEVNX1RISVJEX1BBUlRZX1BMVUdJTic7XG5leHBvcnQgY29uc3QgUExVR0lOX1NZU1RFTV9TQUZFX01PREVfRU5BQkxFRCA9ICdQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEJztcbmV4cG9ydCBjb25zdCBQTFVHSU5fU1RPUkVfVVJMID0gJ1BMVUdJTl9TVE9SRV9VUkwnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZzogUGx1Z2luQ29uZmlnID0ge1xuICAgIFtQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEXTogdHJ1ZSxcbiAgICBbUExVR0lOX1NZU1RFTV9BVVRPX1VQREFURV06IHRydWUsXG4gICAgW1BMVUdJTl9TWVNURU1fUExVR0lOXTogW3sga2V5OiAnc2V0dGluZycsIGVuYWJsZWQ6IHRydWUgfV0sXG4gICAgW1BMVUdJTl9TWVNURU1fVEhJUkRfUEFSVFlfUExVR0lOXTogW10sXG4gICAgW1BMVUdJTl9TVE9SRV9VUkxdOiAnaHR0cHM6Ly9iaXRidWNrZXQub3JnL3NpeXVhbi1wbHVnaW4vc2l5dWFuLXBsdWdpbnMvcmF3L21haW4vJyxcbn07XG4iLCJmdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmxldCBzcmNfdXJsX2VxdWFsX2FuY2hvcjtcbmZ1bmN0aW9uIHNyY191cmxfZXF1YWwoZWxlbWVudF9zcmMsIHVybCkge1xuICAgIGlmICghc3JjX3VybF9lcXVhbF9hbmNob3IpIHtcbiAgICAgICAgc3JjX3VybF9lcXVhbF9hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgfVxuICAgIHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGVsZW1lbnRfc3JjID09PSBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIGlzX2VtcHR5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgc3Vic2NyaWJlKHN0b3JlLCBfID0+IHZhbHVlID0gXykoKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm5cbiAgICAgICAgPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSlcbiAgICAgICAgOiAkJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcbiAgICAgICAgY29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcbiAgICAgICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG59XG5mdW5jdGlvbiBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUoJCRzY29wZSkge1xuICAgIGlmICgkJHNjb3BlLmN0eC5sZW5ndGggPiAzMikge1xuICAgICAgICBjb25zdCBkaXJ0eSA9IFtdO1xuICAgICAgICBjb25zdCBsZW5ndGggPSAkJHNjb3BlLmN0eC5sZW5ndGggLyAzMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGlydHlbaV0gPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlydHk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmIChrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN1bHRba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdCA9IHt9O1xuICAgIGtleXMgPSBuZXcgU2V0KGtleXMpO1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3Q7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Nsb3RzKHNsb3RzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgbm93ID0gaXNfY2xpZW50XG4gICAgPyAoKSA9PiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClcbiAgICA6ICgpID0+IERhdGUubm93KCk7XG5sZXQgcmFmID0gaXNfY2xpZW50ID8gY2IgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIHNldF9ub3coZm4pIHtcbiAgICBub3cgPSBmbjtcbn1cbmZ1bmN0aW9uIHNldF9yYWYoZm4pIHtcbiAgICByYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG59XG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKi9cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIHRhc2tzLmNsZWFyKCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKi9cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgICBsZXQgdGFzaztcbiAgICBpZiAodGFza3Muc2l6ZSA9PT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogbmV3IFByb21pc2UoZnVsZmlsbCA9PiB7XG4gICAgICAgICAgICB0YXNrcy5hZGQodGFzayA9IHsgYzogY2FsbGJhY2ssIGY6IGZ1bGZpbGwgfSk7XG4gICAgICAgIH0pLFxuICAgICAgICBhYm9ydCgpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIFRyYWNrIHdoaWNoIG5vZGVzIGFyZSBjbGFpbWVkIGR1cmluZyBoeWRyYXRpb24uIFVuY2xhaW1lZCBub2RlcyBjYW4gdGhlbiBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuLy8gYXQgdGhlIGVuZCBvZiBoeWRyYXRpb24gd2l0aG91dCB0b3VjaGluZyB0aGUgcmVtYWluaW5nIG5vZGVzLlxubGV0IGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xuZnVuY3Rpb24gc3RhcnRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IHRydWU7XG59XG5mdW5jdGlvbiBlbmRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdXBwZXJfYm91bmQobG93LCBoaWdoLCBrZXksIHZhbHVlKSB7XG4gICAgLy8gUmV0dXJuIGZpcnN0IGluZGV4IG9mIHZhbHVlIGxhcmdlciB0aGFuIGlucHV0IHZhbHVlIGluIHRoZSByYW5nZSBbbG93LCBoaWdoKVxuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IGxvdyArICgoaGlnaCAtIGxvdykgPj4gMSk7XG4gICAgICAgIGlmIChrZXkobWlkKSA8PSB2YWx1ZSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbn1cbmZ1bmN0aW9uIGluaXRfaHlkcmF0ZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0Lmh5ZHJhdGVfaW5pdClcbiAgICAgICAgcmV0dXJuO1xuICAgIHRhcmdldC5oeWRyYXRlX2luaXQgPSB0cnVlO1xuICAgIC8vIFdlIGtub3cgdGhhdCBhbGwgY2hpbGRyZW4gaGF2ZSBjbGFpbV9vcmRlciB2YWx1ZXMgc2luY2UgdGhlIHVuY2xhaW1lZCBoYXZlIGJlZW4gZGV0YWNoZWQgaWYgdGFyZ2V0IGlzIG5vdCA8aGVhZD5cbiAgICBsZXQgY2hpbGRyZW4gPSB0YXJnZXQuY2hpbGROb2RlcztcbiAgICAvLyBJZiB0YXJnZXQgaXMgPGhlYWQ+LCB0aGVyZSBtYXkgYmUgY2hpbGRyZW4gd2l0aG91dCBjbGFpbV9vcmRlclxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdIRUFEJykge1xuICAgICAgICBjb25zdCBteUNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBteUNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4gPSBteUNoaWxkcmVuO1xuICAgIH1cbiAgICAvKlxuICAgICogUmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseS5cbiAgICAqIFdlIGNhbiByZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5IGJ5IGZpbmRpbmcgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugb2ZcbiAgICAqIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgY2xhaW1lZCBpbiBvcmRlciBhbmQgb25seSBtb3ZpbmcgdGhlIHJlc3QuIFRoZSBsb25nZXN0XG4gICAgKiBzdWJzZXF1ZW5jZSBvZiBub2RlcyB0aGF0IGFyZSBjbGFpbWVkIGluIG9yZGVyIGNhbiBiZSBmb3VuZCBieVxuICAgICogY29tcHV0aW5nIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgLmNsYWltX29yZGVyIHZhbHVlcy5cbiAgICAqXG4gICAgKiBUaGlzIGFsZ29yaXRobSBpcyBvcHRpbWFsIGluIGdlbmVyYXRpbmcgdGhlIGxlYXN0IGFtb3VudCBvZiByZW9yZGVyIG9wZXJhdGlvbnNcbiAgICAqIHBvc3NpYmxlLlxuICAgICpcbiAgICAqIFByb29mOlxuICAgICogV2Uga25vdyB0aGF0LCBnaXZlbiBhIHNldCBvZiByZW9yZGVyaW5nIG9wZXJhdGlvbnMsIHRoZSBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlXG4gICAgKiBhbHdheXMgZm9ybSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLCBzaW5jZSB0aGV5IGRvIG5vdCBtb3ZlIGFtb25nIGVhY2ggb3RoZXJcbiAgICAqIG1lYW5pbmcgdGhhdCB0aGV5IG11c3QgYmUgYWxyZWFkeSBvcmRlcmVkIGFtb25nIGVhY2ggb3RoZXIuIFRodXMsIHRoZSBtYXhpbWFsXG4gICAgKiBzZXQgb2Ygbm9kZXMgdGhhdCBkbyBub3QgbW92ZSBmb3JtIGEgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLlxuICAgICovXG4gICAgLy8gQ29tcHV0ZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2VcbiAgICAvLyBtOiBzdWJzZXF1ZW5jZSBsZW5ndGggaiA9PiBpbmRleCBrIG9mIHNtYWxsZXN0IHZhbHVlIHRoYXQgZW5kcyBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGxlbmd0aCBqXG4gICAgY29uc3QgbSA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCArIDEpO1xuICAgIC8vIFByZWRlY2Vzc29yIGluZGljZXMgKyAxXG4gICAgY29uc3QgcCA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgbVswXSA9IC0xO1xuICAgIGxldCBsb25nZXN0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjaGlsZHJlbltpXS5jbGFpbV9vcmRlcjtcbiAgICAgICAgLy8gRmluZCB0aGUgbGFyZ2VzdCBzdWJzZXF1ZW5jZSBsZW5ndGggc3VjaCB0aGF0IGl0IGVuZHMgaW4gYSB2YWx1ZSBsZXNzIHRoYW4gb3VyIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgLy8gdXBwZXJfYm91bmQgcmV0dXJucyBmaXJzdCBncmVhdGVyIHZhbHVlLCBzbyB3ZSBzdWJ0cmFjdCBvbmVcbiAgICAgICAgLy8gd2l0aCBmYXN0IHBhdGggZm9yIHdoZW4gd2UgYXJlIG9uIHRoZSBjdXJyZW50IGxvbmdlc3Qgc3Vic2VxdWVuY2VcbiAgICAgICAgY29uc3Qgc2VxTGVuID0gKChsb25nZXN0ID4gMCAmJiBjaGlsZHJlblttW2xvbmdlc3RdXS5jbGFpbV9vcmRlciA8PSBjdXJyZW50KSA/IGxvbmdlc3QgKyAxIDogdXBwZXJfYm91bmQoMSwgbG9uZ2VzdCwgaWR4ID0+IGNoaWxkcmVuW21baWR4XV0uY2xhaW1fb3JkZXIsIGN1cnJlbnQpKSAtIDE7XG4gICAgICAgIHBbaV0gPSBtW3NlcUxlbl0gKyAxO1xuICAgICAgICBjb25zdCBuZXdMZW4gPSBzZXFMZW4gKyAxO1xuICAgICAgICAvLyBXZSBjYW4gZ3VhcmFudGVlIHRoYXQgY3VycmVudCBpcyB0aGUgc21hbGxlc3QgdmFsdWUuIE90aGVyd2lzZSwgd2Ugd291bGQgaGF2ZSBnZW5lcmF0ZWQgYSBsb25nZXIgc2VxdWVuY2UuXG4gICAgICAgIG1bbmV3TGVuXSA9IGk7XG4gICAgICAgIGxvbmdlc3QgPSBNYXRoLm1heChuZXdMZW4sIGxvbmdlc3QpO1xuICAgIH1cbiAgICAvLyBUaGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIG5vZGVzIChpbml0aWFsbHkgcmV2ZXJzZWQpXG4gICAgY29uc3QgbGlzID0gW107XG4gICAgLy8gVGhlIHJlc3Qgb2YgdGhlIG5vZGVzLCBub2RlcyB0aGF0IHdpbGwgYmUgbW92ZWRcbiAgICBjb25zdCB0b01vdmUgPSBbXTtcbiAgICBsZXQgbGFzdCA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgY3VyID0gbVtsb25nZXN0XSArIDE7IGN1ciAhPSAwOyBjdXIgPSBwW2N1ciAtIDFdKSB7XG4gICAgICAgIGxpcy5wdXNoKGNoaWxkcmVuW2N1ciAtIDFdKTtcbiAgICAgICAgZm9yICg7IGxhc3QgPj0gY3VyOyBsYXN0LS0pIHtcbiAgICAgICAgICAgIHRvTW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0LS07XG4gICAgfVxuICAgIGZvciAoOyBsYXN0ID49IDA7IGxhc3QtLSkge1xuICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgfVxuICAgIGxpcy5yZXZlcnNlKCk7XG4gICAgLy8gV2Ugc29ydCB0aGUgbm9kZXMgYmVpbmcgbW92ZWQgdG8gZ3VhcmFudGVlIHRoYXQgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIG1hdGNoZXMgdGhlIGNsYWltIG9yZGVyXG4gICAgdG9Nb3ZlLnNvcnQoKGEsIGIpID0+IGEuY2xhaW1fb3JkZXIgLSBiLmNsYWltX29yZGVyKTtcbiAgICAvLyBGaW5hbGx5LCB3ZSBtb3ZlIHRoZSBub2Rlc1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IHRvTW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB3aGlsZSAoaiA8IGxpcy5sZW5ndGggJiYgdG9Nb3ZlW2ldLmNsYWltX29yZGVyID49IGxpc1tqXS5jbGFpbV9vcmRlcikge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGogPCBsaXMubGVuZ3RoID8gbGlzW2pdIDogbnVsbDtcbiAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZSh0b01vdmVbaV0sIGFuY2hvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBzdHlsZV9zaGVldF9pZCwgc3R5bGVzKSB7XG4gICAgY29uc3QgYXBwZW5kX3N0eWxlc190byA9IGdldF9yb290X2Zvcl9zdHlsZSh0YXJnZXQpO1xuICAgIGlmICghYXBwZW5kX3N0eWxlc190by5nZXRFbGVtZW50QnlJZChzdHlsZV9zaGVldF9pZCkpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS5pZCA9IHN0eWxlX3NoZWV0X2lkO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgICAgICAgYXBwZW5kX3N0eWxlc2hlZXQoYXBwZW5kX3N0eWxlc190bywgc3R5bGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9yb290X2Zvcl9zdHlsZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0Um9vdE5vZGUgPyBub2RlLmdldFJvb3ROb2RlKCkgOiBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKHJvb3QgJiYgcm9vdC5ob3N0KSB7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSkge1xuICAgIGNvbnN0IHN0eWxlX2VsZW1lbnQgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgIGFwcGVuZF9zdHlsZXNoZWV0KGdldF9yb290X2Zvcl9zdHlsZShub2RlKSwgc3R5bGVfZWxlbWVudCk7XG4gICAgcmV0dXJuIHN0eWxlX2VsZW1lbnQuc2hlZXQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzaGVldChub2RlLCBzdHlsZSkge1xuICAgIGFwcGVuZChub2RlLmhlYWQgfHwgbm9kZSwgc3R5bGUpO1xuICAgIHJldHVybiBzdHlsZS5zaGVldDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZykge1xuICAgICAgICBpbml0X2h5ZHJhdGUodGFyZ2V0KTtcbiAgICAgICAgaWYgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9PT0gdW5kZWZpbmVkKSB8fCAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQucGFyZW50Tm9kZSAhPT0gdGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2tpcCBub2RlcyBvZiB1bmRlZmluZWQgb3JkZXJpbmdcbiAgICAgICAgd2hpbGUgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcbiAgICAgICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9IGFuY2hvcikge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC5pc1RydXN0ZWQpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YV9tYXAobm9kZSwgZGF0YV9tYXApIHtcbiAgICBPYmplY3Qua2V5cyhkYXRhX21hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIGtleSwgZGF0YV9tYXBba2V5XSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHR5cGVvZiBub2RlW3Byb3BdID09PSAnYm9vbGVhbicgJiYgdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBpbml0X2NsYWltX2luZm8obm9kZXMpIHtcbiAgICBpZiAobm9kZXMuY2xhaW1faW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGVzLmNsYWltX2luZm8gPSB7IGxhc3RfaW5kZXg6IDAsIHRvdGFsX2NsYWltZWQ6IDAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFpbV9ub2RlKG5vZGVzLCBwcmVkaWNhdGUsIHByb2Nlc3NOb2RlLCBjcmVhdGVOb2RlLCBkb250VXBkYXRlTGFzdEluZGV4ID0gZmFsc2UpIHtcbiAgICAvLyBUcnkgdG8gZmluZCBub2RlcyBpbiBhbiBvcmRlciBzdWNoIHRoYXQgd2UgbGVuZ3RoZW4gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgcmVzdWx0Tm9kZSA9ICgoKSA9PiB7XG4gICAgICAgIC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4OyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcbiAgICAgICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2Ugc3BsaWNlZCBiZWZvcmUgdGhlIGxhc3RfaW5kZXgsIHdlIGRlY3JlYXNlIGl0XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIHJldHVybiBjcmVhdGVOb2RlKCk7XG4gICAgfSkoKTtcbiAgICByZXN1bHROb2RlLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgIG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuICAgIHJldHVybiByZXN1bHROb2RlO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSwgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZS5mb3JFYWNoKHYgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sICgpID0+IGNyZWF0ZV9lbGVtZW50KG5hbWUpKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnX2VsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gMywgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVN0ciA9ICcnICsgZGF0YTtcbiAgICAgICAgaWYgKG5vZGUuZGF0YS5zdGFydHNXaXRoKGRhdGFTdHIpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5kYXRhLmxlbmd0aCAhPT0gZGF0YVN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YVN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gZGF0YVN0cjtcbiAgICAgICAgfVxuICAgIH0sICgpID0+IHRleHQoZGF0YSksIHRydWUgLy8gVGV4dCBub2RlcyBzaG91bGQgbm90IHVwZGF0ZSBsYXN0IGluZGV4IHNpbmNlIGl0IGlzIGxpa2VseSBub3Qgd29ydGggaXQgdG8gZWxpbWluYXRlIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgYWN0dWFsIGVsZW1lbnRzXG4gICAgKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBmaW5kX2NvbW1lbnQobm9kZXMsIHRleHQsIHN0YXJ0KSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8gJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkgPT09IHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2RlcywgaXNfc3ZnKSB7XG4gICAgLy8gZmluZCBodG1sIG9wZW5pbmcgdGFnXG4gICAgY29uc3Qgc3RhcnRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19TVEFSVCcsIDApO1xuICAgIGNvbnN0IGVuZF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4KTtcbiAgICBpZiAoc3RhcnRfaW5kZXggPT09IGVuZF9pbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24odW5kZWZpbmVkLCBpc19zdmcpO1xuICAgIH1cbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzW2h0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDFdKTtcbiAgICBjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG4gICAgZm9yIChjb25zdCBuIG9mIGNsYWltZWRfbm9kZXMpIHtcbiAgICAgICAgbi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihjbGFpbWVkX25vZGVzLCBpc19zdmcpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSAtMTsgLy8gbm8gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZFxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG4gICAgICAgICdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+XCI7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGJ1YmJsZXMgPSBmYWxzZSwgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIGhlYWRfc2VsZWN0b3Iobm9kZUlkLCBoZWFkKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHN0YXJ0ZWQgPSAwO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBoZWFkLmNoaWxkTm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogY29tbWVudCBub2RlICovKSB7XG4gICAgICAgICAgICBjb25zdCBjb21tZW50ID0gbm9kZS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICAgICAgICBpZiAoY29tbWVudCA9PT0gYEhFQURfJHtub2RlSWR9X0VORGApIHtcbiAgICAgICAgICAgICAgICBzdGFydGVkIC09IDE7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fU1RBUlRgKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRlZCArPSAxO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXJ0ZWQgPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoaXNfc3ZnID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBpc19zdmc7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc19zdmcpXG4gICAgICAgICAgICAgICAgdGhpcy5lID0gc3ZnX2VsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmNsYXNzIEh0bWxUYWdIeWRyYXRpb24gZXh0ZW5kcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzLCBpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihpc19zdmcpO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMubCkge1xuICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuYyhodG1sKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50KGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgICByZXR1cm4gbmV3IGNvbXBvbmVudChwcm9wcyk7XG59XG5cbi8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGZvciBtdWx0aXBsZSBkb2N1bWVudHMgYmVjYXVzZSBhIFN2ZWx0ZSBhcHBsaWNhdGlvbiBjb3VsZCBhbHNvIGNvbnRhaW4gaWZyYW1lc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMzYyNFxuY29uc3QgbWFuYWdlZF9zdHlsZXMgPSBuZXcgTWFwKCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKSB7XG4gICAgY29uc3QgaW5mbyA9IHsgc3R5bGVzaGVldDogYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSksIHJ1bGVzOiB7fSB9O1xuICAgIG1hbmFnZWRfc3R5bGVzLnNldChkb2MsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSk7XG4gICAgY29uc3QgeyBzdHlsZXNoZWV0LCBydWxlcyB9ID0gbWFuYWdlZF9zdHlsZXMuZ2V0KGRvYykgfHwgY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSk7XG4gICAgaWYgKCFydWxlc1tuYW1lXSkge1xuICAgICAgICBydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3duZXJOb2RlIH0gPSBpbmZvLnN0eWxlc2hlZXQ7XG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBvd25lck5vZGUgaWYgaXQgcnVucyBvbiBqc2RvbS5cbiAgICAgICAgICAgIGlmIChvd25lck5vZGUpXG4gICAgICAgICAgICAgICAgZGV0YWNoKG93bmVyTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZCBhZnRlciBhbnkgc3RhdGUgY2hhbmdlLlxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBydW5zIHdpbGwgYmUgYmVmb3JlIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1iZWZvcmV1cGRhdGVcbiAqL1xuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbi8qKlxuICogVGhlIGBvbk1vdW50YCBmdW5jdGlvbiBzY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gYXMgc29vbiBhcyB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgdG8gdGhlIERPTS5cbiAqIEl0IG11c3QgYmUgY2FsbGVkIGR1cmluZyB0aGUgY29tcG9uZW50J3MgaW5pdGlhbGlzYXRpb24gKGJ1dCBkb2Vzbid0IG5lZWQgdG8gbGl2ZSAqaW5zaWRlKiB0aGUgY29tcG9uZW50O1xuICogaXQgY2FuIGJlIGNhbGxlZCBmcm9tIGFuIGV4dGVybmFsIG1vZHVsZSkuXG4gKlxuICogYG9uTW91bnRgIGRvZXMgbm90IHJ1biBpbnNpZGUgYSBbc2VydmVyLXNpZGUgY29tcG9uZW50XSgvZG9jcyNydW4tdGltZS1zZXJ2ZXItc2lkZS1jb21wb25lbnQtYXBpKS5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtb25tb3VudFxuICovXG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBhZnRlciB0aGUgaW5pdGlhbCBgb25Nb3VudGBcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gKlxuICogT3V0IG9mIGBvbk1vdW50YCwgYGJlZm9yZVVwZGF0ZWAsIGBhZnRlclVwZGF0ZWAgYW5kIGBvbkRlc3Ryb3lgLCB0aGlzIGlzIHRoZVxuICogb25seSBvbmUgdGhhdCBydW5zIGluc2lkZSBhIHNlcnZlci1zaWRlIGNvbXBvbmVudC5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtb25kZXN0cm95XG4gKi9cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gZXZlbnQgZGlzcGF0Y2hlciB0aGF0IGNhbiBiZSB1c2VkIHRvIGRpc3BhdGNoIFtjb21wb25lbnQgZXZlbnRzXSgvZG9jcyN0ZW1wbGF0ZS1zeW50YXgtY29tcG9uZW50LWRpcmVjdGl2ZXMtb24tZXZlbnRuYW1lKS5cbiAqIEV2ZW50IGRpc3BhdGNoZXJzIGFyZSBmdW5jdGlvbnMgdGhhdCBjYW4gdGFrZSB0d28gYXJndW1lbnRzOiBgbmFtZWAgYW5kIGBkZXRhaWxgLlxuICpcbiAqIENvbXBvbmVudCBldmVudHMgY3JlYXRlZCB3aXRoIGBjcmVhdGVFdmVudERpc3BhdGNoZXJgIGNyZWF0ZSBhXG4gKiBbQ3VzdG9tRXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudCkuXG4gKiBUaGVzZSBldmVudHMgZG8gbm90IFtidWJibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vSmF2YVNjcmlwdC9CdWlsZGluZ19ibG9ja3MvRXZlbnRzI0V2ZW50X2J1YmJsaW5nX2FuZF9jYXB0dXJlKS5cbiAqIFRoZSBgZGV0YWlsYCBhcmd1bWVudCBjb3JyZXNwb25kcyB0byB0aGUgW0N1c3RvbUV2ZW50LmRldGFpbF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L2RldGFpbClcbiAqIHByb3BlcnR5IGFuZCBjYW4gY29udGFpbiBhbnkgdHlwZSBvZiBkYXRhLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1jcmVhdGVldmVudGRpc3BhdGNoZXJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8qKlxuICogQXNzb2NpYXRlcyBhbiBhcmJpdHJhcnkgYGNvbnRleHRgIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IGNvbXBvbmVudCBhbmQgdGhlIHNwZWNpZmllZCBga2V5YFxuICogYW5kIHJldHVybnMgdGhhdCBvYmplY3QuIFRoZSBjb250ZXh0IGlzIHRoZW4gYXZhaWxhYmxlIHRvIGNoaWxkcmVuIG9mIHRoZSBjb21wb25lbnRcbiAqIChpbmNsdWRpbmcgc2xvdHRlZCBjb250ZW50KSB3aXRoIGBnZXRDb250ZXh0YC5cbiAqXG4gKiBMaWtlIGxpZmVjeWNsZSBmdW5jdGlvbnMsIHRoaXMgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtc2V0Y29udGV4dFxuICovXG5mdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1nZXRjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgd2hvbGUgY29udGV4dCBtYXAgdGhhdCBiZWxvbmdzIHRvIHRoZSBjbG9zZXN0IHBhcmVudCBjb21wb25lbnQuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLiBVc2VmdWwsIGZvciBleGFtcGxlLCBpZiB5b3VcbiAqIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGEgY29tcG9uZW50IGFuZCB3YW50IHRvIHBhc3MgdGhlIGV4aXN0aW5nIGNvbnRleHQgdG8gaXQuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWdldGFsbGNvbnRleHRzXG4gKi9cbmZ1bmN0aW9uIGdldEFsbENvbnRleHRzKCkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0O1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIGBrZXlgIGhhcyBiZWVuIHNldCBpbiB0aGUgY29udGV4dCBvZiBhIHBhcmVudCBjb21wb25lbnQuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1oYXNjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmNvbnN0IGludHJvcyA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbmNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5jb25zdCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5jb25zdCBmbHVzaF9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlc29sdmVkX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbmxldCB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5mdW5jdGlvbiBzY2hlZHVsZV91cGRhdGUoKSB7XG4gICAgaWYgKCF1cGRhdGVfc2NoZWR1bGVkKSB7XG4gICAgICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRpY2soKSB7XG4gICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgcmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5mdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG4gICAgcmVuZGVyX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFkZF9mbHVzaF9jYWxsYmFjayhmbikge1xuICAgIGZsdXNoX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbi8vIGZsdXNoKCkgY2FsbHMgY2FsbGJhY2tzIGluIHRoaXMgb3JkZXI6XG4vLyAxLiBBbGwgYmVmb3JlVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuXG4vLyAyLiBBbGwgYmluZDp0aGlzIGNhbGxiYWNrcywgaW4gcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyAzLiBBbGwgYWZ0ZXJVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIEVYQ0VQVFxuLy8gICAgZm9yIGFmdGVyVXBkYXRlcyBjYWxsZWQgZHVyaW5nIHRoZSBpbml0aWFsIG9uTW91bnQsIHdoaWNoIGFyZSBjYWxsZWQgaW5cbi8vICAgIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gU2luY2UgY2FsbGJhY2tzIG1pZ2h0IHVwZGF0ZSBjb21wb25lbnQgdmFsdWVzLCB3aGljaCBjb3VsZCB0cmlnZ2VyIGFub3RoZXJcbi8vIGNhbGwgdG8gZmx1c2goKSwgdGhlIGZvbGxvd2luZyBzdGVwcyBndWFyZCBhZ2FpbnN0IHRoaXM6XG4vLyAxLiBEdXJpbmcgYmVmb3JlVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4vLyAgICBkaXJ0eV9jb21wb25lbnRzIGFycmF5IGFuZCB3aWxsIGNhdXNlIGEgcmVlbnRyYW50IGNhbGwgdG8gZmx1c2goKS4gQmVjYXVzZVxuLy8gICAgdGhlIGZsdXNoIGluZGV4IGlzIGtlcHQgb3V0c2lkZSB0aGUgZnVuY3Rpb24sIHRoZSByZWVudHJhbnQgY2FsbCB3aWxsIHBpY2tcbi8vICAgIHVwIHdoZXJlIHRoZSBlYXJsaWVyIGNhbGwgbGVmdCBvZmYgYW5kIGdvIHRocm91Z2ggYWxsIGRpcnR5IGNvbXBvbmVudHMuIFRoZVxuLy8gICAgY3VycmVudF9jb21wb25lbnQgdmFsdWUgaXMgc2F2ZWQgYW5kIHJlc3RvcmVkIHNvIHRoYXQgdGhlIHJlZW50cmFudCBjYWxsIHdpbGxcbi8vICAgIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgXCJwYXJlbnRcIiBmbHVzaCgpIGNhbGwuXG4vLyAyLiBiaW5kOnRoaXMgY2FsbGJhY2tzIGNhbm5vdCB0cmlnZ2VyIG5ldyBmbHVzaCgpIGNhbGxzLlxuLy8gMy4gRHVyaW5nIGFmdGVyVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgTk9UIGhhdmUgdGhlaXIgYWZ0ZXJVcGRhdGVcbi8vICAgIGNhbGxiYWNrIGNhbGxlZCBhIHNlY29uZCB0aW1lOyB0aGUgc2Vlbl9jYWxsYmFja3Mgc2V0LCBvdXRzaWRlIHRoZSBmbHVzaCgpXG4vLyAgICBmdW5jdGlvbiwgZ3VhcmFudGVlcyB0aGlzIGJlaGF2aW9yLlxuY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyBEbyBub3QgcmVlbnRlciBmbHVzaCB3aGlsZSBkaXJ0eSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBhcyB0aGlzIGNhblxuICAgIC8vIHJlc3VsdCBpbiBhbiBpbmZpbml0ZSBsb29wLiBJbnN0ZWFkLCBsZXQgdGhlIGlubmVyIGZsdXNoIGhhbmRsZSBpdC5cbiAgICAvLyBSZWVudHJhbmN5IGlzIG9rIGFmdGVyd2FyZHMgZm9yIGJpbmRpbmdzIGV0Yy5cbiAgICBpZiAoZmx1c2hpZHggIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzYXZlZF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAoZmx1c2hpZHggPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuICAgICAgICAgICAgICAgIGZsdXNoaWR4Kys7XG4gICAgICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IGRpcnR5IHN0YXRlIHRvIG5vdCBlbmQgdXAgaW4gYSBkZWFkbG9ja2VkIHN0YXRlIGFuZCB0aGVuIHJldGhyb3dcbiAgICAgICAgICAgIGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZsdXNoaWR4ID0gMDtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGZsdXNoaWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcbiAgICAgICAgICAgICAgICBzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHNhdmVkX2NvbXBvbmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnaW4nIH07XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ291dCcgfTtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuICAgIGdyb3VwLnIgKz0gMTtcbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMSwgMCwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKG9wdGlvbnMpO1xuICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQocmVzZXQpIHtcbiAgICAgICAgICAgIGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy50aWNrKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zLCBpbnRybykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ2JvdGgnIH07XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IChwcm9ncmFtLmIgLSB0KTtcbiAgICAgICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhOiB0LFxuICAgICAgICAgICAgYjogcHJvZ3JhbS5iLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgc3RhcnQ6IHByb2dyYW0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcbiAgICAgICAgICAgIGdyb3VwOiBwcm9ncmFtLmdyb3VwXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVfcHJvbWlzZShwcm9taXNlLCBpbmZvKSB7XG4gICAgY29uc3QgdG9rZW4gPSBpbmZvLnRva2VuID0ge307XG4gICAgZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmZvLnRva2VuICE9PSB0b2tlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuICAgICAgICBsZXQgY2hpbGRfY3R4ID0gaW5mby5jdHg7XG4gICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2hpbGRfY3R4ID0gY2hpbGRfY3R4LnNsaWNlKCk7XG4gICAgICAgICAgICBjaGlsZF9jdHhba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdHlwZSAmJiAoaW5mby5jdXJyZW50ID0gdHlwZSkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IG5lZWRzX2ZsdXNoID0gZmFsc2U7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5ibG9ja3NbaV0gPT09IGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2NrLmQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgICAgIGJsb2NrLm0oaW5mby5tb3VudCgpLCBpbmZvLmFuY2hvcik7XG4gICAgICAgICAgICBuZWVkc19mbHVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5ibG9jayA9IGJsb2NrO1xuICAgICAgICBpZiAoaW5mby5ibG9ja3MpXG4gICAgICAgICAgICBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcbiAgICAgICAgaWYgKG5lZWRzX2ZsdXNoKSB7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgICAgIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8uY2F0Y2gsIDIsIGluZm8uZXJyb3IsIGVycm9yKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgICAgIGlmICghaW5mby5oYXNDYXRjaCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuICAgIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICAgIGNvbnN0IHsgcmVzb2x2ZWQgfSA9IGluZm87XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLnZhbHVlXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLmNhdGNoKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpbmZvLmJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG59XG5cbmNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsVGhpc1xuICAgICAgICA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG4gICAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2luZXJ0JyxcbiAgICAnaXNtYXAnLFxuICAgICdpdGVtc2NvcGUnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbi8qKiByZWdleCBvZiBhbGwgaHRtbCB2b2lkIGVsZW1lbnQgbmFtZXMgKi9cbmNvbnN0IHZvaWRfZWxlbWVudF9uYW1lcyA9IC9eKD86YXJlYXxiYXNlfGJyfGNvbHxjb21tYW5kfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnIpJC87XG5mdW5jdGlvbiBpc192b2lkKG5hbWUpIHtcbiAgICByZXR1cm4gdm9pZF9lbGVtZW50X25hbWVzLnRlc3QobmFtZSkgfHwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnIWRvY3R5cGUnO1xufVxuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzLCBhdHRyc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGF0dHJzX3RvX2FkZCkge1xuICAgICAgICBjb25zdCBjbGFzc2VzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5jbGFzc2VzO1xuICAgICAgICBjb25zdCBzdHlsZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLnN0eWxlcztcbiAgICAgICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyArPSAnICcgKyBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlc190b19hZGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcobWVyZ2Vfc3NyX3N0eWxlcyhhdHRyaWJ1dGVzLnN0eWxlLCBzdHlsZXNfdG9fYWRkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHIgKz0gYCAke25hbWV9PVwiJHt2YWx1ZX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gbWVyZ2Vfc3NyX3N0eWxlcyhzdHlsZV9hdHRyaWJ1dGUsIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgIGNvbnN0IHN0eWxlX29iamVjdCA9IHt9O1xuICAgIGZvciAoY29uc3QgaW5kaXZpZHVhbF9zdHlsZSBvZiBzdHlsZV9hdHRyaWJ1dGUuc3BsaXQoJzsnKSkge1xuICAgICAgICBjb25zdCBjb2xvbl9pbmRleCA9IGluZGl2aWR1YWxfc3R5bGUuaW5kZXhPZignOicpO1xuICAgICAgICBjb25zdCBuYW1lID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZSgwLCBjb2xvbl9pbmRleCkudHJpbSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoY29sb25faW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgIGlmICghbmFtZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlX2RpcmVjdGl2ZVtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZV9vYmplY3RbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlX29iamVjdDtcbn1cbmNvbnN0IEFUVFJfUkVHRVggPSAvWyZcIl0vZztcbmNvbnN0IENPTlRFTlRfUkVHRVggPSAvWyY8XS9nO1xuLyoqXG4gKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyBwZXJmb3JtYW5jZSBzZW5zaXRpdmUgYW5kIGhhcyBiZWVuIG9wdGltaXplZFxuICogaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzU3MDFcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHZhbHVlLCBpc19hdHRyID0gZmFsc2UpIHtcbiAgICBjb25zdCBzdHIgPSBTdHJpbmcodmFsdWUpO1xuICAgIGNvbnN0IHBhdHRlcm4gPSBpc19hdHRyID8gQVRUUl9SRUdFWCA6IENPTlRFTlRfUkVHRVg7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgIGxldCBlc2NhcGVkID0gJyc7XG4gICAgbGV0IGxhc3QgPSAwO1xuICAgIHdoaWxlIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuICAgICAgICBjb25zdCBpID0gcGF0dGVybi5sYXN0SW5kZXggLSAxO1xuICAgICAgICBjb25zdCBjaCA9IHN0cltpXTtcbiAgICAgICAgZXNjYXBlZCArPSBzdHIuc3Vic3RyaW5nKGxhc3QsIGkpICsgKGNoID09PSAnJicgPyAnJmFtcDsnIDogKGNoID09PSAnXCInID8gJyZxdW90OycgOiAnJmx0OycpKTtcbiAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gZXNjYXBlZCArIHN0ci5zdWJzdHJpbmcobGFzdCk7XG59XG5mdW5jdGlvbiBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKHZhbHVlKSB7XG4gICAgLy8ga2VlcCBib29sZWFucywgbnVsbCwgYW5kIHVuZGVmaW5lZCBmb3IgdGhlIHNha2Ugb2YgYHNwcmVhZGBcbiAgICBjb25zdCBzaG91bGRfZXNjYXBlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG4gICAgcmV0dXJuIHNob3VsZF9lc2NhcGUgPyBlc2NhcGUodmFsdWUsIHRydWUpIDogdmFsdWU7XG59XG5mdW5jdGlvbiBlc2NhcGVfb2JqZWN0KG9iaikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlcy4gT3RoZXJ3aXNlIHlvdSBtYXkgbmVlZCB0byBmaXggYSA8JHtuYW1lfT4uYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChjb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgeyAkJHNsb3RzID0ge30sIGNvbnRleHQgPSBuZXcgTWFwKCkgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sICQkc2xvdHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSAoYm9vbGVhbiAmJiB2YWx1ZSA9PT0gdHJ1ZSkgPyAnJyA6IGA9XCIke2VzY2FwZSh2YWx1ZSwgdHJ1ZSl9XCJgO1xuICAgIHJldHVybiBgICR7bmFtZX0ke2Fzc2lnbm1lbnR9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke2VzY2FwZV9hdHRyaWJ1dGVfdmFsdWUoc3R5bGVfb2JqZWN0W2tleV0pfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gY29tcG9uZW50LiQkLm9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBpZiB0aGUgY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIC8vIGl0IHdpbGwgdXBkYXRlIHRoZSBgJCQub25fZGVzdHJveWAgcmVmZXJlbmNlIHRvIGBudWxsYC5cbiAgICAgICAgICAgIC8vIHRoZSBkZXN0cnVjdHVyZWQgb25fZGVzdHJveSBtYXkgc3RpbGwgcmVmZXJlbmNlIHRvIHRoZSBvbGQgYXJyYXlcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuJCQub25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgICAgIHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgICQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgICQkLmN0eCA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgICAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgICB9XG4gICAgY29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gKDEgPDwgKGkgJSAzMSkpO1xufVxuZnVuY3Rpb24gaW5pdChjb21wb25lbnQsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIG5vdF9lcXVhbCwgcHJvcHMsIGFwcGVuZF9zdHlsZXMsIGRpcnR5ID0gWy0xXSkge1xuICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogW10sXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuICAgIH07XG4gICAgYXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAkc2V0KCQkcHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy4kJHNldCgkJHByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXNwYXRjaF9kZXYodHlwZSwgZGV0YWlsKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQodHlwZSwgT2JqZWN0LmFzc2lnbih7IHZlcnNpb246ICczLjU1LjEnIH0sIGRldGFpbCksIHsgYnViYmxlczogdHJ1ZSB9KSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmUnLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuICAgIGlmIChoYXNfcHJldmVudF9kZWZhdWx0KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgncHJldmVudERlZmF1bHQnKTtcbiAgICBpZiAoaGFzX3N0b3BfcHJvcGFnYXRpb24pXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdzdG9wUHJvcGFnYXRpb24nKTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlIH0pO1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0UHJvcGVydHknLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGEnLCB7IG5vZGU6IHRleHQsIGRhdGEgfSk7XG4gICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnICYmICEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykpIHtcbiAgICAgICAgbGV0IG1zZyA9ICd7I2VhY2h9IG9ubHkgaXRlcmF0ZXMgb3ZlciBhcnJheS1saWtlIG9iamVjdHMuJztcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpIHtcbiAgICAgICAgICAgIG1zZyArPSAnIFlvdSBjYW4gdXNlIGEgc3ByZWFkIHRvIGNvbnZlcnQgdGhpcyBpdGVyYWJsZSBpbnRvIGFuIGFycmF5Lic7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfc2xvdHMobmFtZSwgc2xvdCwga2V5cykge1xuICAgIGZvciAoY29uc3Qgc2xvdF9rZXkgb2YgT2JqZWN0LmtleXMoc2xvdCkpIHtcbiAgICAgICAgaWYgKCF+a2V5cy5pbmRleE9mKHNsb3Rfa2V5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGA8JHtuYW1lfT4gcmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBzbG90IFwiJHtzbG90X2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcbiAgICBjb25zdCBpc19zdHJpbmcgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJztcbiAgICBpZiAodGFnICYmICFpc19zdHJpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCc8c3ZlbHRlOmVsZW1lbnQ+IGV4cGVjdHMgXCJ0aGlzXCIgYXR0cmlidXRlIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50KHRhZykge1xuICAgIGlmICh0YWcgJiYgaXNfdm9pZCh0YWcpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgPHN2ZWx0ZTplbGVtZW50IHRoaXM9XCIke3RhZ31cIj4gaXMgc2VsZi1jbG9zaW5nIGFuZCBjYW5ub3QgaGF2ZSBjb250ZW50LmApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50X2Rldihjb21wb25lbnQsIHByb3BzKSB7XG4gICAgY29uc3QgZXJyb3JfbWVzc2FnZSA9ICd0aGlzPXsuLi59IG9mIDxzdmVsdGU6Y29tcG9uZW50PiBzaG91bGQgc3BlY2lmeSBhIFN2ZWx0ZSBjb21wb25lbnQuJztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBjb21wb25lbnQocHJvcHMpO1xuICAgICAgICBpZiAoIWluc3RhbmNlLiQkIHx8ICFpbnN0YW5jZS4kc2V0IHx8ICFpbnN0YW5jZS4kb24gfHwgIWluc3RhbmNlLiRkZXN0cm95KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gZXJyO1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIG1lc3NhZ2UuaW5kZXhPZignaXMgbm90IGEgY29uc3RydWN0b3InKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMgd2l0aCBzb21lIG1pbm9yIGRldi1lbmhhbmNlbWVudHMuIFVzZWQgd2hlbiBkZXY9dHJ1ZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAoIW9wdGlvbnMudGFyZ2V0ICYmICFvcHRpb25zLiQkaW5saW5lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3RhcmdldCcgaXMgYSByZXF1aXJlZCBvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIHRvIGNyZWF0ZSBzdHJvbmdseSB0eXBlZCBTdmVsdGUgY29tcG9uZW50cy5cbiAqIFRoaXMgb25seSBleGlzdHMgZm9yIHR5cGluZyBwdXJwb3NlcyBhbmQgc2hvdWxkIGJlIHVzZWQgaW4gYC5kLnRzYCBmaWxlcy5cbiAqXG4gKiAjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50VHlwZWQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnRUeXBlZDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogYGBgXG4gKiBUeXBpbmcgdGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgSURFcyBsaWtlIFZTIENvZGUgd2l0aCB0aGUgU3ZlbHRlIGV4dGVuc2lvblxuICogdG8gcHJvdmlkZSBpbnRlbGxpc2Vuc2UgYW5kIHRvIHVzZSB0aGUgY29tcG9uZW50IGxpa2UgdGhpcyBpbiBhIFN2ZWx0ZSBmaWxlXG4gKiB3aXRoIFR5cGVTY3JpcHQ6XG4gKiBgYGBzdmVsdGVcbiAqIDxzY3JpcHQgbGFuZz1cInRzXCI+XG4gKiBcdGltcG9ydCB7IE15Q29tcG9uZW50IH0gZnJvbSBcImNvbXBvbmVudC1saWJyYXJ5XCI7XG4gKiA8L3NjcmlwdD5cbiAqIDxNeUNvbXBvbmVudCBmb289eydiYXInfSAvPlxuICogYGBgXG4gKlxuICogIyMjIyBXaHkgbm90IG1ha2UgdGhpcyBwYXJ0IG9mIGBTdmVsdGVDb21wb25lbnQoRGV2KWA/XG4gKiBCZWNhdXNlXG4gKiBgYGB0c1xuICogY2xhc3MgQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGNvbnN0IGNvbXBvbmVudDogdHlwZW9mIFN2ZWx0ZUNvbXBvbmVudCA9IEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50O1xuICogYGBgXG4gKiB3aWxsIHRocm93IGEgdHlwZSBlcnJvciwgc28gd2UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgbW9yZSBzdHJpY3RseSB0eXBlZCBjbGFzcy5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AgZGV0ZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IEh0bWxUYWcsIEh0bWxUYWdIeWRyYXRpb24sIFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50RGV2LCBTdmVsdGVDb21wb25lbnRUeXBlZCwgU3ZlbHRlRWxlbWVudCwgYWN0aW9uX2Rlc3Ryb3llciwgYWRkX2F0dHJpYnV0ZSwgYWRkX2NsYXNzZXMsIGFkZF9mbHVzaF9jYWxsYmFjaywgYWRkX2xvY2F0aW9uLCBhZGRfcmVuZGVyX2NhbGxiYWNrLCBhZGRfcmVzaXplX2xpc3RlbmVyLCBhZGRfc3R5bGVzLCBhZGRfdHJhbnNmb3JtLCBhZnRlclVwZGF0ZSwgYXBwZW5kLCBhcHBlbmRfZGV2LCBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldCwgYXBwZW5kX2h5ZHJhdGlvbiwgYXBwZW5kX2h5ZHJhdGlvbl9kZXYsIGFwcGVuZF9zdHlsZXMsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGF0dHJpYnV0ZV90b19vYmplY3QsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX2h0bWxfdGFnLCBjbGFpbV9zcGFjZSwgY2xhaW1fc3ZnX2VsZW1lbnQsIGNsYWltX3RleHQsIGNsZWFyX2xvb3BzLCBjb21wb25lbnRfc3Vic2NyaWJlLCBjb21wdXRlX3Jlc3RfcHJvcHMsIGNvbXB1dGVfc2xvdHMsIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50LCBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudF9kZXYsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgY3JlYXRlX2FuaW1hdGlvbiwgY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiwgY3JlYXRlX2NvbXBvbmVudCwgY3JlYXRlX2luX3RyYW5zaXRpb24sIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbiwgY3JlYXRlX3Nsb3QsIGNyZWF0ZV9zc3JfY29tcG9uZW50LCBjdXJyZW50X2NvbXBvbmVudCwgY3VzdG9tX2V2ZW50LCBkYXRhc2V0X2RldiwgZGVidWcsIGRlc3Ryb3lfYmxvY2ssIGRlc3Ryb3lfY29tcG9uZW50LCBkZXN0cm95X2VhY2gsIGRldGFjaCwgZGV0YWNoX2FmdGVyX2RldiwgZGV0YWNoX2JlZm9yZV9kZXYsIGRldGFjaF9iZXR3ZWVuX2RldiwgZGV0YWNoX2RldiwgZGlydHlfY29tcG9uZW50cywgZGlzcGF0Y2hfZGV2LCBlYWNoLCBlbGVtZW50LCBlbGVtZW50X2lzLCBlbXB0eSwgZW5kX2h5ZHJhdGluZywgZXNjYXBlLCBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlLCBlc2NhcGVfb2JqZWN0LCBleGNsdWRlX2ludGVybmFsX3Byb3BzLCBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9wb3NpdGlvbiwgZmx1c2gsIGdldEFsbENvbnRleHRzLCBnZXRDb250ZXh0LCBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUsIGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlLCBnZXRfY3VycmVudF9jb21wb25lbnQsIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMsIGdldF9yb290X2Zvcl9zdHlsZSwgZ2V0X3Nsb3RfY2hhbmdlcywgZ2V0X3NwcmVhZF9vYmplY3QsIGdldF9zcHJlYWRfdXBkYXRlLCBnZXRfc3RvcmVfdmFsdWUsIGdsb2JhbHMsIGdyb3VwX291dHJvcywgaGFuZGxlX3Byb21pc2UsIGhhc0NvbnRleHQsIGhhc19wcm9wLCBoZWFkX3NlbGVjdG9yLCBpZGVudGl0eSwgaW5pdCwgaW5zZXJ0LCBpbnNlcnRfZGV2LCBpbnNlcnRfaHlkcmF0aW9uLCBpbnNlcnRfaHlkcmF0aW9uX2RldiwgaW50cm9zLCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciwgaXNfY2xpZW50LCBpc19jcm9zc29yaWdpbiwgaXNfZW1wdHksIGlzX2Z1bmN0aW9uLCBpc19wcm9taXNlLCBpc192b2lkLCBsaXN0ZW4sIGxpc3Rlbl9kZXYsIGxvb3AsIGxvb3BfZ3VhcmQsIG1lcmdlX3Nzcl9zdHlsZXMsIG1pc3NpbmdfY29tcG9uZW50LCBtb3VudF9jb21wb25lbnQsIG5vb3AsIG5vdF9lcXVhbCwgbm93LCBudWxsX3RvX2VtcHR5LCBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzLCBvbkRlc3Ryb3ksIG9uTW91bnQsIG9uY2UsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBwcmV2ZW50X2RlZmF1bHQsIHByb3BfZGV2LCBxdWVyeV9zZWxlY3Rvcl9hbGwsIHJhZiwgcnVuLCBydW5fYWxsLCBzYWZlX25vdF9lcXVhbCwgc2NoZWR1bGVfdXBkYXRlLCBzZWxlY3RfbXVsdGlwbGVfdmFsdWUsIHNlbGVjdF9vcHRpb24sIHNlbGVjdF9vcHRpb25zLCBzZWxlY3RfdmFsdWUsIHNlbGYsIHNldENvbnRleHQsIHNldF9hdHRyaWJ1dGVzLCBzZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXN0b21fZWxlbWVudF9kYXRhLCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YV9tYXAsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHNyY191cmxfZXF1YWwsIHN0YXJ0X2h5ZHJhdGluZywgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdHJ1c3RlZCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9iYXNlLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50LCB4bGlua19hdHRyIH07XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IElDb21tYW5kTWFuYWdlciwgQ29tbWFuZCB9IGZyb20gJ0AvdHlwZXMnO1xuICAgIGltcG9ydCB7IERpYWxvZyB9IGZyb20gJy4uLy4uL2NsYXNzZXMvZGlhbG9nJztcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcbiAgICBpbXBvcnQgeyBjb250YWluZXIgfSBmcm9tICcuLi8uLi8uLi9jb250YWluZXInO1xuICAgIGltcG9ydCB7IF8gfSBmcm9tICdAL3V0aWwnO1xuICAgIGNvbnN0IGNvbW1hbmRNYW5hZ2VyID0gY29udGFpbmVyLmdldDxJQ29tbWFuZE1hbmFnZXI+KCdDb21tYW5kTWFuYWdlcicpO1xuXG4gICAgbGV0IGNvbW1hbmRzOiBDb21tYW5kW10gPSBbXTtcblxuICAgIGxldCBjb21tYW5kID0gJyc7XG5cbiAgICBsZXQgY3VycmVudEluZGV4ID0gMDtcblxuICAgIGxldCByZXN1bHQ6IENvbW1hbmRbXSA9IFtdO1xuXG4gICAgY29uc3Qgb25rZXlwcmVzcyA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICBvbkVudGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtb3ZlVXBcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50SW5kZXgtLTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBtb3ZlRG93blxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSA0MCkge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPj0gbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9uRW50ZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbSA9IHJlc3VsdFtjdXJyZW50SW5kZXhdO1xuICAgICAgICBEaWFsb2cuZGVzdHJveUFsbCgpO1xuICAgICAgICBjb20uY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25DbGljayA9IChpOiBudW1iZXIpID0+IHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gaTtcbiAgICAgICAgb25FbnRlcigpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYXNDb250ZW50ID0gKHY6IHN0cmluZyB8IHVuZGVmaW5lZCwgYzogc3RyaW5nKSA9PiB2ICYmIHYudG9Mb3dlckNhc2UoKS5pbmRleE9mKGMudG9Mb3dlckNhc2UoKSkgPj0gMDtcblxuICAgICQ6IHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgaWYgKCFjb21tYW5kKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjb21tYW5kcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNvbW1hbmRzLmZpbHRlcigoYykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbnRlbnQoYy5wbHVnaW4sIGNvbW1hbmQpIHx8XG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbnRlbnQoYy5wbHVnaW5OYW1lLCBjb21tYW5kKSB8fFxuICAgICAgICAgICAgICAgICAgICBoYXNDb250ZW50KGMuY29tbWFuZCwgY29tbWFuZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgaGFzQ29udGVudChjLmRlc2NyaXB0aW9uLCBjb21tYW5kKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBjb21tYW5kcyA9IGNvbW1hbmRNYW5hZ2VyLmdldENvbW1hbmRzKCk7XG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbW1hbmRQYW5lbElucHV0Jyk7XG4gICAgICAgIGVsLmZvY3VzKCk7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImZuX19mbGV4LWNvbHVtblwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNHB4O292ZXJmbG93OiBoaWRkZW47cG9zaXRpb246IHJlbGF0aXZlOyB3aWR0aDogbWF4KDgwdncsIDEwMDBweClcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYjMtZm9ybV9faWNvbiBzZWFyY2hfX2hlYWRlclwiPlxuICAgICAgICA8c3ZnXG4gICAgICAgICAgICBzdHlsZT1cImxlZnQ6IDE0cHg7XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYjMtZm9ybV9faWNvbi1pY29uXCJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCJcbiAgICAgICAgICAgIHZlcnNpb249XCIxLjFcIlxuICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICB3aWR0aD1cIjIwMFwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIyMDBcIlxuICAgICAgICAgICAgPjxwYXRoXG4gICAgICAgICAgICAgICAgZD1cIk02NCAxMTJ2ODAwaDg5NlYxMTJINjR6IG04NDYgNzUwSDExNFYxNjJoNzk2djcwMHpNMjM0LjYgNjg4LjhMNDExLjMgNTEyIDIzNC42IDMzNS4ybDM1LjQtMzUuNEw0ODIuMSA1MTIgMjY5LjkgNzI0LjFsLTM1LjMtMzUuM3ogbTU1NC44LTEwLjJoLTMwMHYtNTBoMzAwdjUwelwiXG4gICAgICAgICAgICAvPjwvc3ZnXG4gICAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImNvbW1hbmRQYW5lbElucHV0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYjMtdGV4dC1maWVsZCBiMy10ZXh0LWZpZWxkLS10ZXh0IGZuX19ibG9jayBiMy1mb3JtX19pY29uLWlucHV0XCJcbiAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2NvbW1hbmR9XG4gICAgICAgICAgICBvbjprZXlkb3duPXtvbmtleXByZXNzfVxuICAgICAgICAvPlxuICAgIDwvZGl2PlxuICAgIHsjaWYgcmVzdWx0fVxuICAgICAgICB7I2VhY2ggcmVzdWx0IGFzIGNvbSwgaX1cbiAgICAgICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LWNsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPXtpID09PSBjdXJyZW50SW5kZXggPyAnY29tbWFuZC1zZWxlY3RlZCBjb21tYW5kJyA6ICdjb21tYW5kJ30gb246Y2xpY2s9eygpID0+IG9uQ2xpY2soaSl9PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29tbWFuZC1wbHVnaW5cIj57Y29tLnBsdWdpbk5hbWV9IHsnOid9IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbW1hbmQtZGVzY3JpcHRpb25cIj57Y29tLmNvbW1hbmR9IHtjb20uZGVzY3JpcHRpb24gfHwgJyd9PC9zcGFuPlxuICAgICAgICAgICAgICAgIHsjaWYgY29tLnNob3J0Y3V0fVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29tbWFuZC1zaG9ydGN1dFwiPntfKCdzaG9ydGN1dCcpfToge2NvbS5zaG9ydGN1dH08L2Rpdj5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvZWFjaH1cbiAgICB7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuY29tbWFuZCB7XG4gICAgICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgIH1cbiAgICAuY29tbWFuZDpob3ZlciB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgICBjb2xvcjogdmFyKC0tYjMtdGhlbWUtcHJpbWFyeSk7XG4gICAgfVxuICAgIC5jb21tYW5kLXNlbGVjdGVkIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWIzLXRoZW1lLXByaW1hcnkpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgfVxuICAgIC5jb21tYW5kLXBsdWdpbiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gICAgLmNvbW1hbmQtc2hvcnRjdXQge1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0LTMpO1xuICAgIH1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdAL2FwaS9wbHVnaW4nO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnQC9pbnRlcm5hbC9jbGFzc2VzJztcbmltcG9ydCB7IFNob3J0Y3V0IH0gZnJvbSAnQC9jb3JlL3Nob3J0Y3V0JztcbmltcG9ydCBDb21tYW5kUGFuZWxfX1N2ZWx0ZUNvbXBvbmVudF8gZnJvbSAnLi9jb21tYW5kLXBhbmVsLnN2ZWx0ZSc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQC91dGlsJztcblxuZXhwb3J0IGNsYXNzIENvbW1hbmRQYW5lbFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2hvcnRjdXQ6IFNob3J0Y3V0O1xuXG4gICAgb25sb2FkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZCh7XG4gICAgICAgICAgICBjb21tYW5kOiAnU2hvdyBjb21tYW5kIHBhbmVsJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfKCdzaG93X2NvbW1hbmRfcGFuZWwnKSxcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnY3RybCtzaGlmdCtvLGNvbW1hbmQrc2hpZnQrbycsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BhbmVsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG93UGFuZWwoKSB7XG4gICAgICAgIERpYWxvZy5kZXN0cm95QWxsKCk7XG4gICAgICAgIG5ldyBEaWFsb2coeyBjb250ZW50OiAnPGRpdiBpZD1cImNvbW1hbmQtcGFuZWxcIj48L2Rpdj4nIH0pO1xuICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgbmV3IENvbW1hbmRQYW5lbF9fU3ZlbHRlQ29tcG9uZW50Xyh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWFuZC1wYW5lbCcpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IHsgZGVmYXVsdENvbmZpZywgUExVR0lOX1NUT1JFX1VSTCwgUExVR0lOX1NZU1RFTV9BVVRPX1VQREFURSwgUExVR0lOX1NZU1RFTV9TQUZFX01PREVfRU5BQkxFRCB9IGZyb20gJ0AvY29yZS9wbHVnaW4tY29uZmlnJztcbiAgICBpbXBvcnQgeyBjb250YWluZXIgfSBmcm9tICdAL2NvbnRhaW5lcic7XG4gICAgaW1wb3J0IHsgVFlQRVMgfSBmcm9tICdAL2NvbmZpZyc7XG4gICAgaW1wb3J0IHsgSVBsdWdpblN5c3RlbSwgSVN0b3JhZ2VNYW5hZ2VyIH0gZnJvbSAnQC90eXBlcyc7XG4gICAgaW1wb3J0IHsgXyB9IGZyb20gJ0AvdXRpbCc7XG5cbiAgICBjb25zdCBzdG9yYWdlTWFuYWdlciA9IGNvbnRhaW5lci5nZXQ8SVN0b3JhZ2VNYW5hZ2VyPihUWVBFUy5TdG9yYWdlTWFuYWdlcik7XG4gICAgY29uc3QgcGx1Z2luU3lzdGVtID0gY29udGFpbmVyLmdldDxJUGx1Z2luU3lzdGVtPihUWVBFUy5QbHVnaW5TeXN0ZW0pO1xuXG4gICAgbGV0IGNvbmZpZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBfKCdzYWZlbW9kZScpLFxuICAgICAgICAgICAgdGlwOiBfKCdzYWZlbW9kZXRpcCcpLFxuICAgICAgICAgICAgY2hlY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpblN5c3RlbS50dXJuT25TYWZlTW9kZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpblN5c3RlbS50dXJuT2ZmU2FmZU1vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICAvLyB7XG4gICAgICAgIC8vICAgICBsYWJlbDogXygnYXV0b3VwZ3JhZGUnKSxcbiAgICAgICAgLy8gICAgIHRpcDogXygnYXV0b3VwZ3JhZGV0aXAnKSxcbiAgICAgICAgLy8gICAgIGNoZWNrZWQ6IHRydWUsXG4gICAgICAgIC8vICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAvLyAgICAgb25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAvLyAgICAgICAgIHN0b3JhZ2VNYW5hZ2VyLnNldChQTFVHSU5fU1lTVEVNX0FVVE9fVVBEQVRFLCBldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogXygnc3RvcmVfdXJsJyksXG4gICAgICAgICAgICB0aXA6IGAke18oJ3N0b3JlX3VybF90aXAnKX0gJHtkZWZhdWx0Q29uZmlnLlBMVUdJTl9TVE9SRV9VUkx9YCxcbiAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICB2YWx1ZTogc3RvcmFnZU1hbmFnZXIuZ2V0KFBMVUdJTl9TVE9SRV9VUkwpLFxuICAgICAgICAgICAgb25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VNYW5hZ2VyLnNldChQTFVHSU5fU1RPUkVfVVJMLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlY3VyaXR5TW9kZSA9IHN0b3JhZ2VNYW5hZ2VyLmdldChQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEKTtcbiAgICAgICAgY29uZmlnc1swXS5jaGVja2VkID0gc2VjdXJpdHlNb2RlO1xuICAgICAgICBjb25zdCBhdXRvVXBkYXRlID0gc3RvcmFnZU1hbmFnZXIuZ2V0KFBMVUdJTl9TWVNURU1fQVVUT19VUERBVEUpO1xuICAgICAgICBjb25maWdzWzFdLmNoZWNrZWQgPSBhdXRvVXBkYXRlO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbnsjZWFjaCBjb25maWdzIGFzIGNvbmZpZ31cbiAgICA8bGFiZWwgY2xhc3M9XCJmbl9fZmxleCBiMy1sYWJlbCBjb25maWdfX2l0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZuX19mbGV4LTFcIj5cbiAgICAgICAgICAgIHtjb25maWcubGFiZWx9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYjMtbGFiZWxfX3RleHRcIj57Y29uZmlnLnRpcH08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZm5fX3NwYWNlXCIgLz5cbiAgICAgICAgeyNpZiBjb25maWcudHlwZSA9PT0gJ2NoZWNrYm94J31cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImIzLXN3aXRjaCBmbl9fZmxleC1jZW50ZXJcIiB0eXBlPVwiY2hlY2tib3hcIiBiaW5kOmNoZWNrZWQ9e2NvbmZpZy5jaGVja2VkfSBvbjpjaGFuZ2U9e2NvbmZpZy5vbkNoYW5nZX0gLz5cbiAgICAgICAgezplbHNlIGlmIGNvbmZpZy50eXBlID09PSAnaW5wdXQnfVxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiYjMtdGV4dC1maWVsZCBmbl9fZmxleC1jZW50ZXIgZm5fX3NpemUyMDBcIiB0eXBlPVwiaW5wdXRcIiBiaW5kOnZhbHVlPXtjb25maWcudmFsdWV9IG9uOmNoYW5nZT17Y29uZmlnLm9uQ2hhbmdlfSAvPlxuICAgICAgICB7L2lmfVxuICAgIDwvbGFiZWw+XG57L2VhY2h9XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSAnQC9jb250YWluZXInO1xuICAgIGltcG9ydCB7IFRZUEVTIH0gZnJvbSAnQC9jb25maWcnO1xuICAgIGltcG9ydCB7IElQbHVnaW5TeXN0ZW0sIElTdG9yYWdlTWFuYWdlciwgUGx1Z2luTWFuaWZlc3QgfSBmcm9tICdAL3R5cGVzJztcbiAgICBpbXBvcnQgeyBQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEIH0gZnJvbSAnQC9jb3JlL3BsdWdpbi1jb25maWcnO1xuICAgIGltcG9ydCB7IF8gfSBmcm9tICdAL3V0aWwnO1xuXG4gICAgY29uc3Qgc3RvcmFnZU1hbmFnZXIgPSBjb250YWluZXIuZ2V0PElTdG9yYWdlTWFuYWdlcj4oVFlQRVMuU3RvcmFnZU1hbmFnZXIpO1xuICAgIGNvbnN0IHBsdWdpblN5c3RlbSA9IGNvbnRhaW5lci5nZXQ8SVBsdWdpblN5c3RlbT4oVFlQRVMuUGx1Z2luU3lzdGVtKTtcblxuICAgIGxldCBwbHVnaW5zOiBQbHVnaW5NYW5pZmVzdFtdID0gW107XG5cbiAgICAkOiBvdXRzaWRlUGx1Z2lucyA9IHBsdWdpbnMuZmlsdGVyKChwKSA9PiBwLnNjcmlwdCk7XG5cbiAgICBjb25zdCBsb2FkUGx1Z2lucyA9ICgpID0+IHtcbiAgICAgICAgcGx1Z2lucyA9IHN0b3JhZ2VNYW5hZ2VyLmdldFBsdWdpbnMoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZGlzcGF0Y2hlciA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgY29uc3Qgb25QbHVnaW5FbmFibGVkQ2hhbmdlID0gKGtleTogc3RyaW5nKSA9PiBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc2FmZU1vZGUgPSBzdG9yYWdlTWFuYWdlci5nZXQoUExVR0lOX1NZU1RFTV9TQUZFX01PREVfRU5BQkxFRCk7XG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgYXdhaXQgc3RvcmFnZU1hbmFnZXIuc2V0UGx1Z2luRW5hYmxlZChrZXksIGNoZWNrZWQpO1xuICAgICAgICBpZiAoc2FmZU1vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgcGx1Z2luU3lzdGVtLmxvYWRQbHVnaW4oa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsdWdpblN5c3RlbS51bmxvYWRQbHVnaW4oa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaGVyKCd1cGRhdGUnKTtcbiAgICB9O1xuXG4gICAgY29uc3QgdW5pbnN0YWxsID0gYXN5bmMgKGtleTogc3RyaW5nLCBldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgYXdhaXQgcGx1Z2luU3lzdGVtLnVubG9hZFBsdWdpbihrZXkpO1xuICAgICAgICBhd2FpdCBzdG9yYWdlTWFuYWdlci51bmluc3RhbGxQbHVnaW4oa2V5KTtcbiAgICAgICAgYXdhaXQgc3RvcmFnZU1hbmFnZXIuaW5pdFN0b3JhZ2UoKTtcbiAgICAgICAgbG9hZFBsdWdpbnMoKTtcbiAgICB9O1xuXG4gICAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmluaXRTdG9yYWdlKCk7XG4gICAgICAgIGxvYWRQbHVnaW5zKCk7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPGxhYmVsIGNsYXNzPVwiYjMtbGFiZWwgZm5fX2ZsZXhcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZm5fX2ZsZXgtMVwiPlxuICAgICAgICB7I2VhY2ggb3V0c2lkZVBsdWdpbnMgYXMgcGx1Z2lufVxuICAgICAgICAgICAgeyNpZiAhcGx1Z2luLmhpZGRlbn1cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmbl9fZmxleCBiMy1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2luIGZuX19mbGV4LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwbHVnaW4ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwbHVnaW4udmVyc2lvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LWNsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlbW92ZVwiIG9uOmNsaWNrPXsoZXZlbnQpID0+IHVuaW5zdGFsbChwbHVnaW4ua2V5LCBldmVudCl9PntfKCd1bmluc3RhbGwnKX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYjMtbGFiZWxfX3RleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGx1Z2luLmRlc2NyaXB0aW9uIHx8IF8oJ25vZGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmbl9fc3BhY2VcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYjMtc3dpdGNoIGZuX19mbGV4LWNlbnRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cImZ1bGxXaWR0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZDpjaGVja2VkPXtwbHVnaW4uZW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNoYW5nZT17b25QbHVnaW5FbmFibGVkQ2hhbmdlKHBsdWdpbi5rZXkpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG48L2xhYmVsPlxuXG48c3R5bGU+XG4gICAgLnBsdWdpbiBzcGFuLnJlbW92ZSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1iMy10aGVtZS1lcnJvcik7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gICAgfVxuICAgIC5wbHVnaW46aG92ZXIgc3Bhbi5yZW1vdmUge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gICAgLnBsdWdpbjpob3ZlciBzcGFuLnJlbW92ZTpob3ZlciB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgIH1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgeyBUWVBFUyB9IGZyb20gJ0AvY29uZmlnJztcbmltcG9ydCB7IFBMVUdJTl9TVE9SRV9VUkwgfSBmcm9tICdAL2NvcmUvcGx1Z2luLWNvbmZpZyc7XG5pbXBvcnQgeyBJU3RvcmFnZU1hbmFnZXIsIElTdG9yZSwgU3RvcmVQbHVnaW5NYW5pZmVzdCwgU3RvcmVQbHVnaW5TdGF0dXMgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBpbmplY3QsIGluamVjdGFibGUgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VtVmVyIH0gZnJvbSAnc2VtdmVyJztcbmltcG9ydCB7IHJlcXVlc3QsIHNsZWVwIH0gZnJvbSAnQC91dGlsJztcbmltcG9ydCB7IEZpbGVDbGllbnQgfSBmcm9tICdAL2FwaS9maWxlLWFwaSc7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdG9yZSBpbXBsZW1lbnRzIElTdG9yZSB7XG4gICAgcHJpdmF0ZSBwbHVnaW5zOiBTdG9yZVBsdWdpbk1hbmlmZXN0W107XG4gICAgcHJpdmF0ZSBwbHVnaW5TdGF0dXM6IFN0b3JlUGx1Z2luU3RhdHVzW107XG5cbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0PElTdG9yYWdlTWFuYWdlcj4oVFlQRVMuU3RvcmFnZU1hbmFnZXIpIHByaXZhdGUgc3RvcmFnZU1hbmFnZXI6IElTdG9yYWdlTWFuYWdlcikge1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgICAgICAgdGhpcy5wbHVnaW5TdGF0dXMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5wbHVnaW5zID0gW107XG4gICAgICAgIHRoaXMucGx1Z2luU3RhdHVzID0gW107XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLmxvYWRQbHVnaW5zRnJvbVVybCgpLCB0aGlzLnN0b3JhZ2VNYW5hZ2VyLmluaXRTdG9yYWdlKCldKTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0UGx1Z2lucygpO1xuICAgICAgICBjb25zdCBzdG9yZVBsdWdpbnM6IFN0b3JlUGx1Z2luU3RhdHVzW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICBjb25zdCBwOiBTdG9yZVBsdWdpblN0YXR1cyA9IHsgLi4ucGx1Z2luLCBpc0V4aXN0OiBmYWxzZSwgbmVlZFVwZ3JhZGU6IGZhbHNlIH07XG4gICAgICAgICAgICBjb25zdCBvbGRQbHVnaW4gPSBwbHVnaW5zLmZpbmQoKHApID0+IHAua2V5ID09PSBwbHVnaW4ua2V5KTtcbiAgICAgICAgICAgIGlmIChvbGRQbHVnaW4pIHtcbiAgICAgICAgICAgICAgICBwLmlzRXhpc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBWID0gbmV3IFNlbVZlcihwLnZlcnNpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFBsdWdpblYgPSBuZXcgU2VtVmVyKG9sZFBsdWdpbi52ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICBpZiAocFYuY29tcGFyZShvbGRQbHVnaW5WKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwLm5lZWRVcGdyYWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdG9yZVBsdWdpbnMucHVzaChwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsdWdpblN0YXR1cyA9IHN0b3JlUGx1Z2lucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RvcmVVcmwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldChQTFVHSU5fU1RPUkVfVVJMKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9hZFBsdWdpbnMoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQbHVnaW5zV2l0aFN0YXR1cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQbHVnaW5zV2l0aFN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luU3RhdHVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2FkUGx1Z2luc0Zyb21VcmwoKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlVXJsID0gdGhpcy5nZXRTdG9yZVVybCgpO1xuICAgICAgICBpZiAoIXN0b3JlVXJsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlczogQXhpb3NSZXNwb25zZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcyA9IGF3YWl0IHJlcXVlc3QuZ2V0KHN0b3JlVXJsICsgJy9wbHVnaW5zLmpzb24nLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcSA9IFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMuZGF0YT8ucGx1Z2lucykpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGx1Z2luS2V5IG9mIHJlcy5kYXRhPy5wbHVnaW5zIHx8IHt9KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGx1Z2luID0gdGhpcy5nZXRQbHVnaW5NYW5pZmVzdChgJHtzdG9yZVVybH0vJHtwbHVnaW5LZXl9YCk7XG4gICAgICAgICAgICAgICAgcmVxLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsdWdpbnMgPSBhd2FpdCBQcm9taXNlLmFsbChyZXEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRQbHVnaW5CeVVybCh1cmw6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0UGx1Z2luTWFuaWZlc3QodXJsKSwgdGhpcy5nZXRQbHVnaW5NYWluSnModXJsKV0pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1hbmlmZXN0OiB2YWx1ZVswXSxcbiAgICAgICAgICAgICAgICBtYWluSnM6IHZhbHVlWzFdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFBsdWdpbk1hbmlmZXN0KHVybDogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtYW5pZmVzdCA9IGF3YWl0IHJlcXVlc3QuZ2V0KGAke3VybH0vbWFuaWZlc3QuanNvbmAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFuaWZlc3QuZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFBsdWdpbk1haW5Kcyh1cmw6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdC5nZXQoYCR7dXJsfS9tYWluLmpzYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJyxcbiAgICAgICAgICAgICAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFBsdWdpblJlYWRtZShrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmdldFN0b3JlVXJsKCl9LyR7a2V5fWA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0LmdldChgJHt1cmx9L1JFQURNRS5tZGAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicsXG4gICAgICAgICAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEgYXMgc3RyaW5nO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZG93bmxvYWRQbHVnaW4oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgYXdhaXQgc2xlZXAoNTAwKTtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmdldFBsdWdpbkJ5VXJsKGAke3RoaXMuZ2V0U3RvcmVVcmwoKX0vJHtrZXl9YCk7XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0SnNvbiA9IGZpbGVzLm1hbmlmZXN0O1xuICAgICAgICBjb25zdCBtYWluSnMgPSBmaWxlcy5tYWluSnM7XG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBGaWxlQ2xpZW50LmdldEluc3RhbmNlQXBpKCkuZmlsZUFwaS5wdXRGaWxlKGAvZGF0YS9wbHVnaW5zLyR7a2V5fWAsIG51bGwsIHRydWUpLFxuICAgICAgICAgICAgRmlsZUNsaWVudC5nZXRJbnN0YW5jZUFwaSgpLmZpbGVBcGkucHV0RmlsZShgL2RhdGEvcGx1Z2lucy8ke2tleX0vbWFuaWZlc3QuanNvbmAsIEpTT04uc3RyaW5naWZ5KG1hbmlmZXN0SnNvbiksIGZhbHNlKSxcbiAgICAgICAgICAgIEZpbGVDbGllbnQuZ2V0SW5zdGFuY2VBcGkoKS5maWxlQXBpLnB1dEZpbGUoYC9kYXRhL3BsdWdpbnMvJHtrZXl9L21haW4uanNgLCBtYWluSnMsIGZhbHNlKSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBleHBvcnQgbGV0IG9uQ2xpY2s6ICgpID0+IHZvaWQgPSBudWxsO1xuICAgIGV4cG9ydCBsZXQgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbjwvc2NyaXB0PlxuXG48YnV0dG9uIG9uOmNsaWNrPXtvbkNsaWNrfSB7ZGlzYWJsZWR9IGNsYXNzPVwiYjMtYnV0dG9uXCI+PHNsb3QgLz48L2J1dHRvbj5cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSAnQC9jb250YWluZXInO1xuICAgIGltcG9ydCB7IElTdG9yZSwgUGx1Z2luTWFuaWZlc3QgfSBmcm9tICdAL3R5cGVzJztcbiAgICBpbXBvcnQgeyBfIH0gZnJvbSAnQC91dGlsJztcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGxldCBsb2FkaW5nID0gdHJ1ZTtcblxuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBQbHVnaW5NYW5pZmVzdDtcblxuICAgIGNvbnN0IGdldFBsdWdpblJlYWRtZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVhZG1lID0gYXdhaXQgY29udGFpbmVyLmdldDxJU3RvcmU+KCdTdG9yZScpLmdldFBsdWdpblJlYWRtZShwbHVnaW4ua2V5KTtcbiAgICAgICAgbG9hZGluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBsZXQgcmVhZG1lOiBzdHJpbmc7XG5cbiAgICBjb25zdCBMdXRlTWRDb252ZXJ0ZXIgPSB3aW5kb3cuTHV0ZS5OZXcoKTtcblxuICAgICQ6IHByZXZpZXdIVE1MID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVhZG1lID8gTHV0ZU1kQ29udmVydGVyLk1kMkhUTUwocmVhZG1lKSA6ICcnO1xuICAgIH07XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgZ2V0UGx1Z2luUmVhZG1lKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBnb0JhY2sgPSAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKCdnb2JhY2snKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJwbHVnaW4tZGV0YWlsXCI+XG4gICAgPGRpdiBjbGFzcz1cInBsdWdpbi1iYXNpY1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2luLWluZm9cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW4tbmFtZVwiPntwbHVnaW4ubmFtZX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW4ta2V5XCI+KHtwbHVnaW4ua2V5fSk8L2Rpdj5cbiAgICAgICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LWNsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1taXNzaW5nLWF0dHJpYnV0ZSAtLT5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJnby1iYWNrIGIzLWJ1dHRvblwiIG9uOmNsaWNrPXsoKSA9PiBnb0JhY2soKX0+PHN2ZyBjbGFzcz1cImdvLWJhY2staWNvblwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uQmFja1wiIC8+PC9zdmc+e18oJ2dvQmFjaycpfTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiBcbiAgICAgICAgPGRpdiBjbGFzcz1cInBsdWdpbi1tYW5pZmVzdFwiPlxuICAgICAgICAgICAgeyNpZiBwbHVnaW4udXJsfTxkaXYgY2xhc3M9XCJwbHVnaW4taXRlbVwiPntfKCd1cmwnKX06IDxhIGhyZWY9e3BsdWdpbi51cmx9IHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vcmVmZXJyZXJcIj57cGx1Z2luLnVybH08L2E+PC9kaXY+IHsvaWZ9XG4gICAgICAgICAgICB7I2lmIHBsdWdpbi5hdXRob3J9PGRpdiBjbGFzcz1cInBsdWdpbi1pdGVtXCI+e18oJ2F1dGhvcicpfToge3BsdWdpbi5hdXRob3J9PC9kaXY+IHsvaWZ9XG4gICAgICAgICAgICB7I2lmIHBsdWdpbi52ZXJzaW9ufTxkaXYgY2xhc3M9XCJwbHVnaW4taXRlbVwiPntfKCd2ZXJzaW9uJyl9OiB7cGx1Z2luLnZlcnNpb259PC9kaXY+IHsvaWZ9XG4gICAgICAgICAgICB7I2lmIHBsdWdpbi5kZXNjcmlwdGlvbn08ZGl2IGNsYXNzPVwicGx1Z2luLWl0ZW1cIj57XygnZGVzY3JpcHRpb24nKX06IHtwbHVnaW4uZGVzY3JpcHRpb259PC9kaXY+IHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxoci8+XG4gICAgPGRpdiBjbGFzcz1cInBsdWdpbi1yZWFkbWUgYjMtdHlwb2dyYXBoeVwiPlxuICAgICAgICB7I2lmIGxvYWRpbmd9XG4gICAgICAgICAgICA8c3Bhbj57XygncmVhZG1lJyl9PC9zcGFuPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICB7QGh0bWwgcHJldmlld0hUTUwoKX1cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnBsdWdpbi1pbmZvIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLnBsdWdpbi1kZXRhaWwge1xuICAgICAgICBtYXJnaW4tdG9wOiAxMnB4O1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gICAgLnBsdWdpbi1uYW1lIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgIH1cbiAgICAucGx1Z2luLWtleSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgIH1cbiAgICAucGx1Z2luLW1hbmlmZXN0IHtcbiAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICB9XG4gICAgLnBsdWdpbi1yZWFkbWUge1xuICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgIH1cbiAgICAuZ28tYmFjayB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGhlaWdodDogMjRweDtcbiAgICB9XG4gICAgLmdvLWJhY2staWNvbiB7XG4gICAgICAgIGhlaWdodDogMTJweDtcbiAgICAgICAgd2lkdGg6IDEycHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IFRZUEVTIH0gZnJvbSAnQC9jb25maWcnO1xuICAgIGltcG9ydCB7IGNvbnRhaW5lciB9IGZyb20gJ0AvY29udGFpbmVyJztcbiAgICBpbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0AvY29yZS9zdG9yZSc7XG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdAL2ludGVybmFsL2NvbXBvbmVudHMvQnV0dG9uLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IHsgU3RvcmVQbHVnaW5TdGF0dXMgfSBmcm9tICdAL3R5cGVzJztcbiAgICBpbXBvcnQgeyBTdG9yZVBsdWdpbk1hbmlmZXN0IH0gZnJvbSAnQC90eXBlcyc7XG4gICAgaW1wb3J0IHsgXyB9IGZyb20gJ0AvdXRpbCc7XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IFNldHRpbmdQcmV2aWV3IGZyb20gJy4vc2V0dGluZy1wcmV2aWV3LnN2ZWx0ZSc7XG5cbiAgICBjb25zdCBzdG9yZSA9IGNvbnRhaW5lci5nZXQ8U3RvcmU+KFRZUEVTLlN0b3JlKTtcbiAgICBsZXQgcGx1Z2luczogU3RvcmVQbHVnaW5TdGF0dXNbXSA9IFtdO1xuICAgIGxldCBsb2FkaW5nID0gdHJ1ZTtcblxuICAgIGNvbnN0IGxvYWRpbmdNYXAgPSB7fTtcblxuICAgIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBwbHVnaW5zID0gYXdhaXQgc3RvcmUubG9hZFBsdWdpbnMoKTtcbiAgICAgICAgbG9hZGluZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZG93bmxvYWRQbHVnaW4gPSBhc3luYyAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGxvYWRpbmdNYXBba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2FkaW5nTWFwW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgc3RvcmUuZG93bmxvYWRQbHVnaW4oa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwbHVnaW5zLmZpbmQoKGspID0+IGsua2V5ID09PSBrZXkpO1xuICAgICAgICAgICAgaWYgKHApIHtcbiAgICAgICAgICAgICAgICBwLmlzRXhpc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHAubmVlZFVwZ3JhZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGxvYWRpbmdNYXBba2V5XSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzZWxlY3RlZFBsdWdpbjogU3RvcmVQbHVnaW5NYW5pZmVzdCA9IG51bGw7XG5cbiAgICBjb25zdCBwcmV2aWV3UGx1Z2luID0gKGV2ZW50OiBNb3VzZUV2ZW50LCBwbHVnaW46IFN0b3JlUGx1Z2luTWFuaWZlc3QpID0+IHtcbiAgICAgICAgc2VsZWN0ZWRQbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImIzLWxhYmVsIGZuX19mbGV4XCI+XG4gICAgeyNpZiBsb2FkaW5nfVxuICAgICAgICA8ZGl2PntfKCdsb2FkaW5nJyl9PC9kaXY+XG4gICAgezplbHNlIGlmICFzZWxlY3RlZFBsdWdpbn1cbiAgICAgICAgPGRpdiBjbGFzcz1cImZuX19mbGV4LTFcIj5cbiAgICAgICAgICAgIHsjZWFjaCBwbHVnaW5zIGFzIHBsdWdpbn1cbiAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sIC0tPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZuX19mbGV4IGIzLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbl9fZmxleC0xXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktaW52YWxpZC1hdHRyaWJ1dGUgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCJcIiBvbjpjbGljaz17KGV2ZW50KSA9PiBwcmV2aWV3UGx1Z2luKGV2ZW50LCBwbHVnaW4pfT57cGx1Z2luLm5hbWV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAge3BsdWdpbi52ZXJzaW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImIzLWxhYmVsX190ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3BsdWdpbi5kZXNjcmlwdGlvbiB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmbl9fc3BhY2VcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7I2lmIGxvYWRpbmdNYXBbcGx1Z2luLmtleV19XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGRpc2FibGVkPXt0cnVlfT57XygnZG93bmxvYWRpbmcnKX08L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgezplbHNlIGlmIHBsdWdpbi5pc0V4aXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBwbHVnaW4ubmVlZFVwZ3JhZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkb3dubG9hZFBsdWdpbihwbHVnaW4ua2V5KX0+e18oJ3VwZ3JhZGUnKX08L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGRpc2FibGVkPXt0cnVlfT57XygnZG93bmxvYWRlZCcpfTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkb3dubG9hZFBsdWdpbihwbHVnaW4ua2V5KX0+e18oJ2Rvd25sb2FkJyl9PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC9kaXY+XG4gICAgezplbHNlfVxuICAgICAgICA8U2V0dGluZ1ByZXZpZXcgb246Z29iYWNrPXsoKSA9PiBzZWxlY3RlZFBsdWdpbiA9IG51bGwgfSBwbHVnaW49e3NlbGVjdGVkUGx1Z2lufT48L1NldHRpbmdQcmV2aWV3PlxuICAgIHsvaWZ9XG48L2Rpdj5cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgU2V0dGluZ1JlbmRlciB9IGZyb20gJ0AvdHlwZXMnO1xuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG4gICAgbGV0IHJvb3Q6IEhUTUxFbGVtZW50O1xuXG4gICAgZXhwb3J0IGxldCByZW5kZXI6IFNldHRpbmdSZW5kZXI7XG5cbiAgICAkOiB7XG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NldHRpbmctY3VzdG9tLXJlbmRlcicpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgIGlmIChyb290KSB7XG4gICAgICAgICAgICAgICAgcm9vdC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXR0aW5nLWN1c3RvbS1yZW5kZXInKS5hcHBlbmRDaGlsZChyb290KTtcbiAgICAgICAgICAgIHJlbmRlcihyb290KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgcm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dGluZy1jdXN0b20tcmVuZGVyJykuYXBwZW5kQ2hpbGQocm9vdCk7XG4gICAgICAgIHJlbmRlcihyb290KTtcbiAgICB9KTtcbiAgICBcblxuPC9zY3JpcHQ+XG5cblxuPGRpdiBpZD1cInNldHRpbmctY3VzdG9tLXJlbmRlclwiPjwvZGl2PiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgXyB9IGZyb20gJ0AvdXRpbCc7XG4gICAgaW1wb3J0IFNldHRpbmdDb21tb24gZnJvbSAnLi9zZXR0aW5nLWNvbW1vbi5zdmVsdGUnO1xuICAgIGltcG9ydCBTZXR0aW5nTGlzdCBmcm9tICcuL3NldHRpbmctbGlzdC5zdmVsdGUnO1xuICAgIGltcG9ydCBTZXR0aW5nU3RvcmUgZnJvbSAnLi9zZXR0aW5nLXN0b3JlLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSAnQC9jb250YWluZXInO1xuICAgIGltcG9ydCB7IFRZUEVTIH0gZnJvbSAnQC9jb25maWcnO1xuICAgIGltcG9ydCB7IElTZXR0aW5nTWFuYWdlciwgSVN0b3JhZ2VNYW5hZ2VyLCBTZXR0aW5nUmVuZGVyIH0gZnJvbSAnQC90eXBlcyc7XG4gICAgaW1wb3J0IFNldHRpbmdDdXN0b20gZnJvbSAnLi9zZXR0aW5nLWN1c3RvbS5zdmVsdGUnO1xuXG4gICAgdHlwZSBNZW51ID0geyBrZXk6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB0eXBlOiAnaW50ZXJuYWwnIHwgJ2N1c3RvbSc7IGNvbXBvbmVudD86IGFueTsgcmVuZGVyPzogU2V0dGluZ1JlbmRlcjsgfTtcblxuICAgIGNvbnN0IG1lbnVzOiBNZW51W10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ2NvbW1vbicsXG4gICAgICAgICAgICBuYW1lOiBfKCdtZW51X2NvbW1vbicpLFxuICAgICAgICAgICAgdHlwZTogJ2ludGVybmFsJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogU2V0dGluZ0NvbW1vbixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiAnbGlzdCcsXG4gICAgICAgICAgICBuYW1lOiBfKCdtZW51X2xpc3QnKSxcbiAgICAgICAgICAgIHR5cGU6ICdpbnRlcm5hbCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6IFNldHRpbmdMaXN0LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdzdG9yZScsXG4gICAgICAgICAgICBuYW1lOiBfKCdtZW51X3N0b3JlJyksXG4gICAgICAgICAgICB0eXBlOiAnaW50ZXJuYWwnLFxuICAgICAgICAgICAgY29tcG9uZW50OiBTZXR0aW5nU3RvcmUsXG4gICAgICAgIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IHNtID0gY29udGFpbmVyLmdldDxJU2V0dGluZ01hbmFnZXI+KFRZUEVTLlNldHRpbmdNYW5hZ2VyKTtcbiAgICBjb25zdCBzbTEgPSBjb250YWluZXIuZ2V0PElTdG9yYWdlTWFuYWdlcj4oVFlQRVMuU3RvcmFnZU1hbmFnZXIpO1xuICAgIGNvbnN0IHBsdWdpbnMgPSBzbTEuZ2V0VGhpcmRQYXJ0eVBsdWdpbnMoKTtcbiAgICBsZXQgc2V0dGluZ1JlbmRlcnMgPSBzbS5nZXRTZXR0aW5nUmVuZGVycygpO1xuICAgIGNvbnN0IGdldE5hbWUgPSAoa2V5OiBzdHJpbmcpID0+IHBsdWdpbnMuZmluZCgocCkgPT4gcC5rZXkgPT09IGtleSk/Lm5hbWU7XG4gICAgXG4gICAgJDogdGhpcmRNZW51cyA9IHNldHRpbmdSZW5kZXJzLm1hcCgocykgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBzLmtleSxcbiAgICAgICAgICAgIG5hbWU6IGdldE5hbWUocy5rZXkpLFxuICAgICAgICAgICAgY29tcG9uZW50OiBTZXR0aW5nQ29tbW9uLFxuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXG4gICAgICAgICAgICByZW5kZXI6IHMudmFsdWUsXG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZXRDdXJyZW50U2VsZWN0aW9uID0gKG1lbnUpID0+IChjdXJyZW50U2VsZWN0aW9uID0gbWVudSk7XG4gICAgY29uc3QgdXBkYXRlTWVudXMgPSAoKSA9PiB7XG4gICAgICAgIHNldHRpbmdSZW5kZXJzID0gWy4uLnNtLmdldFNldHRpbmdSZW5kZXJzKCldO1xuICAgIH07XG4gICAgbGV0IGN1cnJlbnRTZWxlY3Rpb24gPSBtZW51c1swXTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiZm5fX2ZsZXgtY29sdW1uXCIgc3R5bGU9XCJib3JkZXItcmFkaXVzOiA0cHg7b3ZlcmZsb3c6IGF1dG87cG9zaXRpb246IHJlbGF0aXZlOyBoZWlnaHQ6IDgwdmhcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZm5fX2ZsZXgtMSBmbl9fZmxleCBjb25maWdfX3BhbmVsXCI+XG4gICAgICAgIDx1bCBjbGFzcz1cImIzLXRhYi1iYXIgYjMtbGlzdCBiMy1saXN0LS1iYWNrZ3JvdW5kXCIgc3R5bGU9XCJoZWlnaHQ6IHVuc2V0ICFpbXBvcnRhbnQ7XCI+XG4gICAgICAgICAgICB7I2VhY2ggbWVudXMgYXMgbWVudX1cbiAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9e21lbnUua2V5fVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz17Y3VycmVudFNlbGVjdGlvbi5rZXkgPT09IG1lbnUua2V5XG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdiMy1saXN0LWl0ZW0tLWZvY3VzIGIzLWxpc3QtaXRlbSBiMy1saXN0LWl0ZW0tLWJpZydcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ2IzLWxpc3QtaXRlbSBiMy1saXN0LWl0ZW0tLWJpZyd9IFxuICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gc2V0Q3VycmVudFNlbGVjdGlvbihtZW51KX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYjMtbGlzdC1pdGVtX190ZXh0XCI+e21lbnUubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgIHsjaWYgdGhpcmRNZW51cy5sZW5ndGggPiAwfVxuICAgICAgICAgICAgICAgIDxociBzdHlsZT1cIm1hcmdpbjogMTJweDtcIj5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7I2VhY2ggdGhpcmRNZW51cyBhcyBtZW51fVxuICAgICAgICAgICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LWNsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT17bWVudS5rZXl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPXtjdXJyZW50U2VsZWN0aW9uLmtleSA9PT0gbWVudS5rZXlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ2IzLWxpc3QtaXRlbS0tZm9jdXMgYjMtbGlzdC1pdGVtIGIzLWxpc3QtaXRlbS0tYmlnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnYjMtbGlzdC1pdGVtIGIzLWxpc3QtaXRlbS0tYmlnJ30gXG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBzZXRDdXJyZW50U2VsZWN0aW9uKG1lbnUpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJiMy1saXN0LWl0ZW1fX3RleHRcIj57bWVudS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L3VsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnX190YWItY29udGFpbmVyXCIgc3R5bGU9XCJoZWlnaHQ6IHVuc2V0ICFpbXBvcnRhbnQ7XCIgZGF0YS1uYW1lPXtjdXJyZW50U2VsZWN0aW9uLmtleX0+XG4gICAgICAgICAgICB7I2lmIGN1cnJlbnRTZWxlY3Rpb24udHlwZSA9PT0gJ2ludGVybmFsJ31cbiAgICAgICAgICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtjdXJyZW50U2VsZWN0aW9uLmNvbXBvbmVudH0gb246dXBkYXRlPXsoKSA9PiB1cGRhdGVNZW51cygpfSAvPlxuICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxTZXR0aW5nQ3VzdG9tIHJlbmRlcj17Y3VycmVudFNlbGVjdGlvbi5yZW5kZXJ9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuIiwiaW1wb3J0IHsgTWVudSwgTWVudUl0ZW0sIERpYWxvZyB9IGZyb20gJ0AvaW50ZXJuYWwnO1xuaW1wb3J0ICogYXMgY2xpZW50QXBpIGZyb20gJ0AvYXBpL2NsaWVudC1hcGknO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnQC9hcGkvcGx1Z2luJztcbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuL3NldHRpbmcuc3ZlbHRlJztcbmltcG9ydCB7IF8gfSBmcm9tICdAL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXR0aW5nUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgc3ZnID1cbiAgICAgICAgJzxzdmcgdD1cIjE2Nzk3MDMwMjcyMjdcIiBjbGFzcz1cImljb25cIiB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgcC1pZD1cIjI0NzE1XCIgd2lkdGg9XCIyMDBcIiBoZWlnaHQ9XCIyMDBcIj48cGF0aCBkPVwiTTUxMiAxMDIzLjk5OTg0YTc1LjUxOTk4OCA3NS41MTk5ODggMCAwIDEtNTMuNjc5OTkyLTIyLjIwNzk5N0wyMi4zNjgwNzcgNTY1LjQ1NTkxMmMtMjkuNDg3OTk1LTI5LjY3OTk5NS0yOS40ODc5OTUtNzcuOTE5OTg4LTAuMDY0LTEwNy41MTk5ODRsMTU5LjcxMTk3NS0xNTkuODM5OTc1YTMxLjk1MTk5NSAzMS45NTE5OTUgMCAwIDEgNTQuMDQ3OTkxIDI4LjIwNzk5NiAxMzEuMTAzOTggMTMxLjEwMzk4IDAgMCAwLTIuMzY4IDIzLjEzNTk5NmMwIDY5Ljk1MTk4OSA1Ni44OTU5OTEgMTI4LjExMTk4IDEyNi44NDc5ODEgMTI4LjExMTk4IDY5Ljk5OTk4OSAwIDEyMS4xMTk5ODEtNTguMTU5OTkxIDEyMS4xMTk5ODEtMTI4LjExMTk4IDAtNzAuMDc5OTg5LTUxLjExOTk5Mi0xMjcuMDcxOTgtMTIxLjExOTk4MS0xMjcuMDcxOThhMTMwLjg3OTk4IDEzMC44Nzk5OCAwIDAgMC0yMy4wMDc5OTcgMi4zODQgMzEuNzU5OTk1IDMxLjc1OTk5NSAwIDAgMS0zMy45MTk5OTQtMTYuNjcxOTk4IDMxLjk5OTk5NSAzMS45OTk5OTUgMCAwIDEgNS43NDM5OTktMzcuNDIzOTk0bDE0OC44OTU5NzYtMTQ5LjEwMzk3NmMyOC44NDc5OTUtMjguNzE5OTk2IDc4LjcxOTk4OC0yOC42NTU5OTYgMTA3LjQyMzk4NC0wLjA2NGwxMDkuMDIzOTgzIDEwOS4xODM5ODNDNjk3LjQzOTk3MSA1OS44ODc5OTEgNzYzLjg3MTk2MSA4LjQ3OTk5OSA4NDIuMDE1OTQ4IDguNDc5OTk5Yzk2LjkxMTk4NSAwIDE3NS43NDM5NzMgNzguOTU5OTg4IDE3NS43NDM5NzMgMTc1Ljk2Nzk3MiAwIDc4LjIzOTk4OC01MS4yOTU5OTIgMTQ0LjcxOTk3Ny0xMjIuMDYzOTgxIDE2Ny40NzE5NzRsMTA1Ljg4Nzk4NCAxMDUuOTUxOTgzYTc2LjM1MTk4OCA3Ni4zNTE5ODggMCAwIDEgMC4wMzE5OTkgMTA3LjU1MTk4NEw1NjUuNzQzOTkyIDEwMDEuNzc1ODQzQTc1Ljc1OTk4OCA3NS43NTk5ODggMCAwIDEgNTEyIDEwMjMuOTk5ODR6XCIgZmlsbD1cIlwiIHAtaWQ9XCIyNDcxNlwiPjwvcGF0aD48L3N2Zz4nO1xuICAgIG9ubG9hZCgpIHtcbiAgICAgICAgY29uc3QgaW50ZXJuYWxTZXR0aW5nQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGludGVybmFsU2V0dGluZ0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBfKCdwbHVnaW5fc3lzdGVtJykpO1xuICAgICAgICBpbnRlcm5hbFNldHRpbmdCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbGJhcl9faXRlbScsICdiMy10b29sdGlwcycsICdiMy10b29sdGlwc19fc3cnKTtcbiAgICAgICAgaW50ZXJuYWxTZXR0aW5nQnV0dG9uLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5zdmcpO1xuICAgICAgICBpbnRlcm5hbFNldHRpbmdCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIG5ldyBNZW51KCdpbnRlcm5hbFNldHRpbmdCdXR0b24nKVxuICAgICAgICAgICAgICAgIC5hZGRJdGVtKFxuICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IF8oJ3BsdWdpbl9zeXN0ZW1fc2V0dGluZycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2ljb25FZGl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiAoKSA9PiBzaG93U2V0dGluZ0RpYWxvZygpLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuYWRkU2VwYXJhdG9yKClcbiAgICAgICAgICAgICAgICAuYWRkSXRlbShcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBfKCdyZWxvYWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdpY29uUmVmcmVzaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogKCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc2hvd0F0TW91c2VFdmVudChldmVudCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNsaWVudEFwaS5hZGRUb29sYmFyUmlnaHQoaW50ZXJuYWxTZXR0aW5nQnV0dG9uKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZCh7XG4gICAgICAgICAgICBjb21tYW5kOiAnU2hvdyBwbHVnaW4gc3lzdGVtIGNvbmlmZycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXygnc2hvd19wbHVnaW5fc3lzdGVtX2NvbmZpZycpLFxuICAgICAgICAgICAgc2hvcnRjdXQ6ICdjb21tYW5kK29wdGlvbitwJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiBzaG93U2V0dGluZ0RpYWxvZygpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoe1xuICAgICAgICAgICAgY29tbWFuZDogJ1JlbG9hZCBXaW5kb3cnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IF8oJ3JlbG9hZF93aW5kb3cnKSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hvd1NldHRpbmdEaWFsb2coKSB7XG4gICAgbmV3IERpYWxvZyh7XG4gICAgICAgIHRpdGxlOiBfKCdwbHVnaW5fc3lzdGVtX3NldHRpbmcnKSxcbiAgICAgICAgY29udGVudDogJzxkaXYgaWQ9XCJwbHVnaW4tc2V0dGluZ3NcIj48L2Rpdj4nLFxuICAgICAgICB3aWR0aDogJzkwdncnLFxuICAgICAgICBoZWlnaHQ6ICc4MHZoJyxcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbmV3IFNldHRpbmdzKHtcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsdWdpbi1zZXR0aW5ncycpLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vY2xhc3Nlcyc7XG5pbXBvcnQgeyBQbHVnaW5NYW5pZmVzdCB9IGZyb20gJ0AvdHlwZXMnO1xuaW1wb3J0IHsgQ29tbWFuZFBhbmVsUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL2NvbW1hbmQtcGFuZWwnO1xuaW1wb3J0IHsgSW50ZXJuYWxTZXR0aW5nUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL3NldHRpbmcnO1xuXG5leHBvcnQgY29uc3QgaW50ZXJuYWxQbHVnaW5zOiBQbHVnaW5NYW5pZmVzdFtdID0gW1xuICAgIHsga2V5OiAnc2V0dGluZycsIG5hbWU6ICdzZXR0aW5nJywgcGx1Z2luOiBJbnRlcm5hbFNldHRpbmdQbHVnaW4sIGVuYWJsZWQ6IHRydWUsIGhpZGRlbjogdHJ1ZSwgdmVyc2lvbjogJzEuMC4wJyB9LFxuICAgIHsga2V5OiAnY29tbWFuZFBhbmVsJywgbmFtZTogJ2NvbW1hbmRQYW5lbCcsIHBsdWdpbjogQ29tbWFuZFBhbmVsUGx1Z2luLCBlbmFibGVkOiB0cnVlLCBoaWRkZW46IHRydWUsIHZlcnNpb246ICcxLjAuMCcgfSxcbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzSGlnaFN1cnJvZ2F0ZShjb2RlUG9pbnQpIHtcbiAgcmV0dXJuIGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGJmZjtcbn1cblxuZnVuY3Rpb24gaXNMb3dTdXJyb2dhdGUoY29kZVBvaW50KSB7XG4gIHJldHVybiBjb2RlUG9pbnQgPj0gMHhkYzAwICYmIGNvZGVQb2ludCA8PSAweGRmZmY7XG59XG5cbi8vIFRydW5jYXRlIHN0cmluZyBieSBzaXplIGluIGJ5dGVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRydW5jYXRlKGdldExlbmd0aCwgc3RyaW5nLCBieXRlTGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgbXVzdCBiZSBzdHJpbmdcIik7XG4gIH1cblxuICB2YXIgY2hhckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHZhciBjdXJCeXRlTGVuZ3RoID0gMDtcbiAgdmFyIGNvZGVQb2ludDtcbiAgdmFyIHNlZ21lbnQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFyTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICBzZWdtZW50ID0gc3RyaW5nW2ldO1xuXG4gICAgaWYgKGlzSGlnaFN1cnJvZ2F0ZShjb2RlUG9pbnQpICYmIGlzTG93U3Vycm9nYXRlKHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkpIHtcbiAgICAgIGkgKz0gMTtcbiAgICAgIHNlZ21lbnQgKz0gc3RyaW5nW2ldO1xuICAgIH1cblxuICAgIGN1ckJ5dGVMZW5ndGggKz0gZ2V0TGVuZ3RoKHNlZ21lbnQpO1xuXG4gICAgaWYgKGN1ckJ5dGVMZW5ndGggPT09IGJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgaSArIDEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJCeXRlTGVuZ3RoID4gYnl0ZUxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBpIC0gc2VnbWVudC5sZW5ndGggKyAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc0hpZ2hTdXJyb2dhdGUoY29kZVBvaW50KSB7XG4gIHJldHVybiBjb2RlUG9pbnQgPj0gMHhkODAwICYmIGNvZGVQb2ludCA8PSAweGRiZmY7XG59XG5cbmZ1bmN0aW9uIGlzTG93U3Vycm9nYXRlKGNvZGVQb2ludCkge1xuICByZXR1cm4gY29kZVBvaW50ID49IDB4ZGMwMCAmJiBjb2RlUG9pbnQgPD0gMHhkZmZmO1xufVxuXG4vLyBUcnVuY2F0ZSBzdHJpbmcgYnkgc2l6ZSBpbiBieXRlc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRCeXRlTGVuZ3RoKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIklucHV0IG11c3QgYmUgc3RyaW5nXCIpO1xuICB9XG5cbiAgdmFyIGNoYXJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgYnl0ZUxlbmd0aCA9IDA7XG4gIHZhciBjb2RlUG9pbnQgPSBudWxsO1xuICB2YXIgcHJldkNvZGVQb2ludCA9IG51bGw7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckxlbmd0aDsgaSsrKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgLy8gaGFuZGxlIDQtYnl0ZSBub24tQk1QIGNoYXJzXG4gICAgLy8gbG93IHN1cnJvZ2F0ZVxuICAgIGlmIChpc0xvd1N1cnJvZ2F0ZShjb2RlUG9pbnQpKSB7XG4gICAgICAvLyB3aGVuIHBhcnNpbmcgcHJldmlvdXMgaGktc3Vycm9nYXRlLCAzIGlzIGFkZGVkIHRvIGJ5dGVMZW5ndGhcbiAgICAgIGlmIChwcmV2Q29kZVBvaW50ICE9IG51bGwgJiYgaXNIaWdoU3Vycm9nYXRlKHByZXZDb2RlUG9pbnQpKSB7XG4gICAgICAgIGJ5dGVMZW5ndGggKz0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBieXRlTGVuZ3RoICs9IDM7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8PSAweDdmICkge1xuICAgICAgYnl0ZUxlbmd0aCArPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlUG9pbnQgPj0gMHg4MCAmJiBjb2RlUG9pbnQgPD0gMHg3ZmYpIHtcbiAgICAgIGJ5dGVMZW5ndGggKz0gMjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZVBvaW50ID49IDB4ODAwICYmIGNvZGVQb2ludCA8PSAweGZmZmYpIHtcbiAgICAgIGJ5dGVMZW5ndGggKz0gMztcbiAgICB9XG4gICAgcHJldkNvZGVQb2ludCA9IGNvZGVQb2ludDtcbiAgfVxuXG4gIHJldHVybiBieXRlTGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRydW5jYXRlID0gcmVxdWlyZShcIi4vbGliL3RydW5jYXRlXCIpO1xudmFyIGdldExlbmd0aCA9IHJlcXVpcmUoXCJ1dGY4LWJ5dGUtbGVuZ3RoL2Jyb3dzZXJcIik7XG5tb2R1bGUuZXhwb3J0cyA9IHRydW5jYXRlLmJpbmQobnVsbCwgZ2V0TGVuZ3RoKTtcbiIsIi8qanNoaW50IG5vZGU6dHJ1ZSovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVwbGFjZXMgY2hhcmFjdGVycyBpbiBzdHJpbmdzIHRoYXQgYXJlIGlsbGVnYWwvdW5zYWZlIGZvciBmaWxlbmFtZXMuXG4gKiBVbnNhZmUgY2hhcmFjdGVycyBhcmUgZWl0aGVyIHJlbW92ZWQgb3IgcmVwbGFjZWQgYnkgYSBzdWJzdGl0dXRlIHNldFxuICogaW4gdGhlIG9wdGlvbmFsIGBvcHRpb25zYCBvYmplY3QuXG4gKlxuICogSWxsZWdhbCBDaGFyYWN0ZXJzIG9uIFZhcmlvdXMgT3BlcmF0aW5nIFN5c3RlbXNcbiAqIC8gPyA8ID4gXFwgOiAqIHwgXCJcbiAqIGh0dHBzOi8va2IuYWNyb25pcy5jb20vY29udGVudC8zOTc5MFxuICpcbiAqIFVuaWNvZGUgQ29udHJvbCBjb2Rlc1xuICogQzAgMHgwMC0weDFmICYgQzEgKDB4ODAtMHg5ZilcbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQzBfYW5kX0MxX2NvbnRyb2xfY29kZXNcbiAqXG4gKiBSZXNlcnZlZCBmaWxlbmFtZXMgb24gVW5peC1iYXNlZCBzeXN0ZW1zIChcIi5cIiwgXCIuLlwiKVxuICogUmVzZXJ2ZWQgZmlsZW5hbWVzIGluIFdpbmRvd3MgKFwiQ09OXCIsIFwiUFJOXCIsIFwiQVVYXCIsIFwiTlVMXCIsIFwiQ09NMVwiLFxuICogXCJDT00yXCIsIFwiQ09NM1wiLCBcIkNPTTRcIiwgXCJDT001XCIsIFwiQ09NNlwiLCBcIkNPTTdcIiwgXCJDT004XCIsIFwiQ09NOVwiLFxuICogXCJMUFQxXCIsIFwiTFBUMlwiLCBcIkxQVDNcIiwgXCJMUFQ0XCIsIFwiTFBUNVwiLCBcIkxQVDZcIiwgXCJMUFQ3XCIsIFwiTFBUOFwiLCBhbmRcbiAqIFwiTFBUOVwiKSBjYXNlLWluc2VzaXRpdmVseSBhbmQgd2l0aCBvciB3aXRob3V0IGZpbGVuYW1lIGV4dGVuc2lvbnMuXG4gKlxuICogQ2FwcGVkIGF0IDI1NSBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAqIGh0dHA6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zMjc5NS93aGF0LWlzLXRoZS1tYXhpbXVtLWFsbG93ZWQtZmlsZW5hbWUtYW5kLWZvbGRlci1zaXplLXdpdGgtZWNyeXB0ZnNcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGlucHV0ICAgT3JpZ2luYWwgZmlsZW5hbWVcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyB7cmVwbGFjZW1lbnQ6IFN0cmluZyB8IEZ1bmN0aW9uIH1cbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICBTYW5pdGl6ZWQgZmlsZW5hbWVcbiAqL1xuXG52YXIgdHJ1bmNhdGUgPSByZXF1aXJlKFwidHJ1bmNhdGUtdXRmOC1ieXRlc1wiKTtcblxudmFyIGlsbGVnYWxSZSA9IC9bXFwvXFw/PD5cXFxcOlxcKlxcfFwiXS9nO1xudmFyIGNvbnRyb2xSZSA9IC9bXFx4MDAtXFx4MWZcXHg4MC1cXHg5Zl0vZztcbnZhciByZXNlcnZlZFJlID0gL15cXC4rJC87XG52YXIgd2luZG93c1Jlc2VydmVkUmUgPSAvXihjb258cHJufGF1eHxudWx8Y29tWzAtOV18bHB0WzAtOV0pKFxcLi4qKT8kL2k7XG52YXIgd2luZG93c1RyYWlsaW5nUmUgPSAvW1xcLiBdKyQvO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZShpbnB1dCwgcmVwbGFjZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IG11c3QgYmUgc3RyaW5nJyk7XG4gIH1cbiAgdmFyIHNhbml0aXplZCA9IGlucHV0XG4gICAgLnJlcGxhY2UoaWxsZWdhbFJlLCByZXBsYWNlbWVudClcbiAgICAucmVwbGFjZShjb250cm9sUmUsIHJlcGxhY2VtZW50KVxuICAgIC5yZXBsYWNlKHJlc2VydmVkUmUsIHJlcGxhY2VtZW50KVxuICAgIC5yZXBsYWNlKHdpbmRvd3NSZXNlcnZlZFJlLCByZXBsYWNlbWVudClcbiAgICAucmVwbGFjZSh3aW5kb3dzVHJhaWxpbmdSZSwgcmVwbGFjZW1lbnQpO1xuICByZXR1cm4gdHJ1bmNhdGUoc2FuaXRpemVkLCAyNTUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgcmVwbGFjZW1lbnQgPSAob3B0aW9ucyAmJiBvcHRpb25zLnJlcGxhY2VtZW50KSB8fCAnJztcbiAgdmFyIG91dHB1dCA9IHNhbml0aXplKGlucHV0LCByZXBsYWNlbWVudCk7XG4gIGlmIChyZXBsYWNlbWVudCA9PT0gJycpIHtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG4gIHJldHVybiBzYW5pdGl6ZShvdXRwdXQsICcnKTtcbn07XG4iLCJpbXBvcnQgeyBpbmplY3QsIGluamVjdGFibGUgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgZ2V0TG9jYWxTdG9yYWdlLCBzZXRTdG9yYWdlVmFsIH0gZnJvbSAnLi4vYXBpL3NlcnZlci1hcGknO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZywgUExVR0lOX1NZU1RFTV9QTFVHSU4sIFBMVUdJTl9TWVNURU1fU0FGRV9NT0RFX0VOQUJMRUQsIFBMVUdJTl9TWVNURU1fVEhJUkRfUEFSVFlfUExVR0lOIH0gZnJvbSAnLi9wbHVnaW4tY29uZmlnJztcbmltcG9ydCB7IGludGVybmFsUGx1Z2lucyB9IGZyb20gJy4uL2ludGVybmFsJztcbmltcG9ydCB7IFRZUEVTIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IElQbHVnaW5GaWxlTWFuYWdlciwgSVN0b3JhZ2VNYW5hZ2VyLCBQbHVnaW5Db25maWcsIFBsdWdpbkVuYWJsZUNvbmZpZywgUGx1Z2luTWFuaWZlc3QgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzaG93RXJyb3JNZXNzYWdlIH0gZnJvbSAnQC91dGlsJztcbmltcG9ydCBzYW5pdGl6ZSBmcm9tICdzYW5pdGl6ZS1maWxlbmFtZSc7XG5pbXBvcnQgeyBGaWxlQ2xpZW50IH0gZnJvbSAnQC9hcGkvZmlsZS1hcGknO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RvcmFnZU1hbmFnZXIgaW1wbGVtZW50cyBJU3RvcmFnZU1hbmFnZXIge1xuICAgIHByaXZhdGUgcGx1Z2luRmlsZU1hbmFnZXI6IElQbHVnaW5GaWxlTWFuYWdlcjtcblxuICAgIHByaXZhdGUgY29uZmlnOiBQbHVnaW5Db25maWc7XG5cbiAgICBwcml2YXRlIGludGVybmFsUGx1Z2luczogUGx1Z2luTWFuaWZlc3RbXTtcblxuICAgIHByaXZhdGUgdGhpcmRQYXJ0eVBsdWdpbnM6IFBsdWdpbk1hbmlmZXN0W107XG5cbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0KFRZUEVTLlBsdWdpbkZpbGVNYW5hZ2VyKSBwbHVnaW5GaWxlTWFuYWdlcikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDb25maWcpO1xuICAgICAgICB0aGlzLnBsdWdpbkZpbGVNYW5hZ2VyID0gcGx1Z2luRmlsZU1hbmFnZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChrZXk6IGtleW9mIFBsdWdpbkNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWdba2V5XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2V0KGtleTogc3RyaW5nLCB2YWw6IGFueSkge1xuICAgICAgICB0aGlzLmNvbmZpZ1trZXldID0gdmFsO1xuICAgICAgICByZXR1cm4gc2V0U3RvcmFnZVZhbChrZXksIHZhbCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdFN0b3JhZ2UoKSB7XG4gICAgICAgIGNvbnN0IGFsbCA9IGF3YWl0IGdldExvY2FsU3RvcmFnZSgpO1xuICAgICAgICBjb25zdCBjb25maWdLZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdENvbmZpZyk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGNvbmZpZ0tleXMpIHtcbiAgICAgICAgICAgIGlmIChhbGxba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdba2V5XSA9IGFsbFtrZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXRTdG9yYWdlVmFsKGtleSwgZGVmYXVsdENvbmZpZ1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb2FkIGFsbCBwbHVnaW5zXG4gICAgICAgIHRoaXMudGhpcmRQYXJ0eVBsdWdpbnMgPSBhd2FpdCB0aGlzLnBsdWdpbkZpbGVNYW5hZ2VyLmdldEFsbFBsdWdpbnMoKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBsdWdpbnMgPSBbLi4uaW50ZXJuYWxQbHVnaW5zXTtcbiAgICAgICAgdGhpcy5pbml0M3JkUGFydHlFbmFibGVkKCk7XG4gICAgICAgIHRoaXMuaW5pdEludGVybmFsRW5hYmxlZCgpO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVQbHVnaW5zRW5hYmxlZCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdDNyZFBhcnR5RW5hYmxlZCgpIHtcbiAgICAgICAgY29uc3QgZW5hYmxlZFBsdWdpbnMgPSB0aGlzLmdldChQTFVHSU5fU1lTVEVNX1RISVJEX1BBUlRZX1BMVUdJTikgYXMgUGx1Z2luRW5hYmxlQ29uZmlnW107XG4gICAgICAgIGZvciAoY29uc3QgZXAgb2YgZW5hYmxlZFBsdWdpbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLnRoaXJkUGFydHlQbHVnaW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAua2V5ID09PSBlcC5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5lbmFibGVkID0gZXAuZW5hYmxlZCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0SW50ZXJuYWxFbmFibGVkKCkge1xuICAgICAgICBjb25zdCBlbmFibGVkUGx1Z2lucyA9IHRoaXMuZ2V0KFBMVUdJTl9TWVNURU1fUExVR0lOKSBhcyBQbHVnaW5FbmFibGVDb25maWdbXTtcbiAgICAgICAgZm9yIChjb25zdCBlcCBvZiBlbmFibGVkUGx1Z2lucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMuaW50ZXJuYWxQbHVnaW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAua2V5ID09PSBlcC5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5lbmFibGVkID0gZXAuZW5hYmxlZCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5pbnRlcm5hbFBsdWdpbnMsIC4uLnRoaXMudGhpcmRQYXJ0eVBsdWdpbnNdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnRlcm5hbFBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUGx1Z2lucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGhpcmRQYXJ0eVBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoaXJkUGFydHlQbHVnaW5zO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQbHVnaW5CeUtleShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGx1Z2lucygpLmZpbmQoKHApID0+IHAua2V5ID09PSBrZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXRQbHVnaW5FbmFibGVkKGtleTogc3RyaW5nLCBlbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBbLi4udGhpcy5pbnRlcm5hbFBsdWdpbnMsIC4uLnRoaXMudGhpcmRQYXJ0eVBsdWdpbnNdKSB7XG4gICAgICAgICAgICBpZiAocC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHAuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlUGx1Z2luc0VuYWJsZWQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2V0U2FmZU1vZGVFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KFBMVUdJTl9TWVNURU1fU0FGRV9NT0RFX0VOQUJMRUQsIGVuYWJsZWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzYXZlUGx1Z2luc0VuYWJsZWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0KFxuICAgICAgICAgICAgUExVR0lOX1NZU1RFTV9QTFVHSU4sXG4gICAgICAgICAgICB0aGlzLmludGVybmFsUGx1Z2lucy5tYXAoKHApID0+ICh7IGtleTogcC5rZXksIGVuYWJsZWQ6IHAuZW5hYmxlZCB9KSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KFxuICAgICAgICAgICAgUExVR0lOX1NZU1RFTV9USElSRF9QQVJUWV9QTFVHSU4sXG4gICAgICAgICAgICB0aGlzLnRoaXJkUGFydHlQbHVnaW5zLm1hcCgocCkgPT4gKHsga2V5OiBwLmtleSwgZW5hYmxlZDogcC5lbmFibGVkIH0pKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXRQbHVnaW5TdG9yYWdlKHBsdWdpbktleTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nLCBjb250ZW50OiBhbnkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRmlsZU5hbWVJbGxlZ2FsKGZpbGVuYW1lKSkge1xuICAgICAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoYOaPkuS7tiR7cGx1Z2luS2V5feWtmOWCqOaWh+S7tuWQjeS4jeWQiOazlWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkUGx1Z2luU3RvcmFnZUZvbGRlcklmTm90RXhpc3QocGx1Z2luS2V5KTtcbiAgICAgICAgICAgIGF3YWl0IEZpbGVDbGllbnQuZ2V0SW5zdGFuY2VBcGkoKS5maWxlQXBpLnB1dEZpbGUoYC9kYXRhL3BsdWdpbnMvLnN0b3JhZ2UvJHtwbHVnaW5LZXl9LyR7ZmlsZW5hbWV9YCwgY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoYOaPkuS7tiR7cGx1Z2luS2V5feWtmOWCqOS/neWtmOWksei0pWAsIDIwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFBsdWdpblN0b3JhZ2UocGx1Z2luS2V5OiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgRmlsZUNsaWVudC5nZXRJbnN0YW5jZUFwaSgpLmZpbGVBcGkuZ2V0RmlsZShgL2RhdGEvcGx1Z2lucy8uc3RvcmFnZS8ke3BsdWdpbktleX0vJHtmaWxlbmFtZX1gKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShg5o+S5Lu2JHtwbHVnaW5LZXl95a2Y5YKo5L+d5a2Y5aSx6LSlYCwgMjAwMCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1bmluc3RhbGxQbHVnaW4ocGx1Z2luS2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgRmlsZUNsaWVudC5nZXRJbnN0YW5jZUFwaSgpLmZpbGVBcGkucmVtb3ZlRmlsZShgL2RhdGEvcGx1Z2lucy8ke3BsdWdpbktleX1gKTtcbiAgICAgICAgYXdhaXQgRmlsZUNsaWVudC5nZXRJbnN0YW5jZUFwaSgpLmZpbGVBcGkucmVtb3ZlRmlsZShgL2RhdGEvcGx1Z2lucy8vLnN0b3JhZ2UvJHtwbHVnaW5LZXl9YCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhZGRQbHVnaW5TdG9yYWdlRm9sZGVySWZOb3RFeGlzdChwbHVnaW5LZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmb2xkZXIgPSBgL2RhdGEvcGx1Z2lucy8uc3RvcmFnZS8ke3BsdWdpbktleX1gO1xuICAgICAgICBhd2FpdCBGaWxlQ2xpZW50LmdldEluc3RhbmNlQXBpKCkuZmlsZUFwaS5wdXRGaWxlKGZvbGRlciwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0ZpbGVOYW1lSWxsZWdhbChmaWxlbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBmaWxlbmFtZSAhPT0gc2FuaXRpemUoZmlsZW5hbWUpO1xuICAgIH1cbn1cbiIsImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyBpbmplY3QsIGluamVjdGFibGUgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgVFlQRVMsIFZFUlNJT04gfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgSVBsdWdpblN5c3RlbSwgSVN0b3JhZ2VNYW5hZ2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUExVR0lOX1NZU1RFTV9TQUZFX01PREVfRU5BQkxFRCB9IGZyb20gJy4vcGx1Z2luLWNvbmZpZyc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi91dGlsJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBsdWdpblN5c3RlbSBpbXBsZW1lbnRzIElQbHVnaW5TeXN0ZW0ge1xuICAgIHB1YmxpYyB2ZXJzaW9uID0gVkVSU0lPTjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAaW5qZWN0KFRZUEVTLlBsdWdpbkxvYWRlcikgcHJpdmF0ZSBwbHVnaW5Mb2FkZXIsXG4gICAgICAgIEBpbmplY3QoVFlQRVMuU3lzdGVtTWFuYWdlcikgcHJpdmF0ZSBwc2xtLFxuICAgICAgICBAaW5qZWN0KFRZUEVTLlN0b3JhZ2VNYW5hZ2VyKSBwcml2YXRlIHN0b3JhZ2VNYW5hZ2VyOiBJU3RvcmFnZU1hbmFnZXIsXG4gICAgICAgIEBpbmplY3QoVFlQRVMuQ29tbWFuZE1hbmFnZXIpIHByaXZhdGUgY29tbWFuZE1hbmFnZXIsXG4gICAgICAgIEBpbmplY3QoVFlQRVMuU3RvcmUpIHByaXZhdGUgc3RvcmVcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VNYW5hZ2VyLmluaXRTdG9yYWdlKCk7XG4gICAgICAgIGNvbnN0IGludGVybmFsUGx1Z2lucyA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0SW50ZXJuYWxQbHVnaW5zKCk7XG4gICAgICAgIHRoaXMucGx1Z2luTG9hZGVyLmxvYWRFbmFibGVkUGx1Z2lucyhpbnRlcm5hbFBsdWdpbnMpO1xuICAgICAgICBsb2coYExvYWRpbmcgaW50ZXJuYWwgZW5hYmxlZCBwbHVnaW5zOiAke2ludGVybmFsUGx1Z2lucy5tYXAoKHApID0+IHAua2V5KS5qb2luKCcsJyl9YCk7XG4gICAgICAgIGNvbnN0IHNlY3VyaXR5TW9kZUVuYWJsZWQgPSB0aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldChQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEKTtcbiAgICAgICAgaWYgKCFzZWN1cml0eU1vZGVFbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW5zID0gdGhpcy5zdG9yYWdlTWFuYWdlci5nZXRUaGlyZFBhcnR5UGx1Z2lucygpO1xuICAgICAgICAgICAgbG9nKGBMb2FkaW5nIDNyZCBwYXJ0eSBlbmFibGVkIHBsdWdpbnM6ICR7cGx1Z2lucy5tYXAoKHApID0+IHAua2V5KS5qb2luKCcsJyl9YCk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbkxvYWRlci5sb2FkRW5hYmxlZFBsdWdpbnMocGx1Z2lucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wc2xtLmxvY2FsQ2FjaGVJbml0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRQbHVnaW4oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXRQbHVnaW5FbmFibGVkKGtleSwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0UGx1Z2luQnlLZXkoa2V5KTtcbiAgICAgICAgdGhpcy5wbHVnaW5Mb2FkZXIubG9hZFBsdWdpbihwbHVnaW4pO1xuICAgIH1cblxuICAgIGFzeW5jIHVubG9hZFBsdWdpbihrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldFBsdWdpbkVuYWJsZWQoa2V5LCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGx1Z2luTG9hZGVyLnVubG9hZFBsdWdpbihrZXkpO1xuICAgIH1cblxuICAgIGFzeW5jIHR1cm5PZmZTYWZlTW9kZSgpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXRTYWZlTW9kZUVuYWJsZWQoZmFsc2UpO1xuICAgICAgICBjb25zdCBwbHVnaW5zID0gdGhpcy5zdG9yYWdlTWFuYWdlci5nZXRUaGlyZFBhcnR5UGx1Z2lucygpO1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5Mb2FkZXIubG9hZEVuYWJsZWRQbHVnaW5zKHBsdWdpbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHR1cm5PblNhZmVNb2RlKCkge1xuICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldFNhZmVNb2RlRW5hYmxlZCh0cnVlKTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0VGhpcmRQYXJ0eVBsdWdpbnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luTG9hZGVyLnVubG9hZFRoaXJkUGFydHlQbHVnaW5zKHBsdWdpbnMpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBtaWdyYXRlID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IFNOSVBQRVRfTkFNRSA9ICdwbHVnaW4tc3lzdGVtLWJhenphcic7XG4gICAgY29uc3QgY29udGVudCA9IGAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB3aW5kb3cucGx1Z2luU3lzdGVtU291cmNlID0gJ2Jhenphcic7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZmlsZS9nZXRGaWxlJywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgICBjYWNoZTogJ25vLWNhY2hlJyxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxuICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6ICduby1yZWZlcnJlcicsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHBhdGg6ICcvZGF0YS93aWRnZXRzL+aPkuS7tuezu+e7ny9wbHVnaW4uanMnIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QganMgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGV2YWwoanMpO1xuICAgIH0pKClgO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IGFzeW5jICh1cmwsIGJvZHkpID0+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZGlyZWN0OiAnZm9sbG93JyxcbiAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXInLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH07XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KCcvYXBpL3NuaXBwZXQvZ2V0U25pcHBldCcsIHsgZW5hYmxlZDogMiwgdHlwZTogJ2FsbCcgfSk7XG5cbiAgICBjb25zdCBzbmlwcGV0cyA9IHJlcy5kYXRhLnNuaXBwZXRzO1xuXG4gICAgZm9yIChjb25zdCBzbmlwcGV0IG9mIHNuaXBwZXRzKSB7XG4gICAgICAgIGlmIChzbmlwcGV0LnR5cGUgIT09ICdqcycpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbmlwcGV0LmNvbnRlbnQuaW5kZXhPZignaHR0cHM6Ly9naXRlZS5jb20venVvZXowMi9zaXl1YW4tcGx1Z2luLXN5c3RlbS9yYXcvbWFpbi9tYWluLmpzJykgIT09IC0xKSB7XG4gICAgICAgICAgICBzbmlwcGV0LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc25pcHBldC5uYW1lID09PSBTTklQUEVUX05BTUUpIHtcbiAgICAgICAgICAgIHNuaXBwZXQuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBzbmlwcGV0LmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdCgnL2FwaS9zbmlwcGV0L3NldFNuaXBwZXQnLCB7IHNuaXBwZXRzIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc25pcHBldHMuc3BsaWNlKDAsIDAsIHtcbiAgICAgICAgaWQ6ICcyMDIzMDMyNDEwMDk1OS1wbHVnaW5kJyxcbiAgICAgICAgbmFtZTogU05JUFBFVF9OQU1FLFxuICAgICAgICB0eXBlOiAnanMnLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBjb250ZW50LFxuICAgIH0pO1xuICAgIGF3YWl0IHJlcXVlc3QoJy9hcGkvc25pcHBldC9zZXRTbmlwcGV0JywgeyBzbmlwcGV0cyB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5wYXJlbnQubG9jYXRpb24ucmVsb2FkKCksIDEwMDApO1xufTtcbiIsImltcG9ydCB7IFBMVUdJTl9TWVNfQUJTX1BBVEgsIFNDUklQVF9VUkwsIFZFUlNJT04sIFZFUlNJT05fVVJMIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IFRZUEVTIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IF8sIGxvZywgcmVsb2FkV2luZG93LCBzaG93SW5mb01lc3NhZ2UgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBQTFVHSU5fU1lTVEVNX0FVVE9fVVBEQVRFIH0gZnJvbSAnLi9wbHVnaW4tY29uZmlnJztcbmltcG9ydCB7IElTdG9yYWdlTWFuYWdlciwgSVN5c3RlbU1hbmFnZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBGaWxlQ2xpZW50IH0gZnJvbSAnQC9hcGkvZmlsZS1hcGknO1xuaW1wb3J0IHsgbWlncmF0ZSB9IGZyb20gJ0AvdXRpbC9taWdyYXRlJztcbmltcG9ydCB7IHNlcnZlckFwaSB9IGZyb20gJ0AvYXBpJztcbmltcG9ydCB7IFNlbVZlciB9IGZyb20gJ3NlbXZlcic7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICdAL2ludGVybmFsL2NsYXNzZXMvbm90aWZpY2F0aW9uJztcblxuY29uc3QgcGx1Z2luU2NyaXB0UG9zaXRpb24gPSBQTFVHSU5fU1lTX0FCU19QQVRIO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3lzdGVtTWFuYWdlciBpbXBsZW1lbnRzIElTeXN0ZW1NYW5hZ2VyIHtcbiAgICBzdG9yYWdlTWFuZ2FnZXI6IElTdG9yYWdlTWFuYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKEBpbmplY3QoVFlQRVMuU3RvcmFnZU1hbmFnZXIpIHN0b3JhZ2VNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZU1hbmdhZ2VyID0gc3RvcmFnZU1hbmFnZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHNhdmVUb0xvY2FsKHA6IHN0cmluZywgY29udGVudDogc3RyaW5nKSB7XG4gICAgICAgIEZpbGVDbGllbnQuZ2V0SW5zdGFuY2VBcGkoKS5maWxlQXBpLnB1dEZpbGUocCwgY29udGVudCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9jYWxDYWNoZUluaXQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBGaWxlQ2xpZW50LmdldEluc3RhbmNlQXBpKCkuZmlsZUFwaS5nZXRGaWxlKHBsdWdpblNjcmlwdFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmIChwbHVnaW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5QXV0b1VwZ3JhZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nKCdQbHVnaW4gc3lzdGVtIG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IHdpbmRvdy5zaXl1YW5QbHVnaW5TY3JpcHQ7XG4gICAgICAgIGlmICghc2NyaXB0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlVG9Mb2NhbChwbHVnaW5TY3JpcHRQb3NpdGlvbiwgc2NyaXB0KTtcbiAgICAgICAgdGhpcy5kZWxheUF1dG9VcGdyYWRlKCk7XG4gICAgfVxuXG4gICAgZGVsYXlBdXRvVXBncmFkZSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF1dG9VcGRhdGUgPSB0aGlzLnN0b3JhZ2VNYW5nYWdlci5nZXQoUExVR0lOX1NZU1RFTV9BVVRPX1VQREFURSk7XG4gICAgICAgICAgICBpZiAoIWF1dG9VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICBsb2coJ0F1dG8gVXBkYXRlIHNraXBwZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlVcGdyYWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIGFzeW5jIHRyeVVwZ3JhZGUoKSB7XG4gICAgICAgIGlmICh3aW5kb3cucGx1Z2luU3lzdGVtU291cmNlID09PSAnYmF6emFyJykge1xuICAgICAgICAgICAgbG9nKCdQbHVnaW4gaW5zdGFsbGVkIGZyb20gYmF6emFyIHZlcnNpb24sIHVwZ3JhZGUgc2tpcCcpO1xuICAgICAgICAgICAgdGhpcy5jb21wYXJlV2lkZ2V0VmVyc2lvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZygnVHJ5IGdldHRpbmcgb25saW5lIHZlcnNpb24nKTtcbiAgICAgICAgY29uc3Qgb25saW5lVmVyc2lvbiA9IGF3YWl0IHRoaXMuZ2V0T25saW5lVmVyc2lvbigpO1xuICAgICAgICBpZiAob25saW5lVmVyc2lvbiAhPT0gVkVSU0lPTikge1xuICAgICAgICAgICAgc2hvd0luZm9NZXNzYWdlKGDmj5Lku7bns7vnu5/ojrflj5bliLDmnIDmlrDniYjmnKwgJHtvbmxpbmVWZXJzaW9ufe+8jOWNs+WwhuiHquWKqOabtOaWsGApO1xuICAgICAgICAgICAgbG9nKCdPbmxpbmUgVmVyc2lvbjogJyArIG9ubGluZVZlcnNpb24gKyAnLCBsb2NhbCB2ZXJzaW9uOiAnICsgVkVSU0lPTik7XG4gICAgICAgICAgICBsb2coJ0Rvd25sb2FkaW5nIG5ldyB2ZXJzaW9uIG9mIFBsdWdpbiBTeXN0ZW0nKTtcbiAgICAgICAgICAgIHRoaXMudXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nKCdWZXJzaW9uIGlzICcgKyBWRVJTSU9OICsgJywgT0snKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldE9ubGluZVZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChWRVJTSU9OX1VSTCwgeyBjYWNoZTogJ25vLWNhY2hlJyB9KS50aGVuKChyZXMpID0+IHJlcy50ZXh0KCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZ3JhZGUoKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGF3YWl0IGZldGNoKFNDUklQVF9VUkwsIHsgY2FjaGU6ICduby1jYWNoZScgfSkudGhlbigocmVzKSA9PiByZXMudGV4dCgpKTtcbiAgICAgICAgaWYgKCFzY3JpcHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtaWdyYXRlKCk7XG5cbiAgICAgICAgc2hvd0luZm9NZXNzYWdlKCfmj5Lku7bns7vnu5/ljYfnuqfkuK3vvIzljbPlsIboh6rliqjph43ovb0uLi4nKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlVG9Mb2NhbChwbHVnaW5TY3JpcHRQb3NpdGlvbiwgc2NyaXB0KTtcbiAgICAgICAgbG9nKCdQbHVnaW4gc3lzdGVtIHVwZ3JhZGVkLCByZWxvYWRpbmcuLi4nKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWxvYWRXaW5kb3coKSwgMzAwMCk7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcGFyZVdpZGdldFZlcnNpb24oKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNlcnZlckFwaS5nZXRCYXp6YXJXaWRnZXQoKTtcbiAgICAgICAgY29uc3QgcGFja2FnZXMgPSByZXMucGFja2FnZXM7XG4gICAgICAgIGNvbnN0IHBzID0gcGFja2FnZXMuZmluZCgocCkgPT4gcC5uYW1lID09PSAn5o+S5Lu257O757ufJyk7XG4gICAgICAgIGlmICghcHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXRlc3RWZXJzaW9uID0gcHMudmVyc2lvbjtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNlbVZlcihWRVJTSU9OKS5jb21wYXJlKGxhdGVzdFZlcnNpb24pO1xuICAgICAgICBpZiAocmVzdWx0IDwgMCkge1xuICAgICAgICAgICAgbmV3IE5vdGlmaWNhdGlvbih7IG1lc3NhZ2U6IF8oJ25ld192ZXJzaW9uX3dpZGdldCcpLCB0eXBlOiAnaW5mbycgfSkuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi4vYXBpL3BsdWdpbic7XG5pbXBvcnQgYXBpIGZyb20gJy4uL2FwaSc7XG5pbXBvcnQge1xuICAgIElQbHVnaW5Db21tYW5kLFxuICAgIElDb21tYW5kTWFuYWdlcixcbiAgICBJUGx1Z2luLFxuICAgIElQbHVnaW5GaWxlTWFuYWdlcixcbiAgICBJUGx1Z2luTG9hZGVyLFxuICAgIFBsdWdpbk1hbmlmZXN0LFxuICAgIFNldHRpbmdSZW5kZXIsXG4gICAgSVNldHRpbmdNYW5hZ2VyLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpbnRlcm5hbFBsdWdpbnMgfSBmcm9tICcuLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBUWVBFUyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBjb250YWluZXIgfSBmcm9tICdAL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBJU3RvcmFnZU1hbmFnZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxubGV0IGNvbXBvbmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQbHVnaW5Mb2FkZXIgaW1wbGVtZW50cyBJUGx1Z2luTG9hZGVyIHtcbiAgICBwbHVnaW5GaWxlTWFuYWdlcjogSVBsdWdpbkZpbGVNYW5hZ2VyO1xuXG4gICAgbG9hZGVkUGx1Z2luczogTWFwPHN0cmluZywgSVBsdWdpbj47XG5cbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0KFRZUEVTLlBsdWdpbkZpbGVNYW5hZ2VyKSBwbHVnaW5GaWxlTWFuYWdlcikge1xuICAgICAgICB0aGlzLnBsdWdpbkZpbGVNYW5hZ2VyID0gcGx1Z2luRmlsZU1hbmFnZXI7XG4gICAgICAgIHRoaXMubG9hZGVkUGx1Z2lucyA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkRW5hYmxlZFBsdWdpbnMocGx1Z2luczogUGx1Z2luTWFuaWZlc3RbXSkge1xuICAgICAgICBpZiAoIXBsdWdpbnMgfHwgIXBsdWdpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwIG9mIHBsdWdpbnMpIHtcbiAgICAgICAgICAgIGlmICghcC5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQbHVnaW4ocCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBsb2FkQWxsSW50ZXJuYWxQbHVnaW5zKCkge1xuICAgICAgICBpbnRlcm5hbFBsdWdpbnMuZm9yRWFjaChhc3luYyAocCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGx1ZyA9IG5ldyBwLnBsdWdpbigpO1xuICAgICAgICAgICAgaWYgKCEocGx1ZyBpbnN0YW5jZW9mIFBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIHBsdWdpbiAke3AubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZyhgTG9hZCBpbnRlcm5hbCBwbHVnaW46ICR7cC5rZXl9KCR7cC5uYW1lfSlgKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQWRkaXRpb25hbE1ldGhvZChwbHVnLCBwLmtleSwgcC5uYW1lKTtcbiAgICAgICAgICAgIGF3YWl0IHBsdWcub25sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRlZFBsdWdpbnMuc2V0KHAua2V5LCBwbHVnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZEFsbExvY2FsUGx1Z2lucygpIHtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGF3YWl0IHRoaXMucGx1Z2luRmlsZU1hbmFnZXIuZ2V0QWxsUGx1Z2lucygpO1xuICAgICAgICBpZiAoIXBsdWdpbnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcGx1Z2lucykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGx1Z2luKHApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFBsdWdpbihwbHVnaW46IFBsdWdpbk1hbmlmZXN0KSB7XG4gICAgICAgIGlmICghY29tcG9uZW50cykge1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVJlcXVpcmVkTW9kdWxlcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGx1Z2luLmVuYWJsZWQgfHwgKCFwbHVnaW4ucGx1Z2luICYmICFwbHVnaW4uc2NyaXB0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwbHVnaW4ucGx1Z2luKSB7XG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBwbHVnaW5cbiAgICAgICAgICAgIGNvbnN0IHBsdWcgPSBuZXcgcGx1Z2luLnBsdWdpbigpO1xuICAgICAgICAgICAgaWYgKCEocGx1ZyBpbnN0YW5jZW9mIFBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIHBsdWdpbiAke3BsdWdpbi5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nKGBMb2FkIGludGVybmFsIHBsdWdpbjogJHtwbHVnaW4ua2V5fSgke3BsdWdpbi5uYW1lfSlgKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQWRkaXRpb25hbE1ldGhvZChwbHVnLCBwbHVnaW4ua2V5LCBwbHVnaW4ubmFtZSk7XG4gICAgICAgICAgICBhd2FpdCBwbHVnLm9ubG9hZCgpO1xuICAgICAgICAgICAgdGhpcy5sb2FkZWRQbHVnaW5zLnNldChwbHVnaW4ua2V5LCBwbHVnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHBvcnRzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgICAgIGNvbnN0IG1vZHVsZSA9IHsgZXhwb3J0cyB9O1xuICAgICAgICBmdW5jdGlvbiBydW4oc2NyaXB0OiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGV2YWwoJyhmdW5jdGlvbiBhbm9ueW1vdXMocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Jy5jb25jYXQoc2NyaXB0LCAnXFxufSlcXG4vLyMgc291cmNlVVJMPScpLmNvbmNhdChuYW1lLCAnXFxuJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9fcmVxdWlyZSA9IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1vZHVsZSAke25hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwbHVnaW5OYW1lID0gcGx1Z2luLmtleTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJ1bihwbHVnaW4uc2NyaXB0LCBwbHVnaW4ua2V5KShfX3JlcXVpcmUsIG1vZHVsZSwgZXhwb3J0cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yKCdFcnJvciBwbHVnaW46JyArIHBsdWdpbi5rZXkgKyAnIC0+JywgZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBsdWdpbkNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoIShwbHVnaW5Db25zdHJ1Y3RvciA9IChtb2R1bGUuZXhwb3J0cyB8fCBleHBvcnRzKS5kZWZhdWx0IHx8IG1vZHVsZS5leHBvcnRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBwbHVnaW4gJHtwbHVnaW5OYW1lfS4gTm8gZXhwb3J0cyBkZXRlY3RlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbHVnID0gbmV3IHBsdWdpbkNvbnN0cnVjdG9yKCk7XG4gICAgICAgIGlmICghKHBsdWcgaW5zdGFuY2VvZiBQbHVnaW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIHBsdWdpbiAke3BsdWdpbk5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRBZGRpdGlvbmFsTWV0aG9kKHBsdWcsIHBsdWdpbi5rZXksIHBsdWdpbk5hbWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcGx1Zy5vbmxvYWQoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkUGx1Z2lucy5zZXQocGx1Z2luLmtleSwgcGx1Zyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yKCdFcnJvciBwbHVnaW46JyArIHBsdWdpbi5rZXkgKyAnIC0+JywgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB1bmxvYWRQbHVnaW4oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gdGhpcy5sb2FkZWRQbHVnaW5zLmdldChrZXkpO1xuICAgICAgICBpZiAoIXBsdWdpbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbi5vbnVubG9hZCgpO1xuICAgICAgICBjb250YWluZXIuZ2V0PElDb21tYW5kTWFuYWdlcj4oVFlQRVMuQ29tbWFuZE1hbmFnZXIpLnVucmVnaXN0ZXJDb21tYW5kQnlQbHVnaW4oa2V5KTtcbiAgICAgICAgY29udGFpbmVyLmdldDxJU2V0dGluZ01hbmFnZXI+KFRZUEVTLlNldHRpbmdNYW5hZ2VyKS51bnJlZ2lzdGVyU2V0dGluZyhrZXkpO1xuICAgICAgICB0aGlzLmxvYWRlZFBsdWdpbnMuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgdW5sb2FkVGhpcmRQYXJ0eVBsdWdpbnMocGx1Z2luczogUGx1Z2luTWFuaWZlc3RbXSkge1xuICAgICAgICBjb25zdCBrZXlzID0gcGx1Z2lucy5maWx0ZXIoKHApID0+IHAuZW5hYmxlZCkubWFwKChwKSA9PiBwLmtleSk7XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG4gICAgICAgICAgICBsb2coYHVubG9hZCB0aGlyZCBwYXJ0eSBwbHVnaW46ICR7a31gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5sb2FkUGx1Z2luKGspO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFRoaXJkUGFydHlFbmFibGVkUGx1Z2lucyhwbHVnaW5zOiBQbHVnaW5NYW5pZmVzdFtdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRFbmFibGVkUGx1Z2lucyhwbHVnaW5zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2VuZXJhdGVSZXF1aXJlZE1vZHVsZXMoKSB7XG4gICAgICAgIGNvbXBvbmVudHMgPSB7XG4gICAgICAgICAgICBzaXl1YW46IGFwaSxcbiAgICAgICAgICAgIGF4aW9zOiBheGlvcyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEFkZGl0aW9uYWxNZXRob2QocGx1Z2luOiBQbHVnaW4sIHBsdWdpbktleTogc3RyaW5nLCBwbHVnaW5OYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcGx1Z2luLnJlZ2lzdGVyQ29tbWFuZCA9IChjb21tYW5kOiBJUGx1Z2luQ29tbWFuZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY20gPSBjb250YWluZXIuZ2V0PElDb21tYW5kTWFuYWdlcj4oVFlQRVMuQ29tbWFuZE1hbmFnZXIpO1xuICAgICAgICAgICAgY20ucmVnaXN0ZXJDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAuLi5jb21tYW5kLFxuICAgICAgICAgICAgICAgIHBsdWdpbjogcGx1Z2luS2V5LFxuICAgICAgICAgICAgICAgIHBsdWdpbk5hbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzbSA9IGNvbnRhaW5lci5nZXQ8SVN0b3JhZ2VNYW5hZ2VyPihUWVBFUy5TdG9yYWdlTWFuYWdlcik7XG4gICAgICAgIHBsdWdpbi53cml0ZVN0b3JhZ2UgPSBhc3luYyAoZmlsZW5hbWU6IHN0cmluZywgY29udGVudDogYW55KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc20uc2V0UGx1Z2luU3RvcmFnZShwbHVnaW5LZXksIGZpbGVuYW1lLCBjb250ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgcGx1Z2luLmxvYWRTdG9yYWdlID0gYXN5bmMgKGZpbGVuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzbS5nZXRQbHVnaW5TdG9yYWdlKHBsdWdpbktleSwgZmlsZW5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBwbHVnaW4ucmVnaXN0ZXJTZXR0aW5nUmVuZGVyID0gKHNldHRpbmdSZW5kZXI6IFNldHRpbmdSZW5kZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNtID0gY29udGFpbmVyLmdldDxJU2V0dGluZ01hbmFnZXI+KFRZUEVTLlNldHRpbmdNYW5hZ2VyKTtcbiAgICAgICAgICAgIGNtLnJlZ2lzdGVyU2V0dGluZyhwbHVnaW5LZXksIHNldHRpbmdSZW5kZXIpO1xuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZpbGVDbGllbnQgfSBmcm9tICdAL2FwaS9maWxlLWFwaSc7XG5pbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFBsdWdpbk1hbmlmZXN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZXJyb3IsIGlzRXhpc3RzLCBsb2cgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGNvbnN0IE1BTklGRVNUID0gJ21hbmlmZXN0Lmpzb24nO1xuXG5leHBvcnQgY29uc3QgU0NSSVBUID0gJ21haW4uanMnO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGx1Z2luRmlsZU1hbmFnZXIge1xuICAgIGFzeW5jIHNjYW5QbHVnaW5zKHBsdWdpbkZvbGRlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBGaWxlQ2xpZW50LmdldEluc3RhbmNlQXBpKCkuZmlsZUFwaS5yZWFkRGlyKHBsdWdpbkZvbGRlcik7XG4gICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZXMgPSByZXM7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBmIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBpZiAoZi5uYW1lLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGYuaXNEaXIgJiYgKGF3YWl0IGlzRXhpc3RzKGAvZGF0YS9wbHVnaW5zLyR7Zi5uYW1lfS9tYW5pZmVzdC5qc29uYCkpICYmIChhd2FpdCBpc0V4aXN0cyhgL2RhdGEvcGx1Z2lucy8ke2YubmFtZX0vbWFpbi5qc2ApKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGAvZGF0YS9wbHVnaW5zLyR7Zi5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZUNvbnRlbnQoZjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgRmlsZUNsaWVudC5nZXRJbnN0YW5jZUFwaSgpLmZpbGVBcGkuZ2V0RmlsZShmKTtcbiAgICAgICAgcmV0dXJuIHJlcyB8fCAnJztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRNYW5pZmVzdChtYW5pZmVzdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmdldEZpbGVDb250ZW50KG1hbmlmZXN0KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcignbG9hZGluZyBtYW5pZmVzdDogJyArIG1hbmlmZXN0LCBlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2NyaXB0KHNjcmlwdDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEZpbGVDb250ZW50KHNjcmlwdCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsUGx1Z2lucygpOiBQcm9taXNlPFBsdWdpbk1hbmlmZXN0W10+IHtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGF3YWl0IHRoaXMuc2NhblBsdWdpbnMoJy9kYXRhL3BsdWdpbnMnKTtcbiAgICAgICAgaWYgKCFwbHVnaW5zIHx8ICFwbHVnaW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nKCdObyBwbHVnaW4gZm91bmQgaW4gJyArICcvZGF0YS9wbHVnaW5zJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBwbHVnaW5zKSB7XG4gICAgICAgICAgICBsb2coJ1JlYWRpbmcgcGx1Z2luIGZyb20gZmlsZXN5c3RlbTogJyArIHApO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRGb2xkZXJOYW1lKHApO1xuICAgICAgICAgICAgY29uc3QgZiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbWFuaWZlc3QsIHNjcmlwdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5nZXRNYW5pZmVzdChgJHtwfS9tYW5pZmVzdC5qc29uYCksIHRoaXMuZ2V0U2NyaXB0KGAke3B9L21haW4uanNgKV0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLm1hbmlmZXN0LCBzY3JpcHQsIGVuYWJsZWQ6IGZhbHNlLCBrZXkgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXEucHVzaChmKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdDogUGx1Z2luTWFuaWZlc3RbXSA9IGF3YWl0IFByb21pc2UuYWxsKHJlcSk7XG4gICAgICAgIHJldHVybiByZXN1bHQgfHwgW107XG4gICAgfVxuXG4gICAgZ2V0Rm9sZGVyTmFtZShwKSB7XG4gICAgICAgIGNvbnN0IGYgPSBwLnNwbGl0KCcvJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSBmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoZltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJRXZlbnRCdXMsIExpc3RlbmVyIH0gZnJvbSAnQC90eXBlcyc7XG5pbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzIGltcGxlbWVudHMgSUV2ZW50QnVzIHtcbiAgICBwcml2YXRlIGV2ZW50TGlzdGVuZXJzOiB7IFtrZXk6IHN0cmluZ106IExpc3RlbmVyW10gfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0ge307XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZXZlbnRMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBMaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5vZmYoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgb2ZmKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjaz86IExpc3RlbmVyKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV1baV0gPT09IGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudE5hbWVdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbWl0KGV2ZW50TmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudE5hbWVdLmZvckVhY2goKGNiKSA9PiB7XG4gICAgICAgICAgICAgICAgY2IoLi4uYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFRZUEVTIH0gZnJvbSAnQC9jb25maWcnO1xuaW1wb3J0IHsgQ29tbWFuZCwgSUNvbW1hbmRNYW5hZ2VyIH0gZnJvbSAnQC90eXBlcyc7XG5pbXBvcnQgeyBFcnJvciwgbG9nLCBXYXJuaW5nIH0gZnJvbSAnQC91dGlsJztcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTaG9ydGN1dCB9IGZyb20gJy4vc2hvcnRjdXQnO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1hbmFnZXIgaW1wbGVtZW50cyBJQ29tbWFuZE1hbmFnZXIge1xuICAgIHByaXZhdGUgc2hvcnRjdXQ6IFNob3J0Y3V0O1xuICAgIHByaXZhdGUgY29tbWFuZExpc3Q6IENvbW1hbmRbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihAaW5qZWN0KFRZUEVTLlNob3J0Y3V0KSBzaG9ydGN1dCkge1xuICAgICAgICB0aGlzLmNvbW1hbmRMaXN0ID0gW107XG4gICAgICAgIHRoaXMuc2hvcnRjdXQgPSBzaG9ydGN1dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJDb21tYW5kKGNvbW1hbmQ6IENvbW1hbmQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5jb21tYW5kTGlzdC5zb21lKChjb20pID0+IHtcbiAgICAgICAgICAgICAgICBjb20ucGx1Z2luID09PSBjb21tYW5kLnBsdWdpbiAmJiBjb20uY29tbWFuZCA9PT0gY29tbWFuZC5jb21tYW5kO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdDb21tYW5kIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgZG8gbm90IHJlZ2lzdGVyIGNvbW1hbmQgcmVwZWF0bHknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb21tYW5kLnNob3J0Y3V0ICYmXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRMaXN0LnNvbWUoKGNvbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbS5zaG9ydGN1dCA9PT0gY29tbWFuZC5zaG9ydGN1dDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXYXJuaW5nKCdzaG9ydGN1dCBoYXMgYWxyZWFkeSByZWdpc3RlcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21tYW5kTGlzdC5wdXNoKGNvbW1hbmQpO1xuICAgICAgICB0aGlzLnNob3J0Y3V0LnJlZ2lzdGVyS2V5Ym9hcmRFdmVudEZyb21QbHVnaW4oY29tbWFuZCk7XG4gICAgICAgIGxvZyhgUmVnaXN0ZXIgcGx1Z2luOiAke2NvbW1hbmQucGx1Z2lufSBjb21tYW5kOiAke2NvbW1hbmQuY29tbWFuZH1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5yZWdpc3RlckNvbW1hbmRCeVBsdWdpbihwbHVnaW46IHN0cmluZykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29tbWFuZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4gPT09IHRoaXMuY29tbWFuZExpc3RbaV0ucGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tID0gdGhpcy5jb21tYW5kTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBsb2coYFVucmVnaXN0ZXIgcGx1Z2luOiAke3BsdWdpbn0gY29tbWFuZDogJHtjb20uY29tbWFuZH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRMaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tLnNob3J0Y3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvcnRjdXQudW5yZWdpc3RlcktleWJvYXJkRXZlbnQoY29tLnNob3J0Y3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdW5yZWdpc3RlckNvbW1hbmQoY29tbWFuZDogQ29tbWFuZCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29tbWFuZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT09IHRoaXMuY29tbWFuZExpc3RbaV0uY29tbWFuZCAmJiBjb21tYW5kLnBsdWdpbiA9PT0gdGhpcy5jb21tYW5kTGlzdFtpXS5wbHVnaW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRMaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3J0Y3V0LnJlZ2lzdGVyS2V5Ym9hcmRFdmVudEZyb21QbHVnaW4oY29tbWFuZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbW1hbmRzKCk6IENvbW1hbmRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRMaXN0O1xuICAgIH1cbn1cbiIsIi8qKiEgXG4gKiBob3RrZXlzLWpzIHYzLjEwLjEgXG4gKiBBIHNpbXBsZSBtaWNyby1saWJyYXJ5IGZvciBkZWZpbmluZyBhbmQgZGlzcGF0Y2hpbmcga2V5Ym9hcmQgc2hvcnRjdXRzLiBJdCBoYXMgbm8gZGVwZW5kZW5jaWVzLiBcbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDIyIGtlbm55IHdvbmcgPHdvd29ob29AcXEuY29tPiBcbiAqIGh0dHA6Ly9qYXl3Y2psb3ZlLmdpdGh1Yi5pby9ob3RrZXlzIFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIFxuICovXG5cbnZhciBpc2ZmID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpID4gMCA6IGZhbHNlOyAvLyDnu5Hlrprkuovku7ZcblxuZnVuY3Rpb24gYWRkRXZlbnQob2JqZWN0LCBldmVudCwgbWV0aG9kLCB1c2VDYXB0dXJlKSB7XG4gIGlmIChvYmplY3QuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIG9iamVjdC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBtZXRob2QsIHVzZUNhcHR1cmUpO1xuICB9IGVsc2UgaWYgKG9iamVjdC5hdHRhY2hFdmVudCkge1xuICAgIG9iamVjdC5hdHRhY2hFdmVudChcIm9uXCIuY29uY2F0KGV2ZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgbWV0aG9kKHdpbmRvdy5ldmVudCk7XG4gICAgfSk7XG4gIH1cbn0gLy8g5L+u6aWw6ZSu6L2s5o2i5oiQ5a+55bqU55qE6ZSu56CBXG5cblxuZnVuY3Rpb24gZ2V0TW9kcyhtb2RpZmllciwga2V5KSB7XG4gIHZhciBtb2RzID0ga2V5LnNsaWNlKDAsIGtleS5sZW5ndGggLSAxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHMubGVuZ3RoOyBpKyspIHtcbiAgICBtb2RzW2ldID0gbW9kaWZpZXJbbW9kc1tpXS50b0xvd2VyQ2FzZSgpXTtcbiAgfVxuXG4gIHJldHVybiBtb2RzO1xufSAvLyDlpITnkIbkvKDnmoRrZXnlrZfnrKbkuLLovazmjaLmiJDmlbDnu4RcblxuXG5mdW5jdGlvbiBnZXRLZXlzKGtleSkge1xuICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIGtleSA9ICcnO1xuICBrZXkgPSBrZXkucmVwbGFjZSgvXFxzL2csICcnKTsgLy8g5Yy56YWN5Lu75L2V56m655m95a2X56ymLOWMheaLrOepuuagvOOAgeWItuihqOespuOAgeaNoumhteespuetieetiVxuXG4gIHZhciBrZXlzID0ga2V5LnNwbGl0KCcsJyk7IC8vIOWQjOaXtuiuvue9ruWkmuS4quW/q+aNt+mUru+8jOS7pScsJ+WIhuWJslxuXG4gIHZhciBpbmRleCA9IGtleXMubGFzdEluZGV4T2YoJycpOyAvLyDlv6vmjbfplK7lj6/og73ljIXlkKsnLCfvvIzpnIDnibnmrorlpITnkIZcblxuICBmb3IgKDsgaW5kZXggPj0gMDspIHtcbiAgICBrZXlzW2luZGV4IC0gMV0gKz0gJywnO1xuICAgIGtleXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBpbmRleCA9IGtleXMubGFzdEluZGV4T2YoJycpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59IC8vIOavlOi+g+S/rumlsOmUrueahOaVsOe7hFxuXG5cbmZ1bmN0aW9uIGNvbXBhcmVBcnJheShhMSwgYTIpIHtcbiAgdmFyIGFycjEgPSBhMS5sZW5ndGggPj0gYTIubGVuZ3RoID8gYTEgOiBhMjtcbiAgdmFyIGFycjIgPSBhMS5sZW5ndGggPj0gYTIubGVuZ3RoID8gYTIgOiBhMTtcbiAgdmFyIGlzSW5kZXggPSB0cnVlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyMS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnIyLmluZGV4T2YoYXJyMVtpXSkgPT09IC0xKSBpc0luZGV4ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNJbmRleDtcbn1cblxudmFyIF9rZXlNYXAgPSB7XG4gIGJhY2tzcGFjZTogOCxcbiAgJ+KMqyc6IDgsXG4gIHRhYjogOSxcbiAgY2xlYXI6IDEyLFxuICBlbnRlcjogMTMsXG4gICfihqknOiAxMyxcbiAgcmV0dXJuOiAxMyxcbiAgZXNjOiAyNyxcbiAgZXNjYXBlOiAyNyxcbiAgc3BhY2U6IDMyLFxuICBsZWZ0OiAzNyxcbiAgdXA6IDM4LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICBkZWw6IDQ2LFxuICBkZWxldGU6IDQ2LFxuICBpbnM6IDQ1LFxuICBpbnNlcnQ6IDQ1LFxuICBob21lOiAzNixcbiAgZW5kOiAzNSxcbiAgcGFnZXVwOiAzMyxcbiAgcGFnZWRvd246IDM0LFxuICBjYXBzbG9jazogMjAsXG4gIG51bV8wOiA5NixcbiAgbnVtXzE6IDk3LFxuICBudW1fMjogOTgsXG4gIG51bV8zOiA5OSxcbiAgbnVtXzQ6IDEwMCxcbiAgbnVtXzU6IDEwMSxcbiAgbnVtXzY6IDEwMixcbiAgbnVtXzc6IDEwMyxcbiAgbnVtXzg6IDEwNCxcbiAgbnVtXzk6IDEwNSxcbiAgbnVtX211bHRpcGx5OiAxMDYsXG4gIG51bV9hZGQ6IDEwNyxcbiAgbnVtX2VudGVyOiAxMDgsXG4gIG51bV9zdWJ0cmFjdDogMTA5LFxuICBudW1fZGVjaW1hbDogMTEwLFxuICBudW1fZGl2aWRlOiAxMTEsXG4gICfih6onOiAyMCxcbiAgJywnOiAxODgsXG4gICcuJzogMTkwLFxuICAnLyc6IDE5MSxcbiAgJ2AnOiAxOTIsXG4gICctJzogaXNmZiA/IDE3MyA6IDE4OSxcbiAgJz0nOiBpc2ZmID8gNjEgOiAxODcsXG4gICc7JzogaXNmZiA/IDU5IDogMTg2LFxuICAnXFwnJzogMjIyLFxuICAnWyc6IDIxOSxcbiAgJ10nOiAyMjEsXG4gICdcXFxcJzogMjIwXG59OyAvLyBNb2RpZmllciBLZXlzXG5cbnZhciBfbW9kaWZpZXIgPSB7XG4gIC8vIHNoaWZ0S2V5XG4gICfih6cnOiAxNixcbiAgc2hpZnQ6IDE2LFxuICAvLyBhbHRLZXlcbiAgJ+KMpSc6IDE4LFxuICBhbHQ6IDE4LFxuICBvcHRpb246IDE4LFxuICAvLyBjdHJsS2V5XG4gICfijIMnOiAxNyxcbiAgY3RybDogMTcsXG4gIGNvbnRyb2w6IDE3LFxuICAvLyBtZXRhS2V5XG4gICfijJgnOiA5MSxcbiAgY21kOiA5MSxcbiAgY29tbWFuZDogOTFcbn07XG52YXIgbW9kaWZpZXJNYXAgPSB7XG4gIDE2OiAnc2hpZnRLZXknLFxuICAxODogJ2FsdEtleScsXG4gIDE3OiAnY3RybEtleScsXG4gIDkxOiAnbWV0YUtleScsXG4gIHNoaWZ0S2V5OiAxNixcbiAgY3RybEtleTogMTcsXG4gIGFsdEtleTogMTgsXG4gIG1ldGFLZXk6IDkxXG59O1xudmFyIF9tb2RzID0ge1xuICAxNjogZmFsc2UsXG4gIDE4OiBmYWxzZSxcbiAgMTc6IGZhbHNlLFxuICA5MTogZmFsc2Vcbn07XG52YXIgX2hhbmRsZXJzID0ge307IC8vIEYxfkYxMiBzcGVjaWFsIGtleVxuXG5mb3IgKHZhciBrID0gMTsgayA8IDIwOyBrKyspIHtcbiAgX2tleU1hcFtcImZcIi5jb25jYXQoayldID0gMTExICsgaztcbn1cblxudmFyIF9kb3duS2V5cyA9IFtdOyAvLyDorrDlvZXmkYHkuIvnmoTnu5HlrprplK5cblxudmFyIHdpbkxpc3RlbmRGb2N1cyA9IGZhbHNlOyAvLyB3aW5kb3fmmK/lkKblt7Lnu4/nm5HlkKzkuoZmb2N1c+S6i+S7tlxuXG52YXIgX3Njb3BlID0gJ2FsbCc7IC8vIOm7mOiupOeDremUruiMg+WbtFxuXG52YXIgZWxlbWVudEhhc0JpbmRFdmVudCA9IFtdOyAvLyDlt7Lnu5Hlrprkuovku7bnmoToioLngrnorrDlvZVcbi8vIOi/lOWbnumUrueggVxuXG52YXIgY29kZSA9IGZ1bmN0aW9uIGNvZGUoeCkge1xuICByZXR1cm4gX2tleU1hcFt4LnRvTG93ZXJDYXNlKCldIHx8IF9tb2RpZmllclt4LnRvTG93ZXJDYXNlKCldIHx8IHgudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xufTtcblxudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleSh4KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhfa2V5TWFwKS5maW5kKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIF9rZXlNYXBba10gPT09IHg7XG4gIH0pO1xufTtcblxudmFyIGdldE1vZGlmaWVyID0gZnVuY3Rpb24gZ2V0TW9kaWZpZXIoeCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoX21vZGlmaWVyKS5maW5kKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIF9tb2RpZmllcltrXSA9PT0geDtcbiAgfSk7XG59OyAvLyDorr7nva7ojrflj5blvZPliY3ojIPlm7TvvIjpu5jorqTkuLon5omA5pyJJ++8iVxuXG5cbmZ1bmN0aW9uIHNldFNjb3BlKHNjb3BlKSB7XG4gIF9zY29wZSA9IHNjb3BlIHx8ICdhbGwnO1xufSAvLyDojrflj5blvZPliY3ojIPlm7RcblxuXG5mdW5jdGlvbiBnZXRTY29wZSgpIHtcbiAgcmV0dXJuIF9zY29wZSB8fCAnYWxsJztcbn0gLy8g6I635Y+W5pGB5LiL57uR5a6a6ZSu55qE6ZSu5YC8XG5cblxuZnVuY3Rpb24gZ2V0UHJlc3NlZEtleUNvZGVzKCkge1xuICByZXR1cm4gX2Rvd25LZXlzLnNsaWNlKDApO1xufVxuXG5mdW5jdGlvbiBnZXRQcmVzc2VkS2V5U3RyaW5nKCkge1xuICByZXR1cm4gX2Rvd25LZXlzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBnZXRLZXkoYykgfHwgZ2V0TW9kaWZpZXIoYykgfHwgU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfSk7XG59IC8vIOihqOWNleaOp+S7tuaOp+S7tuWIpOaWrSDov5Tlm54gQm9vbGVhblxuLy8gaG90a2V5IGlzIGVmZmVjdGl2ZSBvbmx5IHdoZW4gZmlsdGVyIHJldHVybiB0cnVlXG5cblxuZnVuY3Rpb24gZmlsdGVyKGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgdmFyIHRhZ05hbWUgPSB0YXJnZXQudGFnTmFtZTtcbiAgdmFyIGZsYWcgPSB0cnVlOyAvLyBpZ25vcmU6IGlzQ29udGVudEVkaXRhYmxlID09PSAndHJ1ZScsIDxpbnB1dD4gYW5kIDx0ZXh0YXJlYT4gd2hlbiByZWFkT25seSBzdGF0ZSBpcyBmYWxzZSwgPHNlbGVjdD5cblxuICBpZiAodGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlIHx8ICh0YWdOYW1lID09PSAnSU5QVVQnIHx8IHRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgdGFnTmFtZSA9PT0gJ1NFTEVDVCcpICYmICF0YXJnZXQucmVhZE9ubHkpIHtcbiAgICBmbGFnID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmxhZztcbn0gLy8g5Yik5pat5pGB5LiL55qE6ZSu5piv5ZCm5Li65p+Q5Liq6ZSu77yM6L+U5ZuedHJ1ZeaIluiAhWZhbHNlXG5cblxuZnVuY3Rpb24gaXNQcmVzc2VkKGtleUNvZGUpIHtcbiAgaWYgKHR5cGVvZiBrZXlDb2RlID09PSAnc3RyaW5nJykge1xuICAgIGtleUNvZGUgPSBjb2RlKGtleUNvZGUpOyAvLyDovazmjaLmiJDplK7noIFcbiAgfVxuXG4gIHJldHVybiBfZG93bktleXMuaW5kZXhPZihrZXlDb2RlKSAhPT0gLTE7XG59IC8vIOW+queOr+WIoOmZpGhhbmRsZXJz5Lit55qE5omA5pyJIHNjb3BlKOiMg+WbtClcblxuXG5mdW5jdGlvbiBkZWxldGVTY29wZShzY29wZSwgbmV3U2NvcGUpIHtcbiAgdmFyIGhhbmRsZXJzO1xuICB2YXIgaTsgLy8g5rKh5pyJ5oyH5a6ac2NvcGXvvIzojrflj5ZzY29wZVxuXG4gIGlmICghc2NvcGUpIHNjb3BlID0gZ2V0U2NvcGUoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gX2hhbmRsZXJzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfaGFuZGxlcnMsIGtleSkpIHtcbiAgICAgIGhhbmRsZXJzID0gX2hhbmRsZXJzW2tleV07XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7KSB7XG4gICAgICAgIGlmIChoYW5kbGVyc1tpXS5zY29wZSA9PT0gc2NvcGUpIGhhbmRsZXJzLnNwbGljZShpLCAxKTtlbHNlIGkrKztcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8g5aaC5p6cc2NvcGXooqvliKDpmaTvvIzlsIZzY29wZemHjee9ruS4umFsbFxuXG5cbiAgaWYgKGdldFNjb3BlKCkgPT09IHNjb3BlKSBzZXRTY29wZShuZXdTY29wZSB8fCAnYWxsJyk7XG59IC8vIOa4hemZpOS/rumlsOmUrlxuXG5cbmZ1bmN0aW9uIGNsZWFyTW9kaWZpZXIoZXZlbnQpIHtcbiAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGU7XG5cbiAgdmFyIGkgPSBfZG93bktleXMuaW5kZXhPZihrZXkpOyAvLyDku47liJfooajkuK3muIXpmaTmjInljovov4fnmoTplK5cblxuXG4gIGlmIChpID49IDApIHtcbiAgICBfZG93bktleXMuc3BsaWNlKGksIDEpO1xuICB9IC8vIOeJueauiuWkhOeQhiBjbW1hbmQg6ZSu77yM5ZyoIGNtbWFuZCDnu4TlkIjlv6vmjbfplK4ga2V5dXAg5Y+q5omn6KGM5LiA5qyh55qE6Zeu6aKYXG5cblxuICBpZiAoZXZlbnQua2V5ICYmIGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSAnbWV0YScpIHtcbiAgICBfZG93bktleXMuc3BsaWNlKDAsIF9kb3duS2V5cy5sZW5ndGgpO1xuICB9IC8vIOS/rumlsOmUriBzaGlmdEtleSBhbHRLZXkgY3RybEtleSAoY29tbWFuZHx8bWV0YUtleSkg5riF6ZmkXG5cblxuICBpZiAoa2V5ID09PSA5MyB8fCBrZXkgPT09IDIyNCkga2V5ID0gOTE7XG5cbiAgaWYgKGtleSBpbiBfbW9kcykge1xuICAgIF9tb2RzW2tleV0gPSBmYWxzZTsgLy8g5bCG5L+u6aWw6ZSu6YeN572u5Li6ZmFsc2VcblxuICAgIGZvciAodmFyIGsgaW4gX21vZGlmaWVyKSB7XG4gICAgICBpZiAoX21vZGlmaWVyW2tdID09PSBrZXkpIGhvdGtleXNba10gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5iaW5kKGtleXNJbmZvKSB7XG4gIC8vIHVuYmluZCgpLCB1bmJpbmQgYWxsIGtleXNcbiAgaWYgKHR5cGVvZiBrZXlzSW5mbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBPYmplY3Qua2V5cyhfaGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGRlbGV0ZSBfaGFuZGxlcnNba2V5XTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGtleXNJbmZvKSkge1xuICAgIC8vIHN1cHBvcnQgbGlrZSA6IHVuYmluZChbe2tleTogJ2N0cmwrYScsIHNjb3BlOiAnczEnfSwge2tleTogJ2N0cmwtYScsIHNjb3BlOiAnczInLCBzcGxpdEtleTogJy0nfV0pXG4gICAga2V5c0luZm8uZm9yRWFjaChmdW5jdGlvbiAoaW5mbykge1xuICAgICAgaWYgKGluZm8ua2V5KSBlYWNoVW5iaW5kKGluZm8pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBrZXlzSW5mbyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBzdXBwb3J0IGxpa2UgdW5iaW5kKHtrZXk6ICdjdHJsK2EsIGN0cmwrYicsIHNjb3BlOidhYmMnfSlcbiAgICBpZiAoa2V5c0luZm8ua2V5KSBlYWNoVW5iaW5kKGtleXNJbmZvKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Yga2V5c0luZm8gPT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBvbGQgbWV0aG9kXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBzY29wZSA9IGFyZ3NbMF0sXG4gICAgICAgIG1ldGhvZCA9IGFyZ3NbMV07XG5cbiAgICBpZiAodHlwZW9mIHNjb3BlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtZXRob2QgPSBzY29wZTtcbiAgICAgIHNjb3BlID0gJyc7XG4gICAgfVxuXG4gICAgZWFjaFVuYmluZCh7XG4gICAgICBrZXk6IGtleXNJbmZvLFxuICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICBzcGxpdEtleTogJysnXG4gICAgfSk7XG4gIH1cbn0gLy8g6Kej6Zmk57uR5a6a5p+Q5Liq6IyD5Zu055qE5b+r5o236ZSuXG5cblxudmFyIGVhY2hVbmJpbmQgPSBmdW5jdGlvbiBlYWNoVW5iaW5kKF9yZWYpIHtcbiAgdmFyIGtleSA9IF9yZWYua2V5LFxuICAgICAgc2NvcGUgPSBfcmVmLnNjb3BlLFxuICAgICAgbWV0aG9kID0gX3JlZi5tZXRob2QsXG4gICAgICBfcmVmJHNwbGl0S2V5ID0gX3JlZi5zcGxpdEtleSxcbiAgICAgIHNwbGl0S2V5ID0gX3JlZiRzcGxpdEtleSA9PT0gdm9pZCAwID8gJysnIDogX3JlZiRzcGxpdEtleTtcbiAgdmFyIG11bHRpcGxlS2V5cyA9IGdldEtleXMoa2V5KTtcbiAgbXVsdGlwbGVLZXlzLmZvckVhY2goZnVuY3Rpb24gKG9yaWdpbktleSkge1xuICAgIHZhciB1bmJpbmRLZXlzID0gb3JpZ2luS2V5LnNwbGl0KHNwbGl0S2V5KTtcbiAgICB2YXIgbGVuID0gdW5iaW5kS2V5cy5sZW5ndGg7XG4gICAgdmFyIGxhc3RLZXkgPSB1bmJpbmRLZXlzW2xlbiAtIDFdO1xuICAgIHZhciBrZXlDb2RlID0gbGFzdEtleSA9PT0gJyonID8gJyonIDogY29kZShsYXN0S2V5KTtcbiAgICBpZiAoIV9oYW5kbGVyc1trZXlDb2RlXSkgcmV0dXJuOyAvLyDliKTmlq3mmK/lkKbkvKDlhaXojIPlm7TvvIzmsqHmnInlsLHojrflj5bojIPlm7RcblxuICAgIGlmICghc2NvcGUpIHNjb3BlID0gZ2V0U2NvcGUoKTtcbiAgICB2YXIgbW9kcyA9IGxlbiA+IDEgPyBnZXRNb2RzKF9tb2RpZmllciwgdW5iaW5kS2V5cykgOiBbXTtcbiAgICBfaGFuZGxlcnNba2V5Q29kZV0gPSBfaGFuZGxlcnNba2V5Q29kZV0uZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgIC8vIOmAmui/h+WHveaVsOWIpOaWre+8jOaYr+WQpuino+mZpOe7keWumu+8jOWHveaVsOebuOetieebtOaOpei/lOWbnlxuICAgICAgdmFyIGlzTWF0Y2hpbmdNZXRob2QgPSBtZXRob2QgPyByZWNvcmQubWV0aG9kID09PSBtZXRob2QgOiB0cnVlO1xuICAgICAgcmV0dXJuICEoaXNNYXRjaGluZ01ldGhvZCAmJiByZWNvcmQuc2NvcGUgPT09IHNjb3BlICYmIGNvbXBhcmVBcnJheShyZWNvcmQubW9kcywgbW9kcykpO1xuICAgIH0pO1xuICB9KTtcbn07IC8vIOWvueebkeWQrOWvueW6lOW/q+aNt+mUrueahOWbnuiwg+WHveaVsOi/m+ihjOWkhOeQhlxuXG5cbmZ1bmN0aW9uIGV2ZW50SGFuZGxlcihldmVudCwgaGFuZGxlciwgc2NvcGUsIGVsZW1lbnQpIHtcbiAgaWYgKGhhbmRsZXIuZWxlbWVudCAhPT0gZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RpZmllcnNNYXRjaDsgLy8g55yL5a6D5piv5ZCm5Zyo5b2T5YmN6IyD5Zu0XG5cbiAgaWYgKGhhbmRsZXIuc2NvcGUgPT09IHNjb3BlIHx8IGhhbmRsZXIuc2NvcGUgPT09ICdhbGwnKSB7XG4gICAgLy8g5qOA5p+l5piv5ZCm5Yy56YWN5L+u6aWw56ym77yI5aaC5p6c5pyJ6L+U5ZuedHJ1Ze+8iVxuICAgIG1vZGlmaWVyc01hdGNoID0gaGFuZGxlci5tb2RzLmxlbmd0aCA+IDA7XG5cbiAgICBmb3IgKHZhciB5IGluIF9tb2RzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9tb2RzLCB5KSkge1xuICAgICAgICBpZiAoIV9tb2RzW3ldICYmIGhhbmRsZXIubW9kcy5pbmRleE9mKCt5KSA+IC0xIHx8IF9tb2RzW3ldICYmIGhhbmRsZXIubW9kcy5pbmRleE9mKCt5KSA9PT0gLTEpIHtcbiAgICAgICAgICBtb2RpZmllcnNNYXRjaCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyDosIPnlKjlpITnkIbnqIvluo/vvIzlpoLmnpzmmK/kv67ppbDplK7kuI3lgZrlpITnkIZcblxuXG4gICAgaWYgKGhhbmRsZXIubW9kcy5sZW5ndGggPT09IDAgJiYgIV9tb2RzWzE2XSAmJiAhX21vZHNbMThdICYmICFfbW9kc1sxN10gJiYgIV9tb2RzWzkxXSB8fCBtb2RpZmllcnNNYXRjaCB8fCBoYW5kbGVyLnNob3J0Y3V0ID09PSAnKicpIHtcbiAgICAgIGlmIChoYW5kbGVyLm1ldGhvZChldmVudCwgaGFuZGxlcikgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtlbHNlIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoZXZlbnQuY2FuY2VsQnViYmxlKSBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSAvLyDlpITnkIZrZXlkb3du5LqL5Lu2XG5cblxuZnVuY3Rpb24gZGlzcGF0Y2goZXZlbnQsIGVsZW1lbnQpIHtcbiAgdmFyIGFzdGVyaXNrID0gX2hhbmRsZXJzWycqJ107XG4gIHZhciBrZXkgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlOyAvLyDooajljZXmjqfku7bov4fmu6Qg6buY6K6k6KGo5Y2V5o6n5Lu25LiN6Kem5Y+R5b+r5o236ZSuXG5cbiAgaWYgKCFob3RrZXlzLmZpbHRlci5jYWxsKHRoaXMsIGV2ZW50KSkgcmV0dXJuOyAvLyBHZWNrbyhGaXJlZm94KeeahGNvbW1hbmTplK7lgLwyMjTvvIzlnKhXZWJraXQoQ2hyb21lKeS4reS/neaMgeS4gOiHtFxuICAvLyBXZWJraXTlt6blj7MgY29tbWFuZCDplK7lgLzkuI3kuIDmoLdcblxuICBpZiAoa2V5ID09PSA5MyB8fCBrZXkgPT09IDIyNCkga2V5ID0gOTE7XG4gIC8qKlxuICAgKiBDb2xsZWN0IGJvdW5kIGtleXNcbiAgICogSWYgYW4gSW5wdXQgTWV0aG9kIEVkaXRvciBpcyBwcm9jZXNzaW5nIGtleSBpbnB1dCBhbmQgdGhlIGV2ZW50IGlzIGtleWRvd24sIHJldHVybiAyMjkuXG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI1MDQzOTM0L2lzLWl0LW9rLXRvLWlnbm9yZS1rZXlkb3duLWV2ZW50cy13aXRoLWtleWNvZGUtMjI5XG4gICAqIGh0dHA6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1kb20vMjAxMEp1bFNlcC9hdHQtMDE4Mi9rZXlDb2RlLXNwZWMuaHRtbFxuICAgKi9cblxuICBpZiAoX2Rvd25LZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEgJiYga2V5ICE9PSAyMjkpIF9kb3duS2V5cy5wdXNoKGtleSk7XG4gIC8qKlxuICAgKiBKZXN0IHRlc3QgY2FzZXMgYXJlIHJlcXVpcmVkLlxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAqL1xuXG4gIFsnY3RybEtleScsICdhbHRLZXknLCAnc2hpZnRLZXknLCAnbWV0YUtleSddLmZvckVhY2goZnVuY3Rpb24gKGtleU5hbWUpIHtcbiAgICB2YXIga2V5TnVtID0gbW9kaWZpZXJNYXBba2V5TmFtZV07XG5cbiAgICBpZiAoZXZlbnRba2V5TmFtZV0gJiYgX2Rvd25LZXlzLmluZGV4T2Yoa2V5TnVtKSA9PT0gLTEpIHtcbiAgICAgIF9kb3duS2V5cy5wdXNoKGtleU51bSk7XG4gICAgfSBlbHNlIGlmICghZXZlbnRba2V5TmFtZV0gJiYgX2Rvd25LZXlzLmluZGV4T2Yoa2V5TnVtKSA+IC0xKSB7XG4gICAgICBfZG93bktleXMuc3BsaWNlKF9kb3duS2V5cy5pbmRleE9mKGtleU51bSksIDEpO1xuICAgIH0gZWxzZSBpZiAoa2V5TmFtZSA9PT0gJ21ldGFLZXknICYmIGV2ZW50W2tleU5hbWVdICYmIF9kb3duS2V5cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIC8qKlxuICAgICAgICogRml4IGlmIENvbW1hbmQgaXMgcHJlc3NlZDpcbiAgICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAqL1xuICAgICAgaWYgKCEoZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkpKSB7XG4gICAgICAgIF9kb3duS2V5cyA9IF9kb3duS2V5cy5zbGljZShfZG93bktleXMuaW5kZXhPZihrZXlOdW0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBpZiAoa2V5IGluIF9tb2RzKSB7XG4gICAgX21vZHNba2V5XSA9IHRydWU7IC8vIOWwhueJueauiuWtl+espueahGtleeazqOWGjOWIsCBob3RrZXlzIOS4ilxuXG4gICAgZm9yICh2YXIgayBpbiBfbW9kaWZpZXIpIHtcbiAgICAgIGlmIChfbW9kaWZpZXJba10gPT09IGtleSkgaG90a2V5c1trXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFhc3RlcmlzaykgcmV0dXJuO1xuICB9IC8vIOWwhiBtb2RpZmllck1hcCDph4zpnaLnmoTkv67ppbDplK7nu5HlrprliLAgZXZlbnQg5LitXG5cblxuICBmb3IgKHZhciBlIGluIF9tb2RzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfbW9kcywgZSkpIHtcbiAgICAgIF9tb2RzW2VdID0gZXZlbnRbbW9kaWZpZXJNYXBbZV1dO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2pheXdjamxvdmUvaG90a2V5cy9wdWxsLzEyOVxuICAgKiBUaGlzIHNvbHZlcyB0aGUgaXNzdWUgaW4gRmlyZWZveCBvbiBXaW5kb3dzIHdoZXJlIGhvdGtleXMgY29ycmVzcG9uZGluZyB0byBzcGVjaWFsIGNoYXJhY3RlcnMgd291bGQgbm90IHRyaWdnZXIuXG4gICAqIEFuIGV4YW1wbGUgb2YgdGhpcyBpcyBjdHJsK2FsdCttIG9uIGEgU3dlZGlzaCBrZXlib2FyZCB3aGljaCBpcyB1c2VkIHRvIHR5cGUgzrwuXG4gICAqIEJyb3dzZXIgc3VwcG9ydDogaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1rZXlib2FyZGV2ZW50LWdldG1vZGlmaWVyc3RhdGVcbiAgICovXG5cblxuICBpZiAoZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSAmJiAhKGV2ZW50LmFsdEtleSAmJiAhZXZlbnQuY3RybEtleSkgJiYgZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSgnQWx0R3JhcGgnKSkge1xuICAgIGlmIChfZG93bktleXMuaW5kZXhPZigxNykgPT09IC0xKSB7XG4gICAgICBfZG93bktleXMucHVzaCgxNyk7XG4gICAgfVxuXG4gICAgaWYgKF9kb3duS2V5cy5pbmRleE9mKDE4KSA9PT0gLTEpIHtcbiAgICAgIF9kb3duS2V5cy5wdXNoKDE4KTtcbiAgICB9XG5cbiAgICBfbW9kc1sxN10gPSB0cnVlO1xuICAgIF9tb2RzWzE4XSA9IHRydWU7XG4gIH0gLy8g6I635Y+W6IyD5Zu0IOm7mOiupOS4uiBgYWxsYFxuXG5cbiAgdmFyIHNjb3BlID0gZ2V0U2NvcGUoKTsgLy8g5a+55Lu75L2V5b+r5o236ZSu6YO96ZyA6KaB5YGa55qE5aSE55CGXG5cbiAgaWYgKGFzdGVyaXNrKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhc3Rlcmlzay5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFzdGVyaXNrW2ldLnNjb3BlID09PSBzY29wZSAmJiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nICYmIGFzdGVyaXNrW2ldLmtleWRvd24gfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBhc3Rlcmlza1tpXS5rZXl1cCkpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50LCBhc3Rlcmlza1tpXSwgc2NvcGUsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBrZXkg5LiN5ZyoIF9oYW5kbGVycyDkuK3ov5Tlm55cblxuXG4gIGlmICghKGtleSBpbiBfaGFuZGxlcnMpKSByZXR1cm47XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9oYW5kbGVyc1trZXldLmxlbmd0aDsgX2krKykge1xuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgJiYgX2hhbmRsZXJzW2tleV1bX2ldLmtleWRvd24gfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBfaGFuZGxlcnNba2V5XVtfaV0ua2V5dXApIHtcbiAgICAgIGlmIChfaGFuZGxlcnNba2V5XVtfaV0ua2V5KSB7XG4gICAgICAgIHZhciByZWNvcmQgPSBfaGFuZGxlcnNba2V5XVtfaV07XG4gICAgICAgIHZhciBzcGxpdEtleSA9IHJlY29yZC5zcGxpdEtleTtcbiAgICAgICAgdmFyIGtleVNob3J0Y3V0ID0gcmVjb3JkLmtleS5zcGxpdChzcGxpdEtleSk7XG4gICAgICAgIHZhciBfZG93bktleXNDdXJyZW50ID0gW107IC8vIOiusOW9leW9k+WJjeaMiemUrumUruWAvFxuXG4gICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwga2V5U2hvcnRjdXQubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICBfZG93bktleXNDdXJyZW50LnB1c2goY29kZShrZXlTaG9ydGN1dFthXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9kb3duS2V5c0N1cnJlbnQuc29ydCgpLmpvaW4oJycpID09PSBfZG93bktleXMuc29ydCgpLmpvaW4oJycpKSB7XG4gICAgICAgICAgLy8g5om+5Yiw5aSE55CG5YaF5a65XG4gICAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50LCByZWNvcmQsIHNjb3BlLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSAvLyDliKTmlq0gZWxlbWVudCDmmK/lkKblt7Lnu4/nu5Hlrprkuovku7ZcblxuXG5mdW5jdGlvbiBpc0VsZW1lbnRCaW5kKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnRIYXNCaW5kRXZlbnQuaW5kZXhPZihlbGVtZW50KSA+IC0xO1xufVxuXG5mdW5jdGlvbiBob3RrZXlzKGtleSwgb3B0aW9uLCBtZXRob2QpIHtcbiAgX2Rvd25LZXlzID0gW107XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhrZXkpOyAvLyDpnIDopoHlpITnkIbnmoTlv6vmjbfplK7liJfooahcblxuICB2YXIgbW9kcyA9IFtdO1xuICB2YXIgc2NvcGUgPSAnYWxsJzsgLy8gc2NvcGXpu5jorqTkuLphbGzvvIzmiYDmnInojIPlm7Tpg73mnInmlYhcblxuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50OyAvLyDlv6vmjbfplK7kuovku7bnu5HlrproioLngrlcblxuICB2YXIgaSA9IDA7XG4gIHZhciBrZXl1cCA9IGZhbHNlO1xuICB2YXIga2V5ZG93biA9IHRydWU7XG4gIHZhciBzcGxpdEtleSA9ICcrJztcbiAgdmFyIGNhcHR1cmUgPSBmYWxzZTsgLy8g5a+55Li66K6+5a6a6IyD5Zu055qE5Yik5patXG5cbiAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBtZXRob2QgPSBvcHRpb247XG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9wdGlvbikgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgaWYgKG9wdGlvbi5zY29wZSkgc2NvcGUgPSBvcHRpb24uc2NvcGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChvcHRpb24uZWxlbWVudCkgZWxlbWVudCA9IG9wdGlvbi5lbGVtZW50OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAob3B0aW9uLmtleXVwKSBrZXl1cCA9IG9wdGlvbi5rZXl1cDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKG9wdGlvbi5rZXlkb3duICE9PSB1bmRlZmluZWQpIGtleWRvd24gPSBvcHRpb24ua2V5ZG93bjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKG9wdGlvbi5jYXB0dXJlICE9PSB1bmRlZmluZWQpIGNhcHR1cmUgPSBvcHRpb24uY2FwdHVyZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb24uc3BsaXRLZXkgPT09ICdzdHJpbmcnKSBzcGxpdEtleSA9IG9wdGlvbi5zcGxpdEtleTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSBzY29wZSA9IG9wdGlvbjsgLy8g5a+55LqO5q+P5Liq5b+r5o236ZSu6L+b6KGM5aSE55CGXG5cbiAgZm9yICg7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXS5zcGxpdChzcGxpdEtleSk7IC8vIOaMiemUruWIl+ihqFxuXG4gICAgbW9kcyA9IFtdOyAvLyDlpoLmnpzmmK/nu4TlkIjlv6vmjbfplK7lj5blvpfnu4TlkIjlv6vmjbfplK5cblxuICAgIGlmIChrZXkubGVuZ3RoID4gMSkgbW9kcyA9IGdldE1vZHMoX21vZGlmaWVyLCBrZXkpOyAvLyDlsIbpnZ7kv67ppbDplK7ovazljJbkuLrplK7noIFcblxuICAgIGtleSA9IGtleVtrZXkubGVuZ3RoIC0gMV07XG4gICAga2V5ID0ga2V5ID09PSAnKicgPyAnKicgOiBjb2RlKGtleSk7IC8vICrooajnpLrljLnphY3miYDmnInlv6vmjbfplK5cbiAgICAvLyDliKTmlq1rZXnmmK/lkKblnKhfaGFuZGxlcnPkuK3vvIzkuI3lnKjlsLHotYvkuIDkuKrnqbrmlbDnu4RcblxuICAgIGlmICghKGtleSBpbiBfaGFuZGxlcnMpKSBfaGFuZGxlcnNba2V5XSA9IFtdO1xuXG4gICAgX2hhbmRsZXJzW2tleV0ucHVzaCh7XG4gICAgICBrZXl1cDoga2V5dXAsXG4gICAgICBrZXlkb3duOiBrZXlkb3duLFxuICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgbW9kczogbW9kcyxcbiAgICAgIHNob3J0Y3V0OiBrZXlzW2ldLFxuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICBrZXk6IGtleXNbaV0sXG4gICAgICBzcGxpdEtleTogc3BsaXRLZXksXG4gICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgfSk7XG4gIH0gLy8g5Zyo5YWo5bGAZG9jdW1lbnTkuIrorr7nva7lv6vmjbfplK5cblxuXG4gIGlmICh0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgIWlzRWxlbWVudEJpbmQoZWxlbWVudCkgJiYgd2luZG93KSB7XG4gICAgZWxlbWVudEhhc0JpbmRFdmVudC5wdXNoKGVsZW1lbnQpO1xuICAgIGFkZEV2ZW50KGVsZW1lbnQsICdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRpc3BhdGNoKGUsIGVsZW1lbnQpO1xuICAgIH0sIGNhcHR1cmUpO1xuXG4gICAgaWYgKCF3aW5MaXN0ZW5kRm9jdXMpIHtcbiAgICAgIHdpbkxpc3RlbmRGb2N1cyA9IHRydWU7XG4gICAgICBhZGRFdmVudCh3aW5kb3csICdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2Rvd25LZXlzID0gW107XG4gICAgICB9LCBjYXB0dXJlKTtcbiAgICB9XG5cbiAgICBhZGRFdmVudChlbGVtZW50LCAna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZGlzcGF0Y2goZSwgZWxlbWVudCk7XG4gICAgICBjbGVhck1vZGlmaWVyKGUpO1xuICAgIH0sIGNhcHR1cmUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoc2hvcnRjdXQpIHtcbiAgdmFyIHNjb3BlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnYWxsJztcbiAgT2JqZWN0LmtleXMoX2hhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZGF0YUxpc3QgPSBfaGFuZGxlcnNba2V5XS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnNjb3BlID09PSBzY29wZSAmJiBpdGVtLnNob3J0Y3V0ID09PSBzaG9ydGN1dDtcbiAgICB9KTtcblxuICAgIGRhdGFMaXN0LmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhICYmIGRhdGEubWV0aG9kKSB7XG4gICAgICAgIGRhdGEubWV0aG9kKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgX2FwaSA9IHtcbiAgZ2V0UHJlc3NlZEtleVN0cmluZzogZ2V0UHJlc3NlZEtleVN0cmluZyxcbiAgc2V0U2NvcGU6IHNldFNjb3BlLFxuICBnZXRTY29wZTogZ2V0U2NvcGUsXG4gIGRlbGV0ZVNjb3BlOiBkZWxldGVTY29wZSxcbiAgZ2V0UHJlc3NlZEtleUNvZGVzOiBnZXRQcmVzc2VkS2V5Q29kZXMsXG4gIGlzUHJlc3NlZDogaXNQcmVzc2VkLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgdW5iaW5kOiB1bmJpbmQsXG4gIGtleU1hcDogX2tleU1hcCxcbiAgbW9kaWZpZXI6IF9tb2RpZmllcixcbiAgbW9kaWZpZXJNYXA6IG1vZGlmaWVyTWFwXG59O1xuXG5mb3IgKHZhciBhIGluIF9hcGkpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfYXBpLCBhKSkge1xuICAgIGhvdGtleXNbYV0gPSBfYXBpW2FdO1xuICB9XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB2YXIgX2hvdGtleXMgPSB3aW5kb3cuaG90a2V5cztcblxuICBob3RrZXlzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoZGVlcCkge1xuICAgIGlmIChkZWVwICYmIHdpbmRvdy5ob3RrZXlzID09PSBob3RrZXlzKSB7XG4gICAgICB3aW5kb3cuaG90a2V5cyA9IF9ob3RrZXlzO1xuICAgIH1cblxuICAgIHJldHVybiBob3RrZXlzO1xuICB9O1xuXG4gIHdpbmRvdy5ob3RrZXlzID0gaG90a2V5cztcbn1cblxuZXhwb3J0IHsgaG90a2V5cyBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBUWVBFUyB9IGZyb20gJ0AvY29uZmlnJztcbmltcG9ydCB7IENvbW1hbmQsIElFdmVudEJ1cywgSVNob3J0Y3V0IH0gZnJvbSAnQC90eXBlcyc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICdAL3V0aWwnO1xuaW1wb3J0IGhvdGtleXMgZnJvbSAnaG90a2V5cy1qcyc7XG5pbXBvcnQgeyBpbmplY3QsIGluamVjdGFibGUgfSBmcm9tICdpbnZlcnNpZnknO1xuXG5ob3RrZXlzLmZpbHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTaG9ydGN1dCBpbXBsZW1lbnRzIElTaG9ydGN1dCB7XG4gICAgcHJpdmF0ZSBldmVudEJ1czogSUV2ZW50QnVzO1xuXG4gICAgcHJpdmF0ZSBvcHRpb24gPSB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihAaW5qZWN0KFRZUEVTLkV2ZW50QnVzKSBldmVudEJ1czogSUV2ZW50QnVzKSB7XG4gICAgICAgIGxvZygnSW5pdGlhbGl6ZSBzaG9ydGN1dCBzdWJzeXN0ZW0nKTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cyA9IGV2ZW50QnVzO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlcktleWJvYXJkRXZlbnQoc2hvcnRjdXQ6IHN0cmluZywgY2FsbGJhY2s6IChlOiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkKSB7XG4gICAgICAgIGhvdGtleXMoc2hvcnRjdXQsIHRoaXMub3B0aW9uLCBjYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMub24oc2hvcnRjdXQudG9TdHJpbmcoKSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHB1YmxpYyB1bnJlZ2lzdGVyS2V5Ym9hcmRFdmVudChzaG9ydGN1dDogc3RyaW5nKSB7XG4gICAgICAgIGhvdGtleXMudW5iaW5kKHNob3J0Y3V0KTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5vZmYoc2hvcnRjdXQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyS2V5Ym9hcmRFdmVudEZyb21QbHVnaW4oY29tbWFuZDogQ29tbWFuZCkge1xuICAgICAgICBpZiAoY29tbWFuZC5zaG9ydGN1dCAmJiBjb21tYW5kLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5Ym9hcmRFdmVudChjb21tYW5kLnNob3J0Y3V0LCBjb21tYW5kLmNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB1bnJlZ2lzdGVyS2V5Ym9hcmRFdmVudEZyb21QbHVnaW4oY29tbWFuZDogQ29tbWFuZCkge1xuICAgICAgICBpZiAoY29tbWFuZC5zaG9ydGN1dCAmJiBjb21tYW5kLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJLZXlib2FyZEV2ZW50KGNvbW1hbmQuc2hvcnRjdXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaW5qZWN0YWJsZSB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBJU2V0dGluZ01hbmFnZXIsIFNldHRpbmdSZW5kZXIgfSBmcm9tICcuLi90eXBlcyc7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXR0aW5nTWFuYWdlciBpbXBsZW1lbnRzIElTZXR0aW5nTWFuYWdlciB7XG4gICAgc2V0dGluZ1JlbmRlcnM6IE1hcDxzdHJpbmcsIFNldHRpbmdSZW5kZXI+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdSZW5kZXJzID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyU2V0dGluZyhwbHVnaW5LZXk6IHN0cmluZywgc2V0dGluZ1JlbmRlcjogU2V0dGluZ1JlbmRlcikge1xuICAgICAgICB0aGlzLnNldHRpbmdSZW5kZXJzLnNldChwbHVnaW5LZXksIHNldHRpbmdSZW5kZXIpO1xuICAgIH1cblxuICAgIHVucmVnaXN0ZXJTZXR0aW5nKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ1JlbmRlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgZ2V0U2V0dGluZ1JlbmRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8eyBrZXk6IHN0cmluZzsgdmFsdWU6IFNldHRpbmdSZW5kZXIgfT4gPSBbXTtcbiAgICAgICAgdGhpcy5zZXR0aW5nUmVuZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IGtleSwgdmFsdWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTdG9yYWdlTWFuYWdlciB9IGZyb20gJy4vY29yZS9zdG9yYWdlLW1hbmFnZXInO1xuaW1wb3J0IHsgUGx1Z2luU3lzdGVtIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB7IFRZUEVTIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgU3lzdGVtTWFuYWdlciB9IGZyb20gJy4vY29yZS9zeXN0ZW0tbWFuYWdlcic7XG5pbXBvcnQgeyBQbHVnaW5Mb2FkZXIgfSBmcm9tICcuL2NvcmUvbG9hZGVyJztcbmltcG9ydCB7IFBsdWdpbkZpbGVNYW5hZ2VyIH0gZnJvbSAnLi9jb3JlL3BsdWdpbi1maWxlLW1hbmFnZXInO1xuaW1wb3J0IHtcbiAgICBJU3RvcmFnZU1hbmFnZXIsXG4gICAgSVN5c3RlbU1hbmFnZXIsXG4gICAgSVBsdWdpblN5c3RlbSxcbiAgICBJUGx1Z2luTG9hZGVyLFxuICAgIElQbHVnaW5GaWxlTWFuYWdlcixcbiAgICBJRXZlbnRCdXMsXG4gICAgSVNob3J0Y3V0LFxuICAgIElDb21tYW5kTWFuYWdlcixcbiAgICBJU3RvcmUsXG4gICAgSVNldHRpbmdNYW5hZ2VyLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSAnLi9jb3JlL2V2ZW50LWJ1cyc7XG5pbXBvcnQgeyBDb21tYW5kTWFuYWdlciB9IGZyb20gJy4vY29yZS9jb21tYW5kLW1hbmFnZXInO1xuaW1wb3J0IHsgU2hvcnRjdXQgfSBmcm9tICcuL2NvcmUvc2hvcnRjdXQnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuL2NvcmUvc3RvcmUnO1xuaW1wb3J0IHsgU2V0dGluZ01hbmFnZXIgfSBmcm9tICcuL2NvcmUvc2V0dGluZy1tYW5hZ2VyJztcblxuY29uc3QgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcigpO1xuY29udGFpbmVyLmJpbmQ8SVN0b3JhZ2VNYW5hZ2VyPihUWVBFUy5TdG9yYWdlTWFuYWdlcikudG8oU3RvcmFnZU1hbmFnZXIpLmluU2luZ2xldG9uU2NvcGUoKTtcbmNvbnRhaW5lci5iaW5kPElTeXN0ZW1NYW5hZ2VyPihUWVBFUy5TeXN0ZW1NYW5hZ2VyKS50byhTeXN0ZW1NYW5hZ2VyKS5pblNpbmdsZXRvblNjb3BlKCk7XG5jb250YWluZXIuYmluZDxJUGx1Z2luU3lzdGVtPihUWVBFUy5QbHVnaW5TeXN0ZW0pLnRvKFBsdWdpblN5c3RlbSkuaW5TaW5nbGV0b25TY29wZSgpO1xuY29udGFpbmVyLmJpbmQ8SVBsdWdpbkxvYWRlcj4oVFlQRVMuUGx1Z2luTG9hZGVyKS50byhQbHVnaW5Mb2FkZXIpLmluU2luZ2xldG9uU2NvcGUoKTtcbmNvbnRhaW5lci5iaW5kPElQbHVnaW5GaWxlTWFuYWdlcj4oVFlQRVMuUGx1Z2luRmlsZU1hbmFnZXIpLnRvKFBsdWdpbkZpbGVNYW5hZ2VyKS5pblNpbmdsZXRvblNjb3BlKCk7XG5jb250YWluZXIuYmluZDxJRXZlbnRCdXM+KFRZUEVTLkV2ZW50QnVzKS50byhFdmVudEJ1cyk7XG5jb250YWluZXIuYmluZDxJU2hvcnRjdXQ+KFRZUEVTLlNob3J0Y3V0KS50byhTaG9ydGN1dCkuaW5TaW5nbGV0b25TY29wZSgpO1xuY29udGFpbmVyLmJpbmQ8SUNvbW1hbmRNYW5hZ2VyPihUWVBFUy5Db21tYW5kTWFuYWdlcikudG8oQ29tbWFuZE1hbmFnZXIpLmluU2luZ2xldG9uU2NvcGUoKTtcbmNvbnRhaW5lci5iaW5kPElTdG9yZT4oVFlQRVMuU3RvcmUpLnRvKFN0b3JlKS5pblNpbmdsZXRvblNjb3BlKCk7XG5jb250YWluZXIuYmluZDxJU2V0dGluZ01hbmFnZXI+KFRZUEVTLlNldHRpbmdNYW5hZ2VyKS50byhTZXR0aW5nTWFuYWdlcikuaW5TaW5nbGV0b25TY29wZSgpO1xuXG5leHBvcnQgeyBjb250YWluZXIgfTtcbiIsImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5cbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHsgVFlQRVMgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBJUGx1Z2luU3lzdGVtIH0gZnJvbSAnLi90eXBlcyc7XG5cbmlmICghd2luZG93LnBsdWdpblN5c3RlbSkge1xuICAgIGxvZygnU2l5dWFuIFBsdWdpbiBTeXN0ZW0gbG9hZGluZy4uLicpO1xuICAgIHdpbmRvdy5wbHVnaW5TeXN0ZW1WZXJzaW9uID0gVkVSU0lPTjtcbiAgICB3aW5kb3cucGx1Z2luU3lzdGVtID0gY29udGFpbmVyLmdldDxJUGx1Z2luU3lzdGVtPihUWVBFUy5QbHVnaW5TeXN0ZW0pLmluaXQoKTtcbiAgICB3aW5kb3cucGx1Z2luU3lzdGVtSW9jQ29udGFpbmVyID0gY29udGFpbmVyO1xufVxuIl0sIm5hbWVzIjpbIlJlZmxlY3QiLCJmYWN0b3J5Iiwicm9vdCIsImdsb2JhbCIsInNlbGYiLCJ0aGlzIiwiRnVuY3Rpb24iLCJleHBvcnRlciIsIm1ha2VFeHBvcnRlciIsInRhcmdldCIsInByZXZpb3VzIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaGFzT3duIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJzdXBwb3J0c1N5bWJvbCIsIlN5bWJvbCIsInRvUHJpbWl0aXZlU3ltYm9sIiwidG9QcmltaXRpdmUiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwic3VwcG9ydHNDcmVhdGUiLCJjcmVhdGUiLCJzdXBwb3J0c1Byb3RvIiwiX19wcm90b19fIiwiQXJyYXkiLCJkb3duTGV2ZWwiLCJIYXNoTWFwIiwiTWFrZURpY3Rpb25hcnkiLCJoYXMiLCJtYXAiLCJjYWxsIiwiZ2V0IiwiZnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInVzZVBvbHlmaWxsIiwicHJvY2VzcyIsImVudiIsIl9NYXAiLCJNYXAiLCJlbnRyaWVzIiwiQ3JlYXRlTWFwUG9seWZpbGwiLCJfU2V0IiwiU2V0IiwiQ3JlYXRlU2V0UG9seWZpbGwiLCJNZXRhZGF0YSIsIldlYWtNYXAiLCJDcmVhdGVXZWFrTWFwUG9seWZpbGwiLCJkZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJJc1VuZGVmaW5lZCIsIklzQXJyYXkiLCJUeXBlRXJyb3IiLCJJc0NvbnN0cnVjdG9yIiwiRGVjb3JhdGVDb25zdHJ1Y3RvciIsIklzT2JqZWN0IiwiSXNOdWxsIiwiRGVjb3JhdGVQcm9wZXJ0eSIsIlRvUHJvcGVydHlLZXkiLCJtZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlY29yYXRvciIsIklzUHJvcGVydHlLZXkiLCJPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIk9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIk9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIk9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YSIsIk9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJnZXRNZXRhZGF0YUtleXMiLCJPcmRpbmFyeU1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhS2V5cyIsIk9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZGVsZXRlTWV0YWRhdGEiLCJtZXRhZGF0YU1hcCIsIkdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJkZWxldGUiLCJzaXplIiwidGFyZ2V0TWV0YWRhdGEiLCJpIiwibGVuZ3RoIiwiZGVjb3JhdGVkIiwiZGVzY3JpcHRvciIsIk8iLCJQIiwiQ3JlYXRlIiwic2V0IiwiTWV0YWRhdGFLZXkiLCJwYXJlbnQiLCJPcmRpbmFyeUdldFByb3RvdHlwZU9mIiwiVG9Cb29sZWFuIiwiTWV0YWRhdGFWYWx1ZSIsIm93bktleXMiLCJwYXJlbnRLZXlzIiwia2V5cyIsIl9pIiwib3duS2V5c18xIiwiYWRkIiwicHVzaCIsIl9hIiwicGFyZW50S2V5c18xIiwiR2V0SXRlcmF0b3IiLCJrIiwibmV4dCIsIkl0ZXJhdG9yU3RlcCIsIm5leHRWYWx1ZSIsIkl0ZXJhdG9yVmFsdWUiLCJlIiwiSXRlcmF0b3JDbG9zZSIsIlR5cGUiLCJ4IiwiSXNTeW1ib2wiLCJUb1ByaW1pdGl2ZSIsImlucHV0IiwiUHJlZmVycmVkVHlwZSIsImhpbnQiLCJleG90aWNUb1ByaW0iLCJHZXRNZXRob2QiLCJyZXN1bHQiLCJPcmRpbmFyeVRvUHJpbWl0aXZlIiwidG9TdHJpbmdfMSIsInRvU3RyaW5nIiwiSXNDYWxsYWJsZSIsInZhbHVlT2YiLCJ0b1N0cmluZ18yIiwiYXJndW1lbnQiLCJUb1N0cmluZyIsImlzQXJyYXkiLCJWIiwiZnVuYyIsIm9iaiIsIm1ldGhvZCIsIml0ZXJSZXN1bHQiLCJkb25lIiwiZiIsInByb3RvIiwicHJvdG90eXBlUHJvdG8iLCJjb25zdHJ1Y3RvciIsImNhY2hlU2VudGluZWwiLCJhcnJheVNlbnRpbmVsIiwiTWFwSXRlcmF0b3IiLCJ2YWx1ZXMiLCJzZWxlY3RvciIsIl9pbmRleCIsIl9rZXlzIiwiX3ZhbHVlcyIsIl9zZWxlY3RvciIsImluZGV4IiwidGhyb3ciLCJlcnJvciIsInJldHVybiIsIl9jYWNoZUtleSIsIl9jYWNoZUluZGV4IiwiZW51bWVyYWJsZSIsIl9maW5kIiwiY2xlYXIiLCJnZXRLZXkiLCJnZXRWYWx1ZSIsImdldEVudHJ5IiwiaW5zZXJ0IiwiaW5kZXhPZiIsIl8iLCJfbWFwIiwiVVVJRF9TSVpFIiwicm9vdEtleSIsIkNyZWF0ZVVuaXF1ZUtleSIsIl9rZXkiLCJ0YWJsZSIsIkdldE9yQ3JlYXRlV2Vha01hcFRhYmxlIiwiQ3JlYXRlVVVJRCIsIkZpbGxSYW5kb21CeXRlcyIsImJ1ZmZlciIsIk1hdGgiLCJyYW5kb20iLCJHZW5SYW5kb21CeXRlcyIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJtc0NyeXB0byIsImRhdGEiLCJvZmZzZXQiLCJieXRlIiwidG9Mb3dlckNhc2UiLCJfXyIsIlZFUlNJT04iLCJWRVJTSU9OX1VSTCIsIlNDUklQVF9VUkwiLCJQTFVHSU5fU1lTX0FCU19QQVRIIiwiY29uZmlnIiwidG9rZW4iLCJ3aW5kb3ciLCJzaXl1YW4iLCJhcGkiLCJUWVBFUyIsIlN0b3JhZ2VNYW5hZ2VyIiwiUGx1Z2luU3lzdGVtIiwiU3lzdGVtTWFuYWdlciIsIlBsdWdpbkxvYWRlciIsIlBsdWdpbkZpbGVNYW5hZ2VyIiwiRXZlbnRCdXMiLCJTaG9ydGN1dCIsIkNvbW1hbmRNYW5hZ2VyIiwiU3RvcmUiLCJTZXR0aW5nTWFuYWdlciIsInJlcXVlc3QiLCJ1cmwiLCJyZXNEYXRhIiwiZmV0Y2giLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImFzeW5jIiwicGFyc2VCb2R5IiwiciIsImNvZGUiLCJ0cmFuc2FjdGlvbnMiLCJwcm90eWxlIiwid3NfdXJsIiwiVVJMIiwid3MiLCJhcHAiLCJzZWFyY2hQYXJhbXMiLCJzZXNzaW9uIiwic3FsIiwic3RtdCIsImxzTm90ZWJvb2tzIiwiZ2V0QW5jaG9yIiwiYW5jaG9yVGV4dCIsIm5hbWUiLCJzcWxTY3JpcHQiLCJyZXBsYWNlIiwic3FsUmVzIiwiYW5jaG9yIiwib3Blbk5vdGVib29rIiwibm90ZWJvb2tJZCIsIm5vdGVib29rIiwiY2xvc2VOb3RlYm9vayIsInJlbmFtZU5vdGVib29rIiwibm90ZWJvb2tOZXdOYW1lIiwiY3JlYXRlTm90ZWJvb2siLCJub3RlYm9va05hbWUiLCJyZW1vdmVOb3RlYm9vayIsImdldE5vdGVib29rQ29uZiIsInNldE5vdGVib29rQ29uZiIsInJlbmFtZURvYyIsInBhdGgiLCJ0aXRsZSIsInJlbW92ZURvYyIsIm1vdmVEb2MiLCJzcmNOb3RlYm9va0lkIiwic3JjUGF0aCIsInRhcmdldE5vdGVib29rSWQiLCJ0YXJnZXRQYXRoIiwiZnJvbU5vdGVib29rIiwiZnJvbVBhdGgiLCJ0b05vdGVib29rIiwidG9QYXRoIiwiZ2V0SFBhdGhCeVBhdGgiLCJOb3RlYm9vayIsIlBhdGgiLCJnZXRIUGF0aEJ5SUQiLCJJRCIsImlkIiwiZ2V0QmxvY2tBdHRycyIsImJsb2NrSWQiLCJnZXRCbG9ja0J5SUQiLCJnZXRCbG9ja0tyYW1kb3duIiwiZ2V0QmxvY2tCcmVhZGNydW1iIiwic2V0QmxvY2tBdHRycyIsImF0dHJzIiwiZXhwb3J0TWRDb250ZW50IiwiZG9jSWQiLCJnZXREb2NPdXRsaW5lIiwibGlzdERvY3NCeVBhdGgiLCJnZXRCYWNrbGluayIsImJlZm9yZUxlbiIsIm1rIiwic2VhcmNoRW1iZWRCbG9jayIsImV4Y2x1ZGVJZHMiLCJleGNsdWRlSURzIiwiZ2V0RG9jIiwibW9kZSIsImdldEZvY3VzZWREb2MiLCJnZXRUYWciLCJnZXRMb2NhbEdyYXBoIiwiY29uZiIsInJlcUlkIiwiZ2V0R3JhcGgiLCJzZWFyY2hEb2NzIiwic2VhcmNoQmxvY2siLCJxdWVyeSIsInNlYXJjaFRlbXBsYXRlIiwiY3JlYXRlRG9jV2l0aE1kIiwibWFya2Rvd24iLCJkb2NTYXZlQXNUZW1wbGF0ZSIsIm92ZXJ3cml0ZSIsInJlbmRlciIsImluc2VydEJsb2NrIiwicHJldmlvdXNJRCIsImRhdGFUeXBlIiwicHJlcGVuZEJsb2NrIiwicGFyZW50SUQiLCJhcHBlbmRCbG9jayIsInVwZGF0ZUJsb2NrIiwiZGVsZXRlQmxvY2siLCJtb3ZlQmxvY2siLCJnZXRTeXNGb250cyIsImdldEZpbGUiLCJ0eXBlIiwic3RhdHVzIiwidGV4dCIsInB1dEZpbGUiLCJmaWxlZGF0YSIsImlzRGlyIiwibW9kVGltZSIsIkRhdGUiLCJub3ciLCJibG9iIiwiQmxvYiIsImZpbGUiLCJGaWxlIiwic3BsaXQiLCJwb3AiLCJmb3JtZGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiU3RyaW5nIiwicmVhZERpciIsInJlbW92ZUZpbGUiLCJsYW5ndWFnZSIsInRoZW1lIiwibGFuZ3VhZ2VNb2RlIiwicHVzaE1zZyIsIm1lc3NhZ2UiLCJ0aW1lb3V0IiwibXNnIiwib3RoZXIiLCJwdXNoRXJyTXNnIiwic2V0U3RvcmFnZVZhbCIsInZhbCIsImdlblVVSUQiLCJnZXRMb2NhbFN0b3JhZ2UiLCJyZW5kZXJTcHJpZyIsInNwcmlnIiwidGVtcGxhdGUiLCJnZXRCYXp6YXJXaWRnZXQiLCJOb3RpZmljYXRpb24iLCJvcHRpb24iLCJzaG93Iiwic2VydmVyQXBpLnB1c2hFcnJNc2ciLCJzZXJ2ZXJBcGkucHVzaE1zZyIsInoiLCJEIiwidCIsImdsb2JhbFRoaXMiLCJiIiwiVyIsImV4cG9ydHMiLCJsIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsInAiLCJjIiwiYSIsInMiLCJiaW5kIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnIiwiY29uc29sZSIsImxvZyIsInRyYWNlIiwiRSIsIm8iLCJtZXRob2RGYWN0b3J5IiwiZGVidWciLCJGIiwidyIsInYiLCJ1IiwibiIsImxvY2FsU3RvcmFnZSIsImQiLCJkb2N1bWVudCIsImNvb2tpZSIsIm0iLCJlbmNvZGVVUklDb21wb25lbnQiLCJleGVjIiwic2xpY2UiLCJsZXZlbHMiLCJUUkFDRSIsIkRFQlVHIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIlNJTEVOVCIsImdldExldmVsIiwic2V0TGV2ZWwiLCJ0b1VwcGVyQ2FzZSIsIkMiLCJzZXREZWZhdWx0TGV2ZWwiLCJyZXNldExldmVsIiwicmVtb3ZlSXRlbSIsImVuYWJsZUFsbCIsImRpc2FibGVBbGwiLCJ5IiwiTCIsImgiLCJnZXRMb2dnZXIiLCJHIiwibm9Db25mbGljdCIsImdldExvZ2dlcnMiLCJkZWZhdWx0IiwiUiIsIkIiLCJwcmVmaXgiLCJsZXZlbEZvcm1hdHRlciIsIm5hbWVGb3JtYXR0ZXIiLCJ0aW1lc3RhbXBGb3JtYXR0ZXIiLCJ0b1RpbWVTdHJpbmciLCJmb3JtYXQiLCJyZWciLCJVIiwiQSIsInVuc2hpZnQiLCJ3YXJuIiwiVCIsIlMiLCJMT0dfTEVWRUxfREVCVUciLCJMT0dfTEVWRUxfSU5GTyIsIkxPR19MRVZFTF9XQVJOIiwiTE9HX0xFVkVMX0VSUk9SIiwiSyIsIkVycm9yIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzdGFjayIsIkkiLCJzdGF0aWMiLCJmaWx0ZXIiLCJnZXRFbnZPckRlZmF1bHQiLCJMT0dfTEVWRUxfS0VZIiwic3RyaW5nVG9FbnVtVmFsdWUiLCJnZXRFbnYiLCJMT0dfUFJFRklYX0tFWSIsIlkiLCJfJDEiLCJnZXRDYWxsU3RhY2siLCJnZXRGaWxlTmFtZSIsInN0YWNrU2l6ZSIsImdldExpbmVOdW1iZXIiLCJnZXRDb2x1bW5OdW1iZXIiLCJqb2luIiwidHJpbSIsImNvbnNvbGVMb2dnZXIiLCJnZXRFbnZMZXZlbCIsImdldEVudkxvZ2dlciIsInNldFN0YWNrU2l6ZSIsIlgiLCJsb2dnZXIiLCJOIiwic3VwZXIiLCJNIiwiY3VzdG9tTG9nRmFjdG9yeSIsImluc2VydEJlZm9yZSIsInBvc2l0aW9uRWwiLCJlbCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImluc2VydEFmdGVyIiwiYWRkVG9vbGJhckxlZnQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRUb29sYmFyUmlnaHQiLCJjcmVhdGVMb2dnZXIiLCJNZW51IiwibWVudSIsIl9iIiwibWVudXMiLCJyZW1vdmUiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYWRkSXRlbSIsIml0ZW0iLCJhZGRTZXBhcmF0b3IiLCJNZW51SXRlbSIsInNob3dBdE1vdXNlRXZlbnQiLCJldmVudCIsInBvcHVwIiwiY2xpZW50WCIsImNsaWVudFkiLCJzaG93QXRQb3NpdGlvbiIsInBvc2l0aW9uIiwiY2xvc2UiLCJvcHRpb25zIiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVkIiwiY2xhc3NMaXN0IiwiY3VycmVudCIsImNsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwiaHRtbCIsImxhYmVsIiwiaWNvbkhUTUwiLCJsYW5ndWFnZXMiLCJpbmNsdWRlcyIsImljb24iLCJhY3Rpb24iLCJpbm5lckhUTUwiLCJzdWJtZW51Iiwic3VibWVudUVsZW1lbnQiLCJmb3JFYWNoIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiTWVudVNlcGFyYXRvciIsIkRpYWxvZyIsImRpc2FibGVDbG9zZSIsImRpYWxvZ3MiLCJkZXN0cm95Q2FsbGJhY2siLCJ0cmFuc3BhcmVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkZXN0cm95IiwiZGlzYWJsZUFuaW1hdGlvbiIsInNldFRpbWVvdXQiLCJmaW5kIiwic3BsaWNlIiwiYmluZElucHV0IiwiaW5wdXRFbGVtZW50IiwiZW50ZXJFdmVudCIsImZvY3VzIiwiaXNDb21wb3NpbmciLCJQbHVnaW4iLCJvbmxvYWQiLCJvbnVubG9hZCIsInJlZ2lzdGVyQ29tbWFuZCIsImNvbW1hbmQiLCJyZWdpc3RlclNldHRpbmdSZW5kZXIiLCJzZXR0aW5nUmVuZGVyIiwiZmlsZW5hbWUiLCJjbGllbnRBcGkiLCJzZXJ2ZXJBcGkiLCJTRU1WRVJfU1BFQ19WRVJTSU9OIiwiTUFYX0xFTkdUSCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIIiwiY29uc3RhbnRzIiwiTk9ERV9ERUJVRyIsImFyZ3MiLCJkZWJ1Z18xIiwicmVxdWlyZSQkMCIsInJlcXVpcmUkJDEiLCJyZSIsIm1vZHVsZSIsInNyYyIsImNyZWF0ZVRva2VuIiwiaXNHbG9iYWwiLCJSZWdFeHAiLCJOVU1FUklDSURFTlRJRklFUiIsIk5VTUVSSUNJREVOVElGSUVSTE9PU0UiLCJOT05OVU1FUklDSURFTlRJRklFUiIsIlBSRVJFTEVBU0VJREVOVElGSUVSIiwiUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRSIsIkJVSUxESURFTlRJRklFUiIsIk1BSU5WRVJTSU9OIiwiUFJFUkVMRUFTRSIsIkJVSUxEIiwiRlVMTFBMQUlOIiwiTUFJTlZFUlNJT05MT09TRSIsIlBSRVJFTEVBU0VMT09TRSIsIkxPT1NFUExBSU4iLCJYUkFOR0VJREVOVElGSUVSIiwiWFJBTkdFSURFTlRJRklFUkxPT1NFIiwiR1RMVCIsIlhSQU5HRVBMQUlOIiwiWFJBTkdFUExBSU5MT09TRSIsIkNPRVJDRSIsIkxPTkVUSUxERSIsInRpbGRlVHJpbVJlcGxhY2UiLCJMT05FQ0FSRVQiLCJjYXJldFRyaW1SZXBsYWNlIiwiY29tcGFyYXRvclRyaW1SZXBsYWNlIiwib3B0cyIsInBhcnNlT3B0aW9ucyIsImxvb3NlIiwicmVkdWNlIiwicGFyc2VPcHRpb25zXzEiLCJudW1lcmljIiwiY29tcGFyZUlkZW50aWZpZXJzIiwiYW51bSIsImJudW0iLCJyY29tcGFyZUlkZW50aWZpZXJzIiwiaWRlbnRpZmllcnMiLCJyZXF1aXJlJCQyIiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJTZW1WZXIkZCIsIlNlbVZlciIsInZlcnNpb24iLCJpbmNsdWRlUHJlcmVsZWFzZSIsIm1hdGNoIiwiTE9PU0UiLCJGVUxMIiwicmF3IiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwicHJlcmVsZWFzZSIsIm51bSIsImJ1aWxkIiwiY29tcGFyZSIsImNvbXBhcmVNYWluIiwiY29tcGFyZVByZSIsImNvbXBhcmVCdWlsZCIsImluYyIsInJlbGVhc2UiLCJpZGVudGlmaWVyIiwiaXNOYU4iLCJzZW12ZXIiLCJwYXJzZSIsImVyIiwicGFyc2VfMSIsInZhbGlkIiwidmFsaWRfMSIsImNsZWFuIiwiY2xlYW5fMSIsImluY18xIiwiY29tcGFyZV8xIiwiZXEiLCJlcV8xIiwiZGlmZiIsInZlcnNpb24xIiwidmVyc2lvbjIiLCJ2MSIsInYyIiwiaGFzUHJlIiwiZGVmYXVsdFJlc3VsdCIsImRpZmZfMSIsIm1ham9yXzEiLCJtaW5vcl8xIiwicGF0Y2hfMSIsInBhcnNlZCIsInByZXJlbGVhc2VfMSIsInJjb21wYXJlIiwicmNvbXBhcmVfMSIsImNvbXBhcmVMb29zZSIsImNvbXBhcmVMb29zZV8xIiwidmVyc2lvbkEiLCJ2ZXJzaW9uQiIsImNvbXBhcmVCdWlsZF8xIiwic29ydCIsImxpc3QiLCJzb3J0XzEiLCJyc29ydCIsInJzb3J0XzEiLCJndCIsImd0XzEiLCJsdCIsImx0XzEiLCJuZXEiLCJuZXFfMSIsImd0ZSIsImd0ZV8xIiwibHRlIiwibHRlXzEiLCJyZXF1aXJlJCQ1IiwiY21wIiwib3AiLCJjbXBfMSIsImNvZXJjZSIsInJ0bCIsIkNPRVJDRVJUTCIsImxhc3RJbmRleCIsImNvZXJjZV8xIiwiWWFsbGlzdCIsIndhbGtlciIsImhlYWQiLCJ0YWlsIiwibm9kZSIsImluc2VydGVkIiwiTm9kZSIsInByZXYiLCJ5YWxsaXN0IiwicmVtb3ZlTm9kZSIsInVuc2hpZnROb2RlIiwicHVzaE5vZGUiLCJyZXMiLCJzaGlmdCIsImZuIiwidGhpc3AiLCJmb3JFYWNoUmV2ZXJzZSIsImdldFJldmVyc2UiLCJtYXBSZXZlcnNlIiwiaW5pdGlhbCIsImFjYyIsInJlZHVjZVJldmVyc2UiLCJ0b0FycmF5IiwiYXJyIiwidG9BcnJheVJldmVyc2UiLCJmcm9tIiwidG8iLCJyZXQiLCJzbGljZVJldmVyc2UiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwibm9kZXMiLCJyZXZlcnNlIiwiTUFYIiwiTEVOR1RIIiwiTEVOR1RIX0NBTENVTEFUT1IiLCJBTExPV19TVEFMRSIsIk1BWF9BR0UiLCJESVNQT1NFIiwiTk9fRElTUE9TRV9PTl9TRVQiLCJMUlVfTElTVCIsIkNBQ0hFIiwiVVBEQVRFX0FHRV9PTl9HRVQiLCJuYWl2ZUxlbmd0aCIsImRvVXNlIiwiaGl0IiwiaXNTdGFsZSIsImRlbCIsIm1heEFnZSIsIkVudHJ5IiwiZm9yRWFjaFN0ZXAiLCJscnVDYWNoZSIsIm1heCIsIkluZmluaXR5IiwibGMiLCJzdGFsZSIsImRpc3Bvc2UiLCJub0Rpc3Bvc2VPblNldCIsInVwZGF0ZUFnZU9uR2V0IiwicmVzZXQiLCJtTCIsImFsbG93U3RhbGUiLCJtQSIsImxlbmd0aENhbGN1bGF0b3IiLCJsQyIsIml0ZW1Db3VudCIsInJmb3JFYWNoIiwiZHVtcCIsImR1bXBMcnUiLCJsZW4iLCJwZWVrIiwibG9hZCIsImV4cGlyZXNBdCIsInBydW5lIiwiUmFuZ2UiLCJyYW5nZSIsIkNvbXBhcmF0b3IiLCJwYXJzZVJhbmdlIiwiZmlyc3QiLCJpc051bGxTZXQiLCJpc0FueSIsImNvbXBzIiwibWVtb0tleSIsImNhY2hlZCIsImNhY2hlIiwiaHIiLCJIWVBIRU5SQU5HRUxPT1NFIiwiSFlQSEVOUkFOR0UiLCJoeXBoZW5SZXBsYWNlIiwiQ09NUEFSQVRPUlRSSU0iLCJyYW5nZUxpc3QiLCJUSUxERVRSSU0iLCJDQVJFVFRSSU0iLCJjb21wIiwicGFyc2VDb21wYXJhdG9yIiwicmVwbGFjZUdURTAiLCJDT01QQVJBVE9STE9PU0UiLCJyYW5nZU1hcCIsImNvbXBhcmF0b3JzIiwiaW50ZXJzZWN0cyIsInNvbWUiLCJ0aGlzQ29tcGFyYXRvcnMiLCJpc1NhdGlzZmlhYmxlIiwicmFuZ2VDb21wYXJhdG9ycyIsImV2ZXJ5IiwidGhpc0NvbXBhcmF0b3IiLCJyYW5nZUNvbXBhcmF0b3IiLCJ0ZXN0U2V0IiwicmVtYWluaW5nQ29tcGFyYXRvcnMiLCJ0ZXN0Q29tcGFyYXRvciIsIm90aGVyQ29tcGFyYXRvciIsInJlcGxhY2VDYXJldHMiLCJyZXBsYWNlVGlsZGVzIiwicmVwbGFjZVhSYW5nZXMiLCJyZXBsYWNlU3RhcnMiLCJpc1giLCJyZXBsYWNlVGlsZGUiLCJUSUxERUxPT1NFIiwiVElMREUiLCJwciIsInJlcGxhY2VDYXJldCIsIkNBUkVUTE9PU0UiLCJDQVJFVCIsInJlcGxhY2VYUmFuZ2UiLCJYUkFOR0VMT09TRSIsIlhSQU5HRSIsImd0bHQiLCJ4TSIsInhtIiwieHAiLCJhbnlYIiwiU1RBUiIsIkdURTBQUkUiLCJHVEUwIiwiaW5jUHIiLCIkMCIsImZNIiwiZm0iLCJmcCIsImZwciIsImZiIiwidE0iLCJ0bSIsInRwIiwidHByIiwidGIiLCJBTlkiLCJhbGxvd2VkIiwib3BlcmF0b3IiLCJDT01QQVJBVE9SIiwic2FtZURpcmVjdGlvbkluY3JlYXNpbmciLCJzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyIsInNhbWVTZW1WZXIiLCJkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlIiwib3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4iLCJvcHBvc2l0ZURpcmVjdGlvbnNHcmVhdGVyVGhhbiIsInNhdGlzZmllcyIsInNhdGlzZmllc18xIiwidG9Db21wYXJhdG9ycyIsInRvQ29tcGFyYXRvcnNfMSIsIm1heFNhdGlzZnlpbmciLCJ2ZXJzaW9ucyIsIm1heFNWIiwicmFuZ2VPYmoiLCJtYXhTYXRpc2Z5aW5nXzEiLCJtaW5TYXRpc2Z5aW5nIiwibWluIiwibWluU1YiLCJtaW5TYXRpc2Z5aW5nXzEiLCJtaW5WZXJzaW9uIiwibWludmVyIiwic2V0TWluIiwiY29tcGFyYXRvciIsImNvbXB2ZXIiLCJtaW5WZXJzaW9uXzEiLCJ2YWxpZFJhbmdlIiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJvdXRzaWRlIiwiaGlsbyIsImd0Zm4iLCJsdGVmbiIsImx0Zm4iLCJlY29tcCIsImhpZ2giLCJsb3ciLCJvdXRzaWRlXzEiLCJndHIiLCJndHJfMSIsImx0ciIsImx0cl8xIiwicjEiLCJyMiIsImludGVyc2VjdHNfMSIsInNpbXBsaWZ5IiwicmFuZ2VzIiwic2ltcGxpZmllZCIsIm9yaWdpbmFsIiwic3Vic2V0Iiwic3ViIiwiZG9tIiwic2F3Tm9uTnVsbCIsIk9VVEVSIiwic2ltcGxlU3ViIiwic2ltcGxlRG9tIiwiaXNTdWIiLCJzaW1wbGVTdWJzZXQiLCJlcVNldCIsImd0bHRDb21wIiwiaGlnaGVyIiwibG93ZXIiLCJoYXNEb21MVCIsImhhc0RvbUdUIiwiaGlnaGVyR1QiLCJsb3dlckxUIiwibmVlZERvbUxUUHJlIiwibmVlZERvbUdUUHJlIiwic3Vic2V0XzEiLCJpbnRlcm5hbFJlIiwicmVxdWlyZSQkOCIsInJlcXVpcmUkJDkiLCJyZXF1aXJlJCQxMCIsInJlcXVpcmUkJDExIiwicmVxdWlyZSQkMTIiLCJyZXF1aXJlJCQxMyIsInJlcXVpcmUkJDE0IiwicmVxdWlyZSQkMTUiLCJyZXF1aXJlJCQxNiIsInJlcXVpcmUkJDE3IiwicmVxdWlyZSQkMTgiLCJyZXF1aXJlJCQxOSIsInJlcXVpcmUkJDIwIiwicmVxdWlyZSQkMjEiLCJyZXF1aXJlJCQyMiIsInJlcXVpcmUkJDIzIiwicmVxdWlyZSQkMjQiLCJyZXF1aXJlJCQyNSIsInJlcXVpcmUkJDI2IiwicmVxdWlyZSQkMjciLCJyZXF1aXJlJCQyOCIsInJlcXVpcmUkJDI5IiwicmVxdWlyZSQkMzAiLCJyZXF1aXJlJCQzMSIsInJlcXVpcmUkJDMyIiwicmVxdWlyZSQkMzMiLCJyZXF1aXJlJCQzNCIsInJlcXVpcmUkJDM1IiwicmVxdWlyZSQkMzYiLCJyZXF1aXJlJCQzNyIsInJlcXVpcmUkJDM4Iiwic2ltcGxpZnlSYW5nZSIsInJlcXVpcmUkJDM5IiwicmVxdWlyZSQkNDAiLCJ0b2tlbnMiLCJGaWxlQ2xpZW50IiwiZWxlY3Ryb25BcGkiLCJmcyIsInJlcXVpcmUiLCJTSVlVQU5fV09SS1NQQUNFIiwic3lzdGVtIiwiZGF0YURpciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVhZGRpciIsImVyciIsImZpbGVzIiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsInJlamVjdCIsInJlYWRGaWxlIiwicm0iLCJyZWN1cnNpdmUiLCJmb3JjZSIsImdldFZlcnNpb24iLCJmaWxlQXBpIiwia2VybmVsVmVyc2lvbiIsImZpbGVDbGllbnQiLCJ0aGlzQXJnIiwia2luZE9mIiwidGhpbmciLCJzdHIiLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzVW5kZWZpbmVkIiwiaXNCdWZmZXIiLCJpc0Z1bmN0aW9uIiwiaXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc0Jvb2xlYW4iLCJpc1BsYWluT2JqZWN0IiwidG9TdHJpbmdUYWciLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNGb3JtRGF0YSIsInBhdHRlcm4iLCJpc1VSTFNlYXJjaFBhcmFtcyIsImFsbE93bktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmluZEtleSIsIl9nbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiY29udGV4dCIsIm1lcmdlIiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsImV4dGVuZCIsInN0cmlwQk9NIiwiY2hhckNvZGVBdCIsImluaGVyaXRzIiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwiZGVzY3JpcHRvcnMiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwicHJvcEZpbHRlciIsInByb3AiLCJtZXJnZWQiLCJlbmRzV2l0aCIsInNlYXJjaFN0cmluZyIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJmb3JFYWNoRW50cnkiLCJwYWlyIiwibWF0Y2hBbGwiLCJyZWdFeHAiLCJtYXRjaGVzIiwiaXNIVE1MRm9ybSIsInRvQ2FtZWxDYXNlIiwicDEiLCJwMiIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJmcmVlemVNZXRob2RzIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiaXNGaW5pdGUiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsImdlbmVyYXRlU3RyaW5nIiwiYWxwaGFiZXQiLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0IiwidmlzaXQiLCJzb3VyY2UiLCJyZWR1Y2VkVmFsdWUiLCJ1dGlscyIsImhhc093blByb3AiLCJBeGlvc0Vycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwiaHR0cEFkYXB0ZXIiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwiZG90cyIsImNvbmNhdCIsImlzRmxhdEFycmF5IiwicHJlZGljYXRlcyIsInRvRm9ybURhdGEiLCJmb3JtRGF0YSIsIm1ldGFUb2tlbnMiLCJpbmRleGVzIiwidmlzaXRvciIsImRlZmF1bHRWaXNpdG9yIiwidXNlQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiZXhwb3NlZEhlbHBlcnMiLCJlbmNvZGUiLCJjaGFyTWFwIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJwYXJhbXMiLCJfcGFpcnMiLCJidWlsZFVSTCIsIl9lbmNvZGUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiZW5jb2RlciIsIkludGVyY2VwdG9yTWFuYWdlciIsImhhbmRsZXJzIiwidXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzeW5jaHJvbm91cyIsInJ1bldoZW4iLCJlamVjdCIsIkludGVyY2VwdG9yTWFuYWdlciQxIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsIlVSTFNlYXJjaFBhcmFtcyQxIiwiVVJMU2VhcmNoUGFyYW1zIiwiRm9ybURhdGEkMSIsIkJsb2IkMSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwicHJvZHVjdCIsImlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwicGxhdGZvcm0iLCJpc0Jyb3dzZXIiLCJjbGFzc2VzIiwicHJvdG9jb2xzIiwidG9VUkxFbmNvZGVkRm9ybSIsImhlbHBlcnMiLCJpc05vZGUiLCJwYXJzZVByb3BQYXRoIiwiYXJyYXlUb09iamVjdCIsImZvcm1EYXRhVG9KU09OIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzdHJpbmdpZnlTYWZlbHkiLCJyYXdWYWx1ZSIsInBhcnNlciIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwiRVJSX0JBRF9SRVNQT05TRSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwiZGVmYXVsdHMkMSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsImxpbmUiLCJzdWJzdHJpbmciLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJwYXJzZVRva2VucyIsInRva2Vuc1JFIiwiaXNWYWxpZEhlYWRlck5hbWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiZm9ybWF0SGVhZGVyIiwiY2hhciIsImJ1aWxkQWNjZXNzb3JzIiwiYWNjZXNzb3JOYW1lIiwibWV0aG9kTmFtZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIkF4aW9zSGVhZGVycyIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwibWF0Y2hlciIsImRlbGV0ZWQiLCJkZWxldGVIZWFkZXIiLCJub3JtYWxpemUiLCJub3JtYWxpemVkIiwidGFyZ2V0cyIsImFzU3RyaW5ncyIsImNvbXB1dGVkIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3NvciIsIkF4aW9zSGVhZGVycyQxIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzQ2FuY2VsIiwiX19DQU5DRUxfXyIsIkNhbmNlbGVkRXJyb3IiLCJFUlJfQ0FOQ0VMRUQiLCJzZXR0bGUiLCJFUlJfQkFEX1JFUVVFU1QiLCJmbG9vciIsImNvb2tpZXMiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJidWlsZEZ1bGxQYXRoIiwicmVxdWVzdGVkVVJMIiwiaXNVUkxTYW1lT3JpZ2luIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZVByb3RvY29sIiwic3BlZWRvbWV0ZXIiLCJzYW1wbGVzQ291bnQiLCJieXRlcyIsInRpbWVzdGFtcHMiLCJmaXJzdFNhbXBsZVRTIiwiY2h1bmtMZW5ndGgiLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwicm91bmQiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImxpc3RlbmVyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiaXNYSFJBZGFwdGVyU3VwcG9ydGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJBZGFwdGVyIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJjYW5jZWxUb2tlbiIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJidG9hIiwiZnVsbFBhdGgiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib3BlbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsIkVUSU1FRE9VVCIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwic2VuZCIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwiYWRhcHRlcnMiLCJnZXRBZGFwdGVyIiwibmFtZU9yQWRhcHRlciIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwicmVhc29uIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJFUlJfQkFEX09QVElPTl9WQUxVRSIsIm9wdCIsInZhbGlkYXRvciIsIkVSUl9CQURfT1BUSU9OIiwidmFsaWRhdG9ycyQxIiwiZm9ybWF0TWVzc2FnZSIsImRlc2MiLCJFUlJfREVQUkVDQVRFRCIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImNvbnRleHRIZWFkZXJzIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInByb21pc2UiLCJjaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkF4aW9zJDEiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkNhbmNlbFRva2VuJDEiLCJzcHJlYWQiLCJjYWxsYmFjayIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiSHR0cFN0YXR1c0NvZGUkMSIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiYXhpb3MiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsImZvcm1Ub0pTT04iLCJheGlvcyQxIiwiTG9nZ2VyRmFjdG9yeSIsIkxvZ0xldmVsRW51bSIsInBsdWdpblN5c3RlbUxvZ2dlciIsImluZm8iLCJQcmFnbWEiLCJFeHBpcmVzIiwic2xlZXAiLCJyZWxvYWRXaW5kb3ciLCJyZWxvYWQiLCJwYXJzZUludCIsIlVpbnQzMkFycmF5IiwiaXNFeGlzdHMiLCJnZXRJbnN0YW5jZUFwaSIsIkVycm9yJDEiLCJXYXJuaW5nIiwic2hvd0luZm9NZXNzYWdlIiwic2hvd0Vycm9yTWVzc2FnZSIsImxhbmdzIiwiemhfQ04iLCJlbl9VUyIsImxhbmciLCJOQU1FRF9UQUciLCJOQU1FX1RBRyIsIlVOTUFOQUdFRF9UQUciLCJPUFRJT05BTF9UQUciLCJJTkpFQ1RfVEFHIiwiTVVMVElfSU5KRUNUX1RBRyIsIlRBR0dFRCIsIlRBR0dFRF9QUk9QIiwiUEFSQU1fVFlQRVMiLCJERVNJR05fUEFSQU1fVFlQRVMiLCJQT1NUX0NPTlNUUlVDVCIsIlBSRV9ERVNUUk9ZIiwiZ2V0Tm9uQ3VzdG9tVGFnS2V5cyIsIk5PTl9DVVNUT01fVEFHX0tFWVMiLCJCaW5kaW5nU2NvcGVFbnVtIiwiUmVxdWVzdCIsIlNpbmdsZXRvbiIsIlRyYW5zaWVudCIsIkJpbmRpbmdUeXBlRW51bSIsIkNvbnN0YW50VmFsdWUiLCJDb25zdHJ1Y3RvciIsIkR5bmFtaWNWYWx1ZSIsIkZhY3RvcnkiLCJJbnN0YW5jZSIsIkludmFsaWQiLCJQcm92aWRlciIsIlRhcmdldFR5cGVFbnVtIiwiQ2xhc3NQcm9wZXJ0eSIsIkNvbnN0cnVjdG9yQXJndW1lbnQiLCJWYXJpYWJsZSIsImlkQ291bnRlciIsIkJpbmRpbmciLCJzZXJ2aWNlSWRlbnRpZmllciIsInNjb3BlIiwiYWN0aXZhdGVkIiwiY29uc3RyYWludCIsImltcGxlbWVudGF0aW9uVHlwZSIsInByb3ZpZGVyIiwib25BY3RpdmF0aW9uIiwib25EZWFjdGl2YXRpb24iLCJkeW5hbWljVmFsdWUiLCJjbG9uZSIsIkRVUExJQ0FURURfSU5KRUNUQUJMRV9ERUNPUkFUT1IiLCJEVVBMSUNBVEVEX01FVEFEQVRBIiwiTlVMTF9BUkdVTUVOVCIsIktFWV9OT1RfRk9VTkQiLCJBTUJJR1VPVVNfTUFUQ0giLCJDQU5OT1RfVU5CSU5EIiwiTk9UX1JFR0lTVEVSRUQiLCJNSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiIsIk1JU1NJTkdfSU5KRUNUX0FOTk9UQVRJT04iLCJVTkRFRklORURfSU5KRUNUX0FOTk9UQVRJT04iLCJDSVJDVUxBUl9ERVBFTkRFTkNZIiwiSU5WQUxJRF9CSU5ESU5HX1RZUEUiLCJOT19NT1JFX1NOQVBTSE9UU19BVkFJTEFCTEUiLCJJTlZBTElEX01JRERMRVdBUkVfUkVUVVJOIiwiSU5WQUxJRF9GVU5DVElPTl9CSU5ESU5HIiwiTEFaWV9JTl9TWU5DIiwiSU5WQUxJRF9UT19TRUxGX1ZBTFVFIiwiSU5WQUxJRF9ERUNPUkFUT1JfT1BFUkFUSU9OIiwiQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSCIsIkNPTlRBSU5FUl9PUFRJT05TX01VU1RfQkVfQU5fT0JKRUNUIiwiQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9ERUZBVUxUX1NDT1BFIiwiQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9BVVRPX0JJTkRfSU5KRUNUQUJMRSIsIkNPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfU0tJUF9CQVNFX0NIRUNLIiwiQVNZTkNfVU5CSU5EX1JFUVVJUkVEIiwiUE9TVF9DT05TVFJVQ1RfRVJST1IiLCJjbGF6eiIsImVycm9yTWVzc2FnZSIsIlBSRV9ERVNUUk9ZX0VSUk9SIiwiT05fREVBQ1RJVkFUSU9OX0VSUk9SIiwiQ0lSQ1VMQVJfREVQRU5ERU5DWV9JTl9GQUNUT1JZIiwiZmFjdG9yeVR5cGUiLCJTVEFDS19PVkVSRkxPVyIsIk1ldGFkYXRhUmVhZGVyIiwiZ2V0Q29uc3RydWN0b3JNZXRhZGF0YSIsImNvbnN0cnVjdG9yRnVuYyIsImNvbXBpbGVyR2VuZXJhdGVkTWV0YWRhdGEiLCJNRVRBREFUQV9LRVkuUEFSQU1fVFlQRVMiLCJ1c2VyR2VuZXJhdGVkTWV0YWRhdGEiLCJNRVRBREFUQV9LRVkuVEFHR0VEIiwiZ2V0UHJvcGVydGllc01ldGFkYXRhIiwiTUVUQURBVEFfS0VZLlRBR0dFRF9QUk9QIiwiQmluZGluZ0NvdW50IiwiTXVsdGlwbGVCaW5kaW5nc0F2YWlsYWJsZSIsIk5vQmluZGluZ3NBdmFpbGFibGUiLCJPbmx5T25lQmluZGluZ0F2YWlsYWJsZSIsImlzU3RhY2tPdmVyZmxvd0V4ZXB0aW9uIiwiUmFuZ2VFcnJvciIsIkVSUk9SX01TR1MuU1RBQ0tfT1ZFUkZMT1ciLCJ0cnlBbmRUaHJvd0Vycm9ySWZTdGFja092ZXJmbG93IiwiZXJyb3JDYWxsYmFjayIsImdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmciLCJsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIiLCJjb250YWluZXIiLCJnZXRCaW5kaW5ncyIsInJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QiLCJyZWdpc3RlcmVkQmluZGluZ3MiLCJiaW5kaW5nIiwiZ2V0RnVuY3Rpb25OYW1lIiwibWV0YURhdGEiLCJhbHJlYWR5RGVwZW5kZW5jeUNoYWluIiwicGFyZW50UmVxdWVzdCIsImRlcGVuZGVuY3lDaGFpblRvU3RyaW5nIiwic3RyaW5nQXJyIiwiX2NyZWF0ZVN0cmluZ0FyciIsInJlcSIsImNpcmN1bGFyRGVwZW5kZW5jeVRvRXhjZXB0aW9uIiwiY2hpbGRSZXF1ZXN0cyIsImNoaWxkUmVxdWVzdCIsInNlcnZpY2VzIiwiRVJST1JfTVNHUy5DSVJDVUxBUl9ERVBFTkRFTkNZIiwibGlzdE1ldGFkYXRhRm9yVGFyZ2V0Iiwic2VydmljZUlkZW50aWZpZXJTdHJpbmciLCJpc1RhZ2dlZCIsImlzTmFtZWQiLCJtXzEiLCJuYW1lZFRhZyIsImdldE5hbWVkVGFnIiwib3RoZXJUYWdzIiwiZ2V0Q3VzdG9tVGFncyIsInRhZyIsIm5hbWVfMSIsImdldFN5bWJvbERlc2NyaXB0aW9uIiwic3ltYm9sIiwiQ29udGV4dCIsImFkZFBsYW4iLCJwbGFuIiwic2V0Q3VycmVudFJlcXVlc3QiLCJjdXJyZW50UmVxdWVzdCIsIk1FVEFEQVRBX0tFWS5OQU1FRF9UQUciLCJQbGFuIiwicGFyZW50Q29udGV4dCIsInJvb3RSZXF1ZXN0IiwiTGF6eVNlcnZpY2VJZGVudGlmZXIiLCJjYiIsIl9jYiIsInVud3JhcCIsIlF1ZXJ5YWJsZVN0cmluZyIsInN0YXJ0c1dpdGgiLCJyZXZlcnNlU3RyaW5nIiwicmV2ZXJzZVNlYXJjaFN0cmluZyIsImNvbnRhaW5zIiwiZXF1YWxzIiwiY29tcGFyZVN0cmluZyIsIlRhcmdldCIsIm5hbWVkT3JUYWdnZWQiLCJxdWVyeWFibGVOYW1lIiwibWV0YWRhdGFJdGVtIiwiaGFzVGFnIiwiTUVUQURBVEFfS0VZLk1VTFRJX0lOSkVDVF9UQUciLCJtYXRjaGVzQXJyYXkiLCJtYXRjaGVzVGFnIiwiTUVUQURBVEFfS0VZLk5PTl9DVVNUT01fVEFHX0tFWVMiLCJpc09wdGlvbmFsIiwiTUVUQURBVEFfS0VZLk9QVElPTkFMX1RBRyIsIm1hdGNoZXNOYW1lZFRhZyIsIl90aGlzIiwiX19zcHJlYWRBcnJheSIsInBhY2siLCJhciIsImdldERlcGVuZGVuY2llcyIsIm1ldGFkYXRhUmVhZGVyIiwiZ2V0VGFyZ2V0cyIsImNvbnN0cnVjdG9yTmFtZSIsImlzQmFzZUNsYXNzIiwic2VydmljZUlkZW50aWZpZXJzIiwiRVJST1JfTVNHUy5NSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiIsImNvbnN0cnVjdG9yQXJnc01ldGFkYXRhIiwiaGFzVXNlckRlY2xhcmVkVW5rbm93bkluamVjdGlvbnMiLCJoYXNPcHRpb25hbFBhcmFtZXRlcnMiLCJjb25zdHJ1Y3RvclRhcmdldHMiLCJnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldHMiLCJwcm9wZXJ0eVRhcmdldHMiLCJnZXRDbGFzc1Byb3BzQXNUYXJnZXRzIiwiZ2V0Q29uc3RydWN0b3JBcmdzQXNUYXJnZXQiLCJmb3JtYXRUYXJnZXRNZXRhZGF0YSIsImlzTWFuYWdlZCIsInVubWFuYWdlZCIsImluamVjdElkZW50aWZpZXIiLCJpbmplY3QiLCJtdWx0aUluamVjdCIsIkVSUk9SX01TR1MuTUlTU0lOR19JTkpFQ1RfQU5OT1RBVElPTiIsInRhcmdldE5hbWUiLCJpdGVyYXRpb25zIiwiX2dldFNlcnZpY2VJZGVudGlmaWVyRm9yUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJjbGFzc05hbWUiLCJjbGFzc1Byb3BzTWV0YWRhdGEiLCJzeW1ib2xLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwia2V5c18xIiwiYmFzZUNvbnN0cnVjdG9yIiwiYmFzZVRhcmdldHMiLCJnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQiLCJNRVRBREFUQV9LRVkuVU5NQU5BR0VEX1RBRyIsInVubWFuYWdlZENvdW50IiwiZGVwZW5kZW5jeUNvdW50IiwidGFyZ2V0TWV0YWRhdGFNYXAiLCJNRVRBREFUQV9LRVkuSU5KRUNUX1RBRyIsIk1FVEFEQVRBX0tFWS5OQU1FX1RBRyIsImJpbmRpbmdzIiwicmVxdWVzdFNjb3BlIiwiYWRkQ2hpbGRSZXF1ZXN0IiwiY2hpbGQiLCJnZXRCaW5kaW5nRGljdGlvbmFyeSIsImNudG5yIiwiX2JpbmRpbmdEaWN0aW9uYXJ5IiwiX2NyZWF0ZVRhcmdldCIsImlzTXVsdGlJbmplY3QiLCJ0YXJnZXRUeXBlIiwiaW5qZWN0TWV0YWRhdGEiLCJ0YWdNZXRhZGF0YSIsIl9nZXRBY3RpdmVCaW5kaW5ncyIsImF2b2lkQ29uc3RyYWludHMiLCJhY3RpdmVCaW5kaW5ncyIsImF1dG9CaW5kSW5qZWN0YWJsZSIsInRvU2VsZiIsIl92YWxpZGF0ZUFjdGl2ZUJpbmRpbmdDb3VudCIsIkVSUk9SX01TR1MuTk9UX1JFR0lTVEVSRUQiLCJFUlJPUl9NU0dTLkFNQklHVU9VU19NQVRDSCIsIl9jcmVhdGVTdWJSZXF1ZXN0cyIsInRoZVBsYW4iLCJzdWJDaGlsZFJlcXVlc3QiLCJkZXBlbmRlbmNpZXMiLCJza2lwQmFzZUNsYXNzQ2hlY2tzIiwiYmFzZUNsYXNzRGVwZW5kZW5jeUNvdW50IiwiRVJST1JfTVNHUy5BUkdVTUVOVFNfTEVOR1RIX01JU01BVENIIiwiZGVwZW5kZW5jeSIsImJpbmRpbmdEaWN0aW9uYXJ5IiwiaGFzS2V5IiwiY3JlYXRlTW9ja1JlcXVlc3QiLCJpc1Byb21pc2UiLCJvYmplY3QiLCJpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSIsIl9fYXdhaXRlciIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJzdGVwIiwiX19nZW5lcmF0b3IiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0cnlHZXRGcm9tU2NvcGUiLCJzYXZlVG9TY29wZSIsIl9zYXZlVG9TaW5nbGV0b25TY29wZSIsIl9zYXZlVG9SZXF1ZXN0U2NvcGUiLCJfc2F2ZUFzeW5jUmVzdWx0VG9TaW5nbGV0b25TY29wZSIsImFzeW5jUmVzdWx0IiwiZXhfMSIsIkZhY3RvcnlUeXBlIiwiZW5zdXJlRnVsbHlCb3VuZCIsImJvdW5kVmFsdWUiLCJzZXJ2aWNlSWRlbnRpZmllckFzU3RyaW5nIiwiRVJST1JfTVNHUy5JTlZBTElEX0JJTkRJTkdfVFlQRSIsImdldEZhY3RvcnlEZXRhaWxzIiwiX19hc3NpZ24iLCJfX2Fzc2lnbiQxIiwiX3Jlc29sdmVSZXF1ZXN0cyIsInJlc29sdmVSZXF1ZXN0IiwicmVzb2x2ZWRSZXF1ZXN0cyIsImluamVjdGlvbiIsImNvbnN0cnVjdG9ySW5qZWN0aW9ucyIsInByb3BlcnR5UmVxdWVzdHMiLCJwcm9wZXJ0eUluamVjdGlvbnMiLCJpc0FzeW5jIiwiX2NyZWF0ZUluc3RhbmNlIiwiY29uc3RyIiwicmVzb2x2ZWQiLCJjcmVhdGVJbnN0YW5jZVdpdGhJbmplY3Rpb25zQXJnIiwiY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FzeW5jIiwiY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9ucyIsInByb3BlcnR5IiwicG9zc2libHlXYWl0SW5qZWN0aW9ucyIsInBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnMiLCJpbmplY3Rpb25zIiwicG9zc2libGVQcm9taXNlaW5qZWN0aW9uc18xIiwiX2dldEluc3RhbmNlQWZ0ZXJQb3N0Q29uc3RydWN0IiwicG9zdENvbnN0cnVjdFJlc3VsdCIsIl9wb3N0Q29uc3RydWN0IiwiTUVUQURBVEFfS0VZLlBPU1RfQ09OU1RSVUNUIiwiX3ZhbGlkYXRlSW5zdGFuY2VSZXNvbHV0aW9uIiwiX3Rocm93SWZIYW5kbGluZ0RlYWN0aXZhdGlvbiIsInNjb3BlRXJyb3JNZXNzYWdlIiwiTUVUQURBVEFfS0VZLlBSRV9ERVNUUk9ZIiwicmVzb2x2ZUluc3RhbmNlIiwicmVzb2x2ZWRSZXN1bHQiLCJfcmVzb2x2ZVJlcXVlc3QiLCJ0YXJnZXRJc0FuQXJyYXkiLCJ0YXJnZXRQYXJlbnRJc05vdEFuQXJyYXkiLCJfZiIsIl9yZXNvbHZlQmluZGluZyIsIl9yZXNvbHZlRmFjdG9yeUZyb21CaW5kaW5nIiwiZmFjdG9yeURldGFpbHMiLCJFUlJPUl9NU0dTLkNJUkNVTEFSX0RFUEVOREVOQ1lfSU5fRkFDVE9SWSIsIl9nZXRSZXNvbHZlZEZyb21CaW5kaW5nIiwiX3Jlc29sdmVJblNjb3BlIiwicmVzb2x2ZUZyb21CaW5kaW5nIiwiX29uQWN0aXZhdGlvbiIsIl9iaW5kaW5nQWN0aXZhdGlvbiIsImNvbnRhaW5lcnNJdGVyYXRvciIsIl9nZXRDb250YWluZXJzSXRlcmF0b3IiLCJjb250YWluZXJzSXRlcmF0b3JSZXN1bHQiLCJjb250ZXh0XzEiLCJhY3RpdmF0aW9uc0l0ZXJhdG9yIiwiX2dldENvbnRhaW5lckFjdGl2YXRpb25zRm9yU2VydmljZSIsIl9hY3RpdmF0ZUNvbnRhaW5lckFzeW5jIiwiX2FjdGl2YXRlQ29udGFpbmVyIiwicHJldmlvdXNSZXN1bHQiLCJhY3RpdmF0aW9uIiwicmVzdWx0UHJvbWlzZSIsImFjdGl2YXRpb25zIiwiX2FjdGl2YXRpb25zIiwiY29udGFpbmVyc1N0YWNrIiwibmV4dENvbnRhaW5lciIsInRyYXZlcnNlQW5jZXJzdG9ycyIsInRhZ2dlZENvbnN0cmFpbnQiLCJuYW1lZENvbnN0cmFpbnQiLCJ0eXBlQ29uc3RyYWludCIsIkJpbmRpbmdXaGVuU3ludGF4IiwiX2JpbmRpbmciLCJ3aGVuIiwiQmluZGluZ09uU3ludGF4Iiwid2hlblRhcmdldE5hbWVkIiwid2hlblRhcmdldElzRGVmYXVsdCIsIndoZW5UYXJnZXRUYWdnZWQiLCJ3aGVuSW5qZWN0ZWRJbnRvIiwid2hlblBhcmVudE5hbWVkIiwid2hlblBhcmVudFRhZ2dlZCIsIndoZW5BbnlBbmNlc3RvcklzIiwiYW5jZXN0b3IiLCJ3aGVuTm9BbmNlc3RvcklzIiwid2hlbkFueUFuY2VzdG9yTmFtZWQiLCJ3aGVuTm9BbmNlc3Rvck5hbWVkIiwid2hlbkFueUFuY2VzdG9yVGFnZ2VkIiwid2hlbk5vQW5jZXN0b3JUYWdnZWQiLCJ3aGVuQW55QW5jZXN0b3JNYXRjaGVzIiwid2hlbk5vQW5jZXN0b3JNYXRjaGVzIiwiaGFuZGxlciIsIkJpbmRpbmdXaGVuT25TeW50YXgiLCJfYmluZGluZ1doZW5TeW50YXgiLCJfYmluZGluZ09uU3ludGF4IiwiQmluZGluZ0luU3ludGF4IiwiaW5SZXF1ZXN0U2NvcGUiLCJpblNpbmdsZXRvblNjb3BlIiwiaW5UcmFuc2llbnRTY29wZSIsIkJpbmRpbmdJbldoZW5PblN5bnRheCIsIl9iaW5kaW5nSW5TeW50YXgiLCJCaW5kaW5nVG9TeW50YXgiLCJFUlJPUl9NU0dTLklOVkFMSURfVE9fU0VMRl9WQUxVRSIsInRvQ29uc3RhbnRWYWx1ZSIsInRvRHluYW1pY1ZhbHVlIiwidG9Db25zdHJ1Y3RvciIsInRvRmFjdG9yeSIsInRvRnVuY3Rpb24iLCJFUlJPUl9NU0dTLklOVkFMSURfRlVOQ1RJT05fQklORElORyIsImJpbmRpbmdXaGVuT25TeW50YXgiLCJ0b0F1dG9GYWN0b3J5IiwidG9BdXRvTmFtZWRGYWN0b3J5IiwibmFtZWQiLCJnZXROYW1lZCIsInRvUHJvdmlkZXIiLCJ0b1NlcnZpY2UiLCJzZXJ2aWNlIiwiQ29udGFpbmVyU25hcHNob3QiLCJvZiIsIm1pZGRsZXdhcmUiLCJkZWFjdGl2YXRpb25zIiwibW9kdWxlQWN0aXZhdGlvblN0b3JlIiwic25hcHNob3QiLCJpc0Nsb25hYmxlIiwiTG9va3VwIiwiZ2V0TWFwIiwiRVJST1JfTVNHUy5OVUxMX0FSR1VNRU5UIiwiZW50cnkiLCJFUlJPUl9NU0dTLktFWV9OT1RfRk9VTkQiLCJyZW1vdmVJbnRlcnNlY3Rpb24iLCJsb29rdXAiLCJ0cmF2ZXJzZSIsImxvb2t1cEFjdGl2YXRpb25zIiwiZmlsdGVyZWRWYWx1ZXMiLCJsb29rdXBWYWx1ZSIsIm1vZHVsZUFjdGl2YXRpb24iLCJfc2V0VmFsdWUiLCJyZW1vdmVCeUNvbmRpdGlvbiIsImNvbmRpdGlvbiIsInJlbW92YWxzIiwidXBkYXRlZEVudHJpZXMiLCJlbnRyaWVzXzEiLCJjb3B5IiwiTW9kdWxlQWN0aXZhdGlvblN0b3JlIiwibW9kdWxlSWQiLCJfZ2V0RW1wdHlIYW5kbGVyc1N0b3JlIiwiYWRkRGVhY3RpdmF0aW9uIiwiX2dldE1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyIsIm9uRGVhY3RpdmF0aW9ucyIsImFkZEFjdGl2YXRpb24iLCJvbkFjdGl2YXRpb25zIiwiaGFuZGxlcnNTdG9yZSIsIm1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyIsIkNvbnRhaW5lciIsImNvbnRhaW5lck9wdGlvbnMiLCJFUlJPUl9NU0dTLkNPTlRBSU5FUl9PUFRJT05TX01VU1RfQkVfQU5fT0JKRUNUIiwiZGVmYXVsdFNjb3BlIiwiRVJST1JfTVNHUy5DT05UQUlORVJfT1BUSU9OU19JTlZBTElEX0RFRkFVTFRfU0NPUEUiLCJFUlJPUl9NU0dTLkNPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfQVVUT19CSU5EX0lOSkVDVEFCTEUiLCJFUlJPUl9NU0dTLkNPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfU0tJUF9CQVNFX0NIRUNLIiwiX3NuYXBzaG90cyIsIl9taWRkbGV3YXJlIiwiX2RlYWN0aXZhdGlvbnMiLCJfbWV0YWRhdGFSZWFkZXIiLCJfbW9kdWxlQWN0aXZhdGlvblN0b3JlIiwiY29udGFpbmVyMSIsImNvbnRhaW5lcjIiLCJjb250YWluZXJzIiwidGFyZ2V0Q29udGFpbmVycyIsInRhcmdldENvbnRhaW5lciIsInRhcmdldEJpbmRpbmdEaWN0aW9uYXJ5IiwiZGVzdGluYXRpb24iLCJtb2R1bGVzIiwiZ2V0SGVscGVycyIsIl9nZXRDb250YWluZXJNb2R1bGVIZWxwZXJzRmFjdG9yeSIsIm1vZHVsZXNfMSIsImN1cnJlbnRNb2R1bGUiLCJjb250YWluZXJNb2R1bGVIZWxwZXJzIiwicmVnaXN0cnkiLCJiaW5kRnVuY3Rpb24iLCJ1bmJpbmRGdW5jdGlvbiIsImlzYm91bmRGdW5jdGlvbiIsInJlYmluZEZ1bmN0aW9uIiwidW5iaW5kQXN5bmNGdW5jdGlvbiIsIm9uQWN0aXZhdGlvbkZ1bmN0aW9uIiwib25EZWFjdGl2YXRpb25GdW5jdGlvbiIsImxvYWRBc3luYyIsIm1vZHVsZXNfMiIsInVubG9hZCIsIl9yZW1vdmVNb2R1bGVCaW5kaW5ncyIsIl9kZWFjdGl2YXRlU2luZ2xldG9ucyIsIl9yZW1vdmVNb2R1bGVIYW5kbGVycyIsInVubG9hZEFzeW5jIiwibW9kdWxlc18zIiwibW9kdWxlXzEiLCJfZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyIsInJlYmluZCIsInVuYmluZCIsInJlYmluZEFzeW5jIiwidW5iaW5kQXN5bmMiLCJfcmVtb3ZlU2VydmljZUZyb21EaWN0aW9uYXJ5IiwidW5iaW5kQWxsIiwidW5iaW5kQWxsQXN5bmMiLCJpc0JvdW5kIiwiYm91bmQiLCJpc0N1cnJlbnRCb3VuZCIsImlzQm91bmROYW1lZCIsImlzQm91bmRUYWdnZWQiLCJyZXF1ZXN0XzEiLCJyZXN0b3JlIiwiRVJST1JfTVNHUy5OT19NT1JFX1NOQVBTSE9UU19BVkFJTEFCTEUiLCJjcmVhdGVDaGlsZCIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX3BsYW5BbmRSZXNvbHZlIiwiY3VyciIsImFwcGx5Q3VzdG9tTWV0YWRhdGFSZWFkZXIiLCJnZXRBcmdzIiwiX2dldE5vdEFsbEFyZ3MiLCJfZ2V0QnV0VGhyb3dJZkFzeW5jIiwiZ2V0QXN5bmMiLCJfZ2V0IiwiZ2V0VGFnZ2VkIiwiZ2V0VGFnZ2VkQXN5bmMiLCJnZXROYW1lZEFzeW5jIiwiZ2V0QWxsIiwiX2dldEFsbEFyZ3MiLCJnZXRBbGxBc3luYyIsIl9nZXRBbGwiLCJnZXRBbGxUYWdnZWQiLCJnZXRBbGxUYWdnZWRBc3luYyIsImdldEFsbE5hbWVkIiwiZ2V0QWxsTmFtZWRBc3luYyIsImNvbnN0cnVjdG9yRnVuY3Rpb24iLCJfcHJlRGVzdHJveSIsIm1vZHVsZUFjdGl2YXRpb25zSGFuZGxlcnMiLCJfZGVhY3RpdmF0ZSIsIl9kZWFjdGl2YXRlQ29udGFpbmVyIiwiX2hhbmRsZURlYWN0aXZhdGlvbkVycm9yIiwiX3Byb3BhZ2F0ZUNvbnRhaW5lckRlYWN0aXZhdGlvblRoZW5CaW5kaW5nQW5kUHJlRGVzdHJveUFzeW5jIiwicHJvcGFnYXRlRGVhY3RpdmF0aW9uUmVzdWx0IiwiX3Byb3BhZ2F0ZUNvbnRhaW5lckRlYWN0aXZhdGlvblRoZW5CaW5kaW5nQW5kUHJlRGVzdHJveSIsImV4IiwiRVJST1JfTVNHUy5PTl9ERUFDVElWQVRJT05fRVJST1IiLCJkZWFjdGl2YXRpb25zSXRlcmF0b3IiLCJkZWFjdGl2YXRpb24iLCJfZGVhY3RpdmF0ZUNvbnRhaW5lckFzeW5jIiwic2V0TW9kdWxlSWQiLCJiaW5kaW5nVG9TeW50YXgiLCJnZXRSZWJpbmRGdW5jdGlvbiIsImdldE9uQWN0aXZhdGlvbkZ1bmN0aW9uIiwiZ2V0T25EZWFjdGl2YXRpb25GdW5jdGlvbiIsIm1JZCIsInBsYW5BbmRSZXNvbHZlQXJncyIsImNvbnRleHRJbnRlcmNlcHRvciIsIm1pZGRsZXdhcmVSZXN1bHQiLCJFUlJPUl9NU0dTLklOVkFMSURfTUlERExFV0FSRV9SRVRVUk4iLCJFUlJPUl9NU0dTLkxBWllfSU5fU1lOQyIsIl9kZWFjdGl2YXRlSWZTaW5nbGV0b24iLCJiaW5kaW5nc18xIiwiRVJST1JfTVNHUy5BU1lOQ19VTkJJTkRfUkVRVUlSRUQiLCJfYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3kiLCJfYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3lBc3luYyIsIkVSUk9SX01TR1MuQ0FOTk9UX1VOQklORCIsImdldEZpcnN0QXJyYXlEdXBsaWNhdGUiLCJhcnJheSIsInNlZW5WYWx1ZXMiLCJhcnJheV8xIiwidGFyZ2V0SXNDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiX3Rocm93SWZNZXRob2RQYXJhbWV0ZXIiLCJwYXJhbWV0ZXJOYW1lIiwiRVJST1JfTVNHUy5JTlZBTElEX0RFQ09SQVRPUl9PUEVSQVRJT04iLCJ0YWdQYXJhbWV0ZXIiLCJhbm5vdGF0aW9uVGFyZ2V0IiwicGFyYW1ldGVySW5kZXgiLCJfdGFnUGFyYW1ldGVyT3JQcm9wZXJ0eSIsInRhZ1Byb3BlcnR5IiwiX2Vuc3VyZU5vTWV0YWRhdGFLZXlEdXBsaWNhdGVzIiwibWV0YWRhdGFzIiwiZHVwbGljYXRlIiwibWQiLCJFUlJPUl9NU0dTLkRVUExJQ0FURURfTUVUQURBVEEiLCJwYXJhbXNPclByb3BlcnRpZXNNZXRhZGF0YSIsInBhcmFtT3JQcm9wZXJ0eU1ldGFkYXRhIiwiX2xvb3BfMSIsInBhcmFtT3JQcm9wZXJ0eU1ldGFkYXRhXzEiLCJjcmVhdGVUYWdnZWREZWNvcmF0b3IiLCJpbmRleE9yUHJvcGVydHlEZXNjcmlwdG9yIiwiaW5qZWN0YWJsZSIsIkVSUk9SU19NU0dTLkRVUExJQ0FURURfSU5KRUNUQUJMRV9ERUNPUkFUT1IiLCJ0eXBlcyIsIk1FVEFEQVRBX0tFWS5ERVNJR05fUEFSQU1fVFlQRVMiLCJpbmplY3RCYXNlIiwiUExVR0lOX1NZU1RFTV9BVVRPX1VQREFURSIsIlBMVUdJTl9TWVNURU1fUExVR0lOIiwiUExVR0lOX1NZU1RFTV9USElSRF9QQVJUWV9QTFVHSU4iLCJQTFVHSU5fU1lTVEVNX1NBRkVfTU9ERV9FTkFCTEVEIiwiUExVR0lOX1NUT1JFX1VSTCIsImVuYWJsZWQiLCJ0YXIiLCJydW4iLCJibGFua19vYmplY3QiLCJydW5fYWxsIiwiaXNfZnVuY3Rpb24iLCJzYWZlX25vdF9lcXVhbCIsImlzX2VtcHR5IiwiY3JlYXRlX3Nsb3QiLCJkZWZpbml0aW9uIiwiY3R4IiwiJCRzY29wZSIsInNsb3RfY3R4IiwiZ2V0X3Nsb3RfY29udGV4dCIsImdldF9zbG90X2NoYW5nZXMiLCJkaXJ0eSIsImxldHMiLCJ1cGRhdGVfc2xvdF9iYXNlIiwic2xvdCIsInNsb3RfZGVmaW5pdGlvbiIsInNsb3RfY2hhbmdlcyIsImdldF9zbG90X2NvbnRleHRfZm4iLCJzbG90X2NvbnRleHQiLCJnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUiLCJudWxsX3RvX2VtcHR5IiwiYXBwZW5kQ2hpbGQiLCJkZXRhY2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkZXN0cm95X2VhY2giLCJkZXRhY2hpbmciLCJzdmdfZWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwic3BhY2UiLCJlbXB0eSIsImxpc3RlbiIsImF0dHIiLCJhdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ4bGlua19hdHRyIiwic2V0QXR0cmlidXRlTlMiLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJzZXRfZGF0YSIsIndob2xlVGV4dCIsInNldF9pbnB1dF92YWx1ZSIsInNldF9zdHlsZSIsImltcG9ydGFudCIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImN1c3RvbV9ldmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJIdG1sVGFnIiwiaXNfc3ZnIiwibm9kZU5hbWUiLCJjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudCIsImNvbXBvbmVudCIsImN1cnJlbnRfY29tcG9uZW50Iiwic2V0X2N1cnJlbnRfY29tcG9uZW50IiwiZ2V0X2N1cnJlbnRfY29tcG9uZW50Iiwib25Nb3VudCIsIiQkIiwib25fbW91bnQiLCJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCJjYWxsYmFja3MiLCJkZWZhdWx0UHJldmVudGVkIiwiZGlydHlfY29tcG9uZW50cyIsImJpbmRpbmdfY2FsbGJhY2tzIiwicmVuZGVyX2NhbGxiYWNrcyIsImZsdXNoX2NhbGxiYWNrcyIsInJlc29sdmVkX3Byb21pc2UiLCJ1cGRhdGVfc2NoZWR1bGVkIiwic2NoZWR1bGVfdXBkYXRlIiwiZmx1c2giLCJhZGRfcmVuZGVyX2NhbGxiYWNrIiwic2Vlbl9jYWxsYmFja3MiLCJmbHVzaGlkeCIsInNhdmVkX2NvbXBvbmVudCIsInVwZGF0ZSIsImZyYWdtZW50IiwiYmVmb3JlX3VwZGF0ZSIsImFmdGVyX3VwZGF0ZSIsIm91dHJvaW5nIiwib3V0cm9zIiwiZ3JvdXBfb3V0cm9zIiwiY2hlY2tfb3V0cm9zIiwidHJhbnNpdGlvbl9pbiIsImJsb2NrIiwibG9jYWwiLCJ0cmFuc2l0aW9uX291dCIsImNyZWF0ZV9jb21wb25lbnQiLCJtb3VudF9jb21wb25lbnQiLCJjdXN0b21FbGVtZW50IiwibmV3X29uX2Rlc3Ryb3kiLCJvbl9kZXN0cm95IiwiZGVzdHJveV9jb21wb25lbnQiLCJtYWtlX2RpcnR5IiwiZmlsbCIsImluaXQiLCJjcmVhdGVfZnJhZ21lbnQiLCJub3RfZXF1YWwiLCJhcHBlbmRfc3R5bGVzIiwicGFyZW50X2NvbXBvbmVudCIsIm9uX2Rpc2Nvbm5lY3QiLCJza2lwX2JvdW5kIiwicmVhZHkiLCJyZXN0IiwiaHlkcmF0ZSIsImludHJvIiwiU3ZlbHRlQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCIkb24iLCIkc2V0IiwiJCRwcm9wcyIsIiQkc2V0IiwidDBfdmFsdWUiLCJ0Ml92YWx1ZSIsInNob3J0Y3V0IiwiZGl2IiwidDIiLCJwbHVnaW5OYW1lIiwidDRfdmFsdWUiLCJpZl9ibG9jayIsImNyZWF0ZV9pZl9ibG9ja18xIiwiZGl2X2NsYXNzX3ZhbHVlIiwic3BhbjAiLCJzcGFuMSIsInQwIiwidDQiLCJ0NiIsInQ2X3ZhbHVlIiwiY3JlYXRlX2lmX2Jsb2NrIiwiZGl2MSIsImRpdjAiLCJzdmciLCJjb21tYW5kTWFuYWdlciIsImNvbW1hbmRzIiwiY3VycmVudEluZGV4Iiwib25FbnRlciIsImNvbSIsImRlc3Ryb3lBbGwiLCJvbkNsaWNrIiwiJCRpbnZhbGlkYXRlIiwiaGFzQ29udGVudCIsImdldENvbW1hbmRzIiwicGx1Z2luIiwia2V5Q29kZSIsIkNvbW1hbmRQYW5lbFBsdWdpbiIsInNob3dQYW5lbCIsInNldEltbWVkaWF0ZSIsIkNvbW1hbmRQYW5lbF9fU3ZlbHRlQ29tcG9uZW50XyIsIm9uQ2hhbmdlIiwiY2hlY2tlZCIsInRpcCIsInNwYW4iLCJzdG9yYWdlTWFuYWdlciIsInBsdWdpblN5c3RlbSIsImNvbmZpZ3MiLCJ0dXJuT25TYWZlTW9kZSIsInR1cm5PZmZTYWZlTW9kZSIsInNlY3VyaXR5TW9kZSIsImF1dG9VcGRhdGUiLCJ0ZXh0Q29udGVudCIsImhpZGRlbiIsInBsdWdpbnMiLCJsb2FkUGx1Z2lucyIsImdldFBsdWdpbnMiLCJkaXNwYXRjaGVyIiwidW5pbnN0YWxsIiwidW5sb2FkUGx1Z2luIiwidW5pbnN0YWxsUGx1Z2luIiwiaW5pdFN0b3JhZ2UiLCJvdXRzaWRlUGx1Z2lucyIsInNjcmlwdCIsInNhZmVNb2RlIiwic2V0UGx1Z2luRW5hYmxlZCIsImxvYWRQbHVnaW4iLCJwbHVnaW5TdGF0dXMiLCJsb2FkUGx1Z2luc0Zyb21VcmwiLCJzdG9yZVBsdWdpbnMiLCJpc0V4aXN0IiwibmVlZFVwZ3JhZGUiLCJvbGRQbHVnaW4iLCJwViIsIm9sZFBsdWdpblYiLCJnZXRTdG9yZVVybCIsImdldFBsdWdpbnNXaXRoU3RhdHVzIiwic3RvcmVVcmwiLCJwbHVnaW5LZXkiLCJnZXRQbHVnaW5NYW5pZmVzdCIsImdldFBsdWdpbk1haW5KcyIsIm1hbmlmZXN0IiwibWFpbkpzIiwiZ2V0UGx1Z2luQnlVcmwiLCJtYW5pZmVzdEpzb24iLCJidXR0b24iLCJfX2RlY29yYXRlQ2xhc3MiLCJfX2RlY29yYXRlUGFyYW0iLCJhX2hyZWZfdmFsdWUiLCJhdXRob3IiLCJodG1sX3RhZyIsInJhd192YWx1ZSIsInQzX3ZhbHVlIiwiaWZfYmxvY2swIiwiY3JlYXRlX2lmX2Jsb2NrXzQiLCJpZl9ibG9jazEiLCJjcmVhdGVfaWZfYmxvY2tfMyIsImlmX2Jsb2NrMiIsImNyZWF0ZV9pZl9ibG9ja18yIiwiaWZfYmxvY2szIiwiZGl2NiIsImRpdjQiLCJkaXYyIiwiZGl2MyIsImRpdjUiLCJ0MyIsImRpc3BhdGNoIiwibG9hZGluZyIsInJlYWRtZSIsIkx1dGVNZENvbnZlcnRlciIsIkx1dGUiLCJOZXciLCJnZXRQbHVnaW5SZWFkbWUiLCJnb0JhY2siLCJwcmV2aWV3SFRNTCIsIk1kMkhUTUwiLCJlYWNoX2Jsb2NrcyIsInRfdmFsdWUiLCJzdG9yZSIsImxvYWRpbmdNYXAiLCJkb3dubG9hZFBsdWdpbiIsInNlbGVjdGVkUGx1Z2luIiwicHJldmlld1BsdWdpbiIsImxpIiwibGlfY2xhc3NfdmFsdWUiLCJsaV9kYXRhX25hbWVfdmFsdWUiLCJzZXR0aW5nY3VzdG9tX2NoYW5nZXMiLCJzd2l0Y2hfdmFsdWUiLCJkaXYwX2RhdGFfbmFtZV92YWx1ZSIsInVsIiwiU2V0dGluZ0NvbW1vbiIsIlNldHRpbmdMaXN0IiwiU2V0dGluZ1N0b3JlIiwic20iLCJnZXRUaGlyZFBhcnR5UGx1Z2lucyIsInNldHRpbmdSZW5kZXJzIiwiZ2V0U2V0dGluZ1JlbmRlcnMiLCJzZXRDdXJyZW50U2VsZWN0aW9uIiwiY3VycmVudFNlbGVjdGlvbiIsInVwZGF0ZU1lbnVzIiwidGhpcmRNZW51cyIsIkludGVybmFsU2V0dGluZ1BsdWdpbiIsImludGVybmFsU2V0dGluZ0J1dHRvbiIsInNob3dTZXR0aW5nRGlhbG9nIiwiY2xpZW50QXBpLmFkZFRvb2xiYXJSaWdodCIsIlNldHRpbmdzIiwiaW50ZXJuYWxQbHVnaW5zIiwiaXNIaWdoU3Vycm9nYXRlIiwiY29kZVBvaW50IiwiaXNMb3dTdXJyb2dhdGUiLCJ0cnVuY2F0ZSIsImdldExlbmd0aCIsInN0cmluZyIsImJ5dGVMZW5ndGgiLCJzZWdtZW50IiwiY2hhckxlbmd0aCIsImN1ckJ5dGVMZW5ndGgiLCJicm93c2VyIiwicHJldkNvZGVQb2ludCIsImlsbGVnYWxSZSIsImNvbnRyb2xSZSIsInJlc2VydmVkUmUiLCJ3aW5kb3dzUmVzZXJ2ZWRSZSIsIndpbmRvd3NUcmFpbGluZ1JlIiwic2FuaXRpemUiLCJyZXBsYWNlbWVudCIsInNhbml0aXplZCIsInNhbml0aXplRmlsZW5hbWUiLCJvdXRwdXQiLCJwbHVnaW5GaWxlTWFuYWdlciIsImNvbmZpZ0tleXMiLCJ0aGlyZFBhcnR5UGx1Z2lucyIsImdldEFsbFBsdWdpbnMiLCJpbml0M3JkUGFydHlFbmFibGVkIiwiaW5pdEludGVybmFsRW5hYmxlZCIsInNhdmVQbHVnaW5zRW5hYmxlZCIsImVuYWJsZWRQbHVnaW5zIiwiZXAiLCJnZXRJbnRlcm5hbFBsdWdpbnMiLCJnZXRQbHVnaW5CeUtleSIsImlzRmlsZU5hbWVJbGxlZ2FsIiwiYWRkUGx1Z2luU3RvcmFnZUZvbGRlcklmTm90RXhpc3QiLCJmb2xkZXIiLCJwbHVnaW5Mb2FkZXIiLCJwc2xtIiwibG9hZEVuYWJsZWRQbHVnaW5zIiwibG9jYWxDYWNoZUluaXQiLCJzZXRTYWZlTW9kZUVuYWJsZWQiLCJ1bmxvYWRUaGlyZFBhcnR5UGx1Z2lucyIsIm1pZ3JhdGUiLCJTTklQUEVUX05BTUUiLCJjcmVkZW50aWFscyIsInJlZGlyZWN0IiwicmVmZXJyZXJQb2xpY3kiLCJzbmlwcGV0cyIsInNuaXBwZXQiLCJwbHVnaW5TY3JpcHRQb3NpdGlvbiIsInN0b3JhZ2VNYW5nYWdlciIsImRlbGF5QXV0b1VwZ3JhZGUiLCJzaXl1YW5QbHVnaW5TY3JpcHQiLCJzYXZlVG9Mb2NhbCIsInBsdWdpblN5c3RlbVNvdXJjZSIsImNvbXBhcmVXaWRnZXRWZXJzaW9uIiwib25saW5lVmVyc2lvbiIsImdldE9ubGluZVZlcnNpb24iLCJ1cGdyYWRlIiwicHMiLCJzZXJ2ZXJBcGkuZ2V0QmF6emFyV2lkZ2V0IiwicGFja2FnZXMiLCJsYXRlc3RWZXJzaW9uIiwiY29tcG9uZW50cyIsImxvYWRlZFBsdWdpbnMiLCJwbHVnIiwiYWRkQWRkaXRpb25hbE1ldGhvZCIsImdlbmVyYXRlUmVxdWlyZWRNb2R1bGVzIiwiZXZhbCIsIl9fcmVxdWlyZSIsInBsdWdpbkNvbnN0cnVjdG9yIiwidW5yZWdpc3RlckNvbW1hbmRCeVBsdWdpbiIsInVucmVnaXN0ZXJTZXR0aW5nIiwicGx1Z2luMiIsIndyaXRlU3RvcmFnZSIsInNldFBsdWdpblN0b3JhZ2UiLCJsb2FkU3RvcmFnZSIsImdldFBsdWdpblN0b3JhZ2UiLCJyZWdpc3RlclNldHRpbmciLCJwbHVnaW5Gb2xkZXIiLCJnZXRGaWxlQ29udGVudCIsInNjYW5QbHVnaW5zIiwiZ2V0Rm9sZGVyTmFtZSIsImdldE1hbmlmZXN0IiwiZ2V0U2NyaXB0IiwiZXZlbnRMaXN0ZW5lcnMiLCJvbiIsImV2ZW50TmFtZSIsIm9mZiIsImVtaXQiLCJjb21tYW5kTGlzdCIsInJlZ2lzdGVyS2V5Ym9hcmRFdmVudEZyb21QbHVnaW4iLCJ1bnJlZ2lzdGVyS2V5Ym9hcmRFdmVudCIsInVucmVnaXN0ZXJDb21tYW5kIiwiaXNmZiIsImFkZEV2ZW50IiwidXNlQ2FwdHVyZSIsImF0dGFjaEV2ZW50IiwiZ2V0TW9kcyIsIm1vZGlmaWVyIiwibW9kcyIsImdldEtleXMiLCJsYXN0SW5kZXhPZiIsImNvbXBhcmVBcnJheSIsImExIiwiYTIiLCJhcnIxIiwiYXJyMiIsImlzSW5kZXgiLCJfa2V5TWFwIiwiYmFja3NwYWNlIiwidGFiIiwiZW50ZXIiLCJlc2MiLCJlc2NhcGUiLCJsZWZ0IiwidXAiLCJyaWdodCIsImRvd24iLCJpbnMiLCJob21lIiwiZW5kIiwicGFnZXVwIiwicGFnZWRvd24iLCJjYXBzbG9jayIsIm51bV8wIiwibnVtXzEiLCJudW1fMiIsIm51bV8zIiwibnVtXzQiLCJudW1fNSIsIm51bV82IiwibnVtXzciLCJudW1fOCIsIm51bV85IiwibnVtX211bHRpcGx5IiwibnVtX2FkZCIsIm51bV9lbnRlciIsIm51bV9zdWJ0cmFjdCIsIm51bV9kZWNpbWFsIiwibnVtX2RpdmlkZSIsIl9tb2RpZmllciIsImFsdCIsImN0cmwiLCJjb250cm9sIiwiY21kIiwibW9kaWZpZXJNYXAiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiX21vZHMiLCJfaGFuZGxlcnMiLCJfZG93bktleXMiLCJ3aW5MaXN0ZW5kRm9jdXMiLCJfc2NvcGUiLCJlbGVtZW50SGFzQmluZEV2ZW50IiwiZ2V0TW9kaWZpZXIiLCJzZXRTY29wZSIsImdldFNjb3BlIiwiZ2V0UHJlc3NlZEtleUNvZGVzIiwiZ2V0UHJlc3NlZEtleVN0cmluZyIsImZyb21DaGFyQ29kZSIsInNyY0VsZW1lbnQiLCJ0YWdOYW1lIiwiZmxhZyIsImlzQ29udGVudEVkaXRhYmxlIiwicmVhZE9ubHkiLCJpc1ByZXNzZWQiLCJkZWxldGVTY29wZSIsIm5ld1Njb3BlIiwiY2xlYXJNb2RpZmllciIsIndoaWNoIiwiY2hhckNvZGUiLCJob3RrZXlzIiwia2V5c0luZm8iLCJlYWNoVW5iaW5kIiwiX2xlbiIsInNwbGl0S2V5IiwiX3JlZiIsIl9yZWYkc3BsaXRLZXkiLCJvcmlnaW5LZXkiLCJ1bmJpbmRLZXlzIiwibGFzdEtleSIsInJlY29yZCIsImV2ZW50SGFuZGxlciIsIm1vZGlmaWVyc01hdGNoIiwicmV0dXJuVmFsdWUiLCJjYW5jZWxCdWJibGUiLCJhc3RlcmlzayIsImtleU5hbWUiLCJrZXlOdW0iLCJnZXRNb2RpZmllclN0YXRlIiwia2V5ZG93biIsImtleXVwIiwia2V5U2hvcnRjdXQiLCJfZG93bktleXNDdXJyZW50IiwiaXNFbGVtZW50QmluZCIsImNhcHR1cmUiLCJ0cmlnZ2VyIiwiX2FwaSIsImtleU1hcCIsIl9ob3RrZXlzIiwiZGVlcCIsImV2ZW50QnVzIiwicmVnaXN0ZXJLZXlib2FyZEV2ZW50IiwidW5yZWdpc3RlcktleWJvYXJkRXZlbnRGcm9tUGx1Z2luIiwicGx1Z2luU3lzdGVtVmVyc2lvbiIsInBsdWdpblN5c3RlbUlvY0NvbnRhaW5lciJdLCJtYXBwaW5ncyI6ImlMQWNJQSxVQUNPQSxrQkEybENSQSxZQUFZQSxVQUFVLENBQUEsR0F4bENyQixT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
