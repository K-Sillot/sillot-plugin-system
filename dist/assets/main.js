class Plugin{onload(){}onunload(){}}const apiGenerate=()=>({addToolbarLeft:()=>{console.log("add toolbar left")},addToolbarRight:()=>{console.log("add toolbar right")}});class BaseComponent{}const modules={Plugin,BaseComponent},path={},SIYUAN_DATA_PATH=window.siyuan.config.system.dataDir,PLUGIN_FOLDER="plugins",MANIFEST="manifest.json",SCRIPT="main.js",scanPlugins=async n=>new Promise((t,o)=>{path.readdir(n,(e,s)=>{if(e){o(e);return}t(s.map(i=>path.resolve(n,i)))})}),getFileContent=async n=>new Promise((t,o)=>{path.readFile(n,(e,s)=>{if(e){o(e);return}return t(s.toString("utf8"))})}),getManifest=async n=>{const t=await getFileContent(n);try{return JSON.parse(t)}catch(o){console.error("loading manifest: "+n,o)}},getScript=async n=>await getScript(),getAllPlugins=async()=>{const n=await scanPlugins(path.join(SIYUAN_DATA_PATH,PLUGIN_FOLDER));if(!n||!n.length){console.info("No plugin found in "+path.join(SIYUAN_DATA_PATH,PLUGIN_FOLDER));return}const t=[];for(const o of n){const[e,s]=await Promise.all([getManifest(path.join(o,MANIFEST)),getScript(path.join(o,SCRIPT))]);t.push({...e,script:s})}return t};let components;class PluginLoader{constructor(){this.plugins=new Map}async loadAllLocalPlugins(){await getAllPlugins()}async loadPlugin(plugin){components||this.generateRequiredModules();const exports={},module={exports};function run(script,name){return eval("(function anonymous(require,module,exports){".concat(script,`
})
//# sourceURL=`).concat(name,`
`))}const __require=n=>{if(components[n])return components[n];throw new Error(`module ${n} not found`)},pluginName=plugin.name;run(plugin.script,plugin.name)(__require,module,exports);let pluginConstructor;if(!(pluginConstructor=(module.exports||exports).default||module.exports))throw new Error(`Failed to load plugin ${pluginName}. No exports detected.`);const plug=new pluginConstructor;if(!(plug instanceof Plugin))throw new Error(`Failed to load plugin ${pluginName}`);plug.onload(),this.plugins.set(pluginName,plug)}async unloadPlugin(n){const t=this.plugins.get(n);t&&(await t.onunload(),this.plugins.delete(n))}generateRequiredModules(){components={siyuan:{...modules,...apiGenerate()}}}}class PluginSystem{constructor(){this.pluginLoader=new PluginLoader}init(){this.pluginLoader.loadAllLocalPlugins()}}console.log("Siyuan Plugin System loading...");new PluginSystem().init();
